/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Wed Mar 02 2016 22:16:42 GMT-0600 (Central Standard Time).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'common/util/ejs',
    'plugin/SoftwareGenerator/SoftwareGenerator/Templates/Templates',
    'plugin/SoftwareGenerator/SoftwareGenerator/meta',
    'q'
], function (
    PluginConfig,
    PluginBase,
    ejs,
    TEMPLATES,
    MetaTypes,
    Q) {
    'use strict';

    /**
     * Initializes a new instance of SoftwareGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin SoftwareGenerator.
     * @constructor
     */
    var SoftwareGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.metaTypes = MetaTypes;
        this.FILES = [
            {
                name: 'component_cpp',
                template: 'component.cpp.ejs'
            },
            {
                name: 'component_hpp',
                template: 'component.hpp.ejs'
            },
            {
                name: 'cmakelists',
                template: 'CMakeLists.txt.ejs',
            }
        ];
    };

    // Prototypal inheritance from PluginBase.
    SoftwareGenerator.prototype = Object.create(PluginBase.prototype);
    SoftwareGenerator.prototype.constructor = SoftwareGenerator;

    /**
     * Gets the name of the SoftwareGenerator.
     * @returns {string} The name of the plugin.
     * @public
     */
    SoftwareGenerator.prototype.getName = function () {
        return 'SoftwareGenerator';
    };

    /**
     * Gets the semantic version (semver.org) of the SoftwareGenerator.
     * @returns {string} The version of the plugin.
     * @public
     */
    SoftwareGenerator.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    SoftwareGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;
        self.updateMETA(self.metaTypes);
        nodeObject = self.activeNode;

        self.createMessage(self.activeNode, 'ROSMOD::Starting Software Code Generator','info');
        var name = self.core.getAttribute(self.activeNode,'name');
        self.createMessage(self.activeNode,'Name: +'+name);

        var connections = [];
        var model_tree = [];
        var type = self.META.Package;
        
        self.core.loadSubTree(self.activeNode, function(err, nodes) {
            if (err) {
                return;
            }
            for (var i=0;i<nodes.length; i+= 1) {
                var name = self.core.getAttribute(nodes[i], 'name');
                var baseType = self.core.getBaseType(nodes[i]);
                var baseName = self.core.getAttribute(baseType, 'name');
                self.createMessage(nodes[i], 'got object type: ' + baseName + ', name: ' + name);
                var attrs = self.core.getAttributeNames(nodes[i]);
                for (var j = 0; j < attrs.length; j += 1) {
                    var attr = attrs[j];
                    var value = self.core.getAttribute(nodes[i], attr);
                    self.createMessage(nodes[i], 'object has attr ' + attr + ', value: ' + value);
                }
                var ptrNames = self.core.getPointerNames(nodes[i]);
                for (var j = 0; j < ptrNames.length; j += 1) {
                    var ptrName = ptrNames[j];
                    self.core.loadPointer(nodes[i], ptrName, function(err, node) {
			var ptrNodeName = self.core.getAttribute(node, 'name');
			self.createMessage(nodes[i], 'object has ptr ' + attr + ', to: ' + ptrNodeName);
		    });
                }
                if (self.core.isTypeOf(nodes[i], type)) {
                    model_tree[name] = nodes[i];
                }
            }
            console.log(model_tree);
        });

        self.createMessage(self.activeNode, 'Finished');

        var onFileSave = function(err) {
            if (err) {
                return callback(err);
            }
            self.blobClient.saveAllArtifacts(function(err, hashes) {
                console.log('Artifacts are saved here:');
                console.log(hashes);

                for (var j=0;j<hashes.length; j+=1) {
                    self.result.addArtifact(hashes[j]);
                }
            });
        };

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.save('SoftwareGenerator updated model.', function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.result.setSuccess(true);
            callback(null, self.result);
        });

    };

    return SoftwareGenerator;
});
