cmake_minimum_required(VERSION 2.8.3)
project(<%- pkgInfo.name %>)

## Start Global Marker
## End Global Marker

## Check C++11 / C++0x
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "-std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "-std=c++0x")
else()
    message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

ADD_DEFINITIONS(-DNAMESPACE=${NAMESPACE})
if (${NAMESPACE} STREQUAL "rosmod")
  find_package(catkin REQUIRED COMPONENTS rosmod std_msgs message_generation)
  ADD_DEFINITIONS(-DUSE_ROSMOD)
ELSEIF(${NAMESPACE} STREQUAL "ros")
  find_package(catkin REQUIRED COMPONENTS roscpp std_msgs message_generation)
  ADD_DEFINITIONS(-DUSE_ROSCPP)
ELSE()
  message(FATAL_ERROR "Some error something wrong")
ENDIF()

<% 
if (pkgInfo.Service_list) { 
-%>
# Generate services in the 'srv' folder
add_service_files(
  FILES
<%   
  pkgInfo.Service_list.map(function(srv) { 
-%>
  <%- srv.name %>.srv
<%
  }); 
-%>
)
<%
} 
-%>

<%
if (pkgInfo.Message_list) { 
-%>
# Generate messages in the 'msg' folder
add_message_files(
  FILES
<%
  pkgInfo.Message_list.map(function(msg) { 
-%>
  <%- msg.name %>.msg
<%
  }); 
-%>
)
<%
} 
-%>


## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

<%
if (pkgInfo.Message_list || pkgInfo.Service_list) {
-%>
# Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
)
<%
}
-%>

#
## catkin specific configuration 
#
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES client_server_package
#  CATKIN_DEPENDS roscpp std_msgs
  CATKIN_DEPENDS message_runtime
#  DEPENDS system_lib
)

#
## Build 
#

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ../../devel/include
  ../node/include
<% 
if (pkgInfo.Component_list) {
  var indexedPackages = [];
  pkgInfo.Component_list.map(function(cmp) {
    // GET ALL REQUIRED TYPES (MSG/SRV) INCLUDES
    if (cmp.Types.length) {
      cmp.Types.map(function(type) { 
        var packageName = objects[type.parentPath].name;
        if (indexedPackages.indexOf(packageName) == -1) {
          indexedPackages.push(packageName);
-%>
  ../<%- packageName %>/include
<% 
        }
      });
    }
    if (cmp['Libraries']) {
      cmp['Libraries'].map(function(lib) {
        if ( lib['Include Directories'] != null ) {
-%>
  <%- lib['Include Directories'] %>
<%
        }
        if ( lib.type == 'Source Library' ) {
-%>
  ../<%- lib.name %>/include
<%
        }
      });
    }
  });
}
-%>
  ${catkin_INCLUDE_DIRS}
)

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
include_directories(include ${catkin_INCLUDE_DIRS})

<%
if (pkgInfo.Component_list) {
  pkgInfo.Component_list.map(function(cmp) {
-%>
add_library(<%- cmp.name %>
            src/<%- pkgInfo.name %>/<%- cmp.name %>.cpp
            )
target_link_libraries(<%- cmp.name %>
                      ${catkin_LIBRARIES}
<%
    if (cmp['Libraries']) {
      cmp['Libraries'].map(function(lib) {
        if ( lib['Link Libraries'] ) {
-%>
                      <%- lib['Link Libraries'] %>
<%
        }
        if ( lib.type == 'Source Library' && lib.CompilesToSO ) {
-%>
                      <%- lib.name %>
<%
        }
      });
    }
-%>
                      )
<%
    if (cmp.Types.length) {
-%>
add_dependencies(<%- cmp.name %>
<%
      var indexedPackages = [];
      cmp.Types.map(function(type) {
        var packageName = objects[type.parentPath].name;
        if (indexedPackages.indexOf(packageName) == -1) {
          indexedPackages.push(packageName);
-%>
	         <%- packageName %>_generate_messages_cpp
<%
        }
      });
-%>
		 )
<%
    }
-%>
<%
  });
} 
-%>
