/* Generated file based on ejs templates */
define([], function() {
    return {
    "CMakeLists.txt.ejs": "cmake_minimum_required(VERSION 2.8.3)\nproject(<%= pkgInfo.name %>)\n\n## Start Global Marker\n## End Global Marker\n\n## Check C++11 / C++0x\ninclude(CheckCXXCompilerFlag)\nCHECK_CXX_COMPILER_FLAG(\"-std=c++11\" COMPILER_SUPPORTS_CXX11)\nCHECK_CXX_COMPILER_FLAG(\"-std=c++0x\" COMPILER_SUPPORTS_CXX0X)\nif(COMPILER_SUPPORTS_CXX11)\n    set(CMAKE_CXX_FLAGS \"-std=c++11\")\nelseif(COMPILER_SUPPORTS_CXX0X)\n    set(CMAKE_CXX_FLAGS \"-std=c++0x\")\nelse()\n    message(FATAL_ERROR \"The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.\")\nendif()\n\nADD_DEFINITIONS(-DNAMESPACE=${NAMESPACE})\nif (${NAMESPACE} STREQUAL \"rosmod\")\n  find_package(catkin REQUIRED COMPONENTS rosmod std_msgs message_generation)\n  ADD_DEFINITIONS(-DUSE_ROSMOD)\nELSEIF(${NAMESPACE} STREQUAL \"ros\")\n  find_package(catkin REQUIRED COMPONENTS roscpp std_msgs message_generation)\n  ADD_DEFINITIONS(-DUSE_ROSCPP)\nELSE()\n  message(FATAL_ERROR \"Some error something wrong\")\nENDIF()\n\n## System dependencies are found with CMake's conventions\n# find_package(Boost REQUIRED COMPONENTS system)\n\n\n## Uncomment this if the package has a setup.py. This macro ensures\n## modules and global scripts declared therein get installed\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n# catkin_python_setup()\n\n#\n## Declare ROS messages, services and actions \n#\n\n## To declare and build messages, services or actions from within this\n## package, follow these steps:\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n## * In the file package.xml:\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n##     pulled in transitively but can be declared for certainty nonetheless:\n##     * add a build_depend tag for \"message_generation\"\n##     * add a run_depend tag for \"message_runtime\"\n## * In this file (CMakeLists.txt):\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n##     find_package(catkin REQUIRED COMPONENTS ...)\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n##     catkin_package(CATKIN_DEPENDS ...)\n##   * uncomment the add_*_files sections below as needed\n##     and list every .msg/.srv/.action file to be processed\n##   * uncomment the generate_messages entry below\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n\n<% if (Object.keys(pkgInfo.services).length > 0) { %>\n# Generate services in the 'srv' folder\nadd_service_files(\n  FILES\n<%\nfor (var srv in pkgInfo.services) {\n-%>\n <%= pkgInfo.services[srv].name %>.srv\n<%\n}\n-%>\n)\n<%\n}\n-%>\n\n<% if (Object.keys(pkgInfo.messages).length > 0) { %>\n# Generate messages in the 'msg' folder\nadd_message_files(\n  FILES\n<%\nfor (var msg in pkgInfo.messages) {\n-%>\n <%= pkgInfo.messages[msg].name %>.msg\n<%\n}\n-%>\n)\n<%\n}\n-%>\n\n\n## Generate actions in the 'action' folder\n# add_action_files(\n#   FILES\n#   Action1.action\n#   Action2.action\n# )\n\n# Generate added messages and services with any dependencies listed here\ngenerate_messages(\n  DEPENDENCIES\n  std_msgs\n)\n\n#\n## catkin specific configuration \n#\n## The catkin_package macro generates cmake config files for your package\n## Declare things to be passed to dependent projects\n## INCLUDE_DIRS: uncomment this if you package contains header files\n## LIBRARIES: libraries you create in this project that dependent projects also need\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n## DEPENDS: system dependencies of this project that dependent projects also need\ncatkin_package(\n#  INCLUDE_DIRS include\n#  LIBRARIES client_server_package\n#  CATKIN_DEPENDS roscpp std_msgs\n  CATKIN_DEPENDS message_runtime\n#  DEPENDS system_lib\n)\n\n#\n## Build \n#\n\n## Specify additional locations of header files\n## Your package locations should be listed before other locations\n# include_directories(include)\ninclude_directories(\n  ../node/include\n<%\nfor (var cmp in pkgInfo.components) {\nfor (var i=0; i<pkgInfo.components[cmp].requiredTypes.length; i++) {\n-%>\n  ../<%= pkgInfo.components[cmp].requiredTypes[i].packageName %>/include\n<%\n}\n-%>\n<%\nfor (var i=0; i<pkgInfo.components[cmp].requiredLibs.length; i++) {\nif ( pkgInfo.components[cmp].requiredLibs[i].includeDirs !== undefined ) {\n-%>\n  <%= pkgInfo.components[cmp].requiredLibs[i].includeDirs %>\n<%\n}\n}\n}\n-%>\n  ${catkin_INCLUDE_DIRS}\n)\n\n## Add folders to be run by python nosetests\n# catkin_add_nosetests(test)\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\n<% for (var cmp in pkgInfo.components) { %>\nadd_library(<%= pkgInfo.components[cmp].name %>\n            src/<%= pkgInfo.name%>/<%= pkgInfo.components[cmp].name %>.cpp\n            )\ntarget_link_libraries(<%= pkgInfo.components[cmp].name %>\n                      ${catkin_LIBRARIES}\n<%\nfor (var i=0; i<pkgInfo.components[cmp].requiredLibs.length; i++) {\nif ( pkgInfo.components[cmp].requiredLibs[i].linkLibs !== undefined ) {\n-%>\n\t\t      <%= pkgInfo.components[cmp].requiredLibs[i].linkLibs %>\n<%\n}\n}\n-%>\n                      )\nadd_dependencies(<%= pkgInfo.components[cmp].name %>\n                 <%= pkgInfo.name %>_generate_messages_cpp\n\t\t )\n<%\n}\n-%>\n",
    "component.cpp.ejs": "#include \"<%- compInfo.packageName %>/<%- compInfo.name %>.hpp\"\n\n// User Definitions\n<%- compInfo.definitions %>\n\n// Initialization Function\nvoid <%- compInfo.name %>::init_timer_operation(const NAMESPACE::TimerEvent& event)\n{\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Entering <%- compInfo.name %>::init_timer_operation\");\n#endif\n  // User Initialization\n  <%- compInfo.initialization %>\n  // Stop Init Timer\n  init_timer.stop();\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Exiting <%- compInfo.name %>::init_timer_operation\");\n#endif  \n}\n\n<%\nfor (var tmr in compInfo.timers) {\n-%>\n// Timer Operation - <%- compInfo.timers[tmr].name %>\nvoid <%- compInfo.name %>::<%- compInfo.timers[tmr].name %>_operation(const NAMESPACE::TimerEvent& event)\n{\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Entering <%- compInfo.name %>::<%- compInfo.timers[tmr].name %>_operation\");\n#endif\n  <%- compInfo.timers[tmr].operation %>\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Exiting <%- compInfo.name %>::<%- compInfo.timers[tmr].name %>_operation\");\n#endif\n}\n<%\n}\n-%>\n\n<%\nfor (var sub in compInfo.subscribers) {\n-%>\n// Subscriber Operation - <%- compInfo.subscribers[sub].name %>\nvoid <%- compInfo.name %>::<%- compInfo.subscribers[sub].name %>_operation(const <%- compInfo.subscribers[sub].topic.packageName %>::<%- compInfo.subscribers[sub].topic.name %>::ConstPtr& received_data)\n{\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Entering <%- compInfo.name %>::<%- compInfo.subscribers[sub].name %>_operation\");\n#endif\n  <%- compInfo.subscribers[sub].operation %>\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Exiting <%- compInfo.name %>::<%- compInfo.subscribers[sub].name %>_operation\");\n#endif\n}\n<%\n}\n-%>\n\n<%\nfor (var srv in compInfo.servers) {\n-%>\n// Server Operation - <%- compInfo.servers[srv].name %>\nvoid <%- compInfo.name %>::<%- compInfo.servers[srv].name %>_operation(const <%- compInfo.servers[srv].service.packageName %>::<%- compInfo.servers[srv].service.name %>::Request &req, <%- compInfo.servers[srv].service.packageName %>::<%- compInfo.servers[srv].service.name %>::Response &res )\n{\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Entering <%- compInfo.name %>::<%- compInfo.servers[srv].name %>_operation\");\n#endif\n  <%- compInfo.servers[srv].operation %>\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->log(\"DEBUG\", \"Exiting <%- compInfo.name %>::<%- compInfo.servers[srv].name %>_operation\");\n#endif\n}\n<%\n}\n-%>\n\n\n// Destructor - Cleanup Ports & Timers\n<%- compInfo.name %>::~<%- compInfo.name %>()\n{\n<%\nfor (var tmr in compInfo.timers){\n-%>\n  <%- compInfo.timers[tmr].name %>.stop();\n<%\n}\n-%>\n<%\nfor (var pub in compInfo.publishers){\n-%>\n  <%- compInfo.publishers[pub].name %>.shutdown();\n<%\n}\n-%>\n<%\nfor (var sub in compInfo.subscribers){\n-%>\n  <%- compInfo.subscribers[sub].name %>.shutdown();\n<%\n}\n-%>\n<%\nfor (var clt in compInfo.clients){\n-%>\n  <%- compInfo.clients[clt].name %>.shutdown();\n<%\n}\n-%>\n<%\nfor (var srv in compInfo.servers){\n-%>\n  <%- compInfo.servers[srv].name %>.shutdown();\n<%\n}\n-%>\n  // User Destruction\n  <%- compInfo.destruction %>\n}\n\n// Startup - Setup Component Ports & Timers\nvoid <%- compInfo.name %>::startUp()\n{\n  NAMESPACE::NodeHandle nh;\n  std::string advertiseName;\n\n  // Identify the pwd of Node Executable\n  std::string s = node_argv[0];\n  std::string exec_path = s;\n  std::string delimiter = \"/\";\n  std::string exec, pwd;\n  size_t pos = 0;\n  while ((pos = s.find(delimiter)) != std::string::npos) {\n    exec = s.substr(0, pos);\n    s.erase(0, pos + delimiter.length());\n  }\n  exec = s.substr(0, pos);\n  pwd = exec_path.erase(exec_path.find(exec), exec.length());\n  std::string log_file_path = pwd + config.nodeName + \".\" + config.compName + \".log\"; \n\n  logger->create_file(pwd + config.nodeName + \".\" + config.compName + \".log\");\n  logger->set_is_periodic(config.is_periodic_logging);\n  logger->set_max_log_unit(config.periodic_log_unit);\n\n#ifdef USE_ROSMOD\n  comp_queue.ROSMOD_LOGGER->create_file(pwd + \"ROSMOD_DEBUG.\" + config.nodeName + \".\" + config.compName + \".log\");\n  comp_queue.ROSMOD_LOGGER->set_is_periodic(config.is_periodic_logging);\n  comp_queue.ROSMOD_LOGGER->set_max_log_unit(config.periodic_log_unit);\n#endif    \n  \n#ifdef USE_ROSMOD \n  this->comp_queue.scheduling_scheme = config.schedulingScheme;\n  rosmod::ROSMOD_Callback_Options callback_options;\n#endif  \n\n  // Servers\n<%\nfor (var srv in compInfo.servers) {\n-%>\n  // Server - <%- compInfo.servers[srv].name %>\n#ifdef USE_ROSMOD  \n  callback_options.alias = \"<%- compInfo.servers[srv].name %>_operation\";\n  callback_options.priority = <%- compInfo.servers[srv].priority %>;\n  callback_options.deadline.sec =<%- Math.floor(compInfo.servers[srv].deadline) %>;\n  callback_options.deadline.nsec = <%- compInfo.servers[srv].deadline % 1 %>;\n#endif    \n  advertiseName = \"<%- compInfo.servers[srv].service.name %>\";\n  if (config.portGroupMap.find(\"<%- compInfo.servers[srv].name %>\") != config.portGroupMap.end())\n    advertiseName += \"_\" + config.portGroupMap[\"<%- compInfo.servers[srv].name %>\"];\n  NAMESPACE::AdvertiseServiceOptions <%- compInfo.servers[srv].name %>_server_options;\n  <%- compInfo.servers[srv].name %>_server_options = NAMESPACE::AdvertiseServiceOptions::create<<%- compInfo.servers[srv].service.packageName %>::<%- compInfo.servers[srv].service.name %>>\n      (advertiseName.c_str(),\n       boost::bind(&<%- compInfo.name %>::<%- compInfo.servers[srv].name %>_operation, this, _1, _2),\n       NAMESPACE::VoidPtr(),\n#ifdef USE_ROSMOD       \n       &this->comp_queue,\n       callback_options);\n#else\n       &this->comp_queue);\n#endif\n  this-><%- compInfo.servers[srv].name %> = nh.advertiseService(<%- compInfo.servers[srv].name %>_server_options);\n<%\n}\n-%>\n  // Clients\n<%\nfor (var clt in compInfo.clients) {\n-%>\n  // Client - <%- compInfo.clients[clt].name %>\n  advertiseName = \"<%- compInfo.clients[clt].service.name %>\";\n  if (config.portGroupMap.find(\"<%- compInfo.clients[clt].name %>\") != config.portGroupMap.end())\n    advertiseName += \"_\" + config.portGroupMap[\"<%- compInfo.clients[clt].name %>\"];\n  this-><%- compInfo.clients[clt].name %> = nh.serviceClient<<%- compInfo.clients[clt].service.packageName %>::<%- compInfo.clients[clt].service.name %>>(advertiseName.c_str(), true); \n<%\n}\n-%>\n  // Publishers\n<%\nfor (var pub in compInfo.publishers) {\n-%>\n  // Publisher - <%- compInfo.publishers[pub].name %>\n  advertiseName = \"<%- compInfo.publishers[pub].topic.name %>\";\n  if (config.portGroupMap.find(\"<%- compInfo.publishers[pub].name %>\") != config.portGroupMap.end())\n    advertiseName += \"_\" + config.portGroupMap[\"<%- compInfo.publishers[pub].name %>\"];\n  this-><%- compInfo.publishers[pub].name %> = nh.advertise<<%- compInfo.publishers[pub].topic.packageName %>::<%- compInfo.publishers[pub].topic.name %>>(advertiseName.c_str(), true); \n<%\n}\n-%>\n  // Subscribers\n<%\nfor (var sub in compInfo.subscribers) {\n-%>\n  // Subscriber - <%- compInfo.subscribers[sub].name %>\n#ifdef USE_ROSMOD \n  callback_options.alias = \"<%- compInfo.subscribers[sub].name %>_operation\";\n  callback_options.priority = <%- compInfo.subscribers[sub].priority %>;\n  callback_options.deadline.sec = <%- Math.floor(compInfo.subscribers[sub].deadline) %>;\n  callback_options.deadline.nsec = <%- compInfo.subscribers[sub].deadline % 1 %>;\n#endif  \n  advertiseName = \"<%- compInfo.subscribers[sub].topic.name %>\";\n  if (config.portGroupMap.find(\"<%- compInfo.subscribers[sub].name %>\") != config.portGroupMap.end())\n    advertiseName += \"_\" + config.portGroupMap[\"<%- compInfo.subscribers[sub].name %>\"];\n  NAMESPACE::SubscribeOptions <%- compInfo.subscribers[sub].name %>_options;\n  <%- compInfo.subscribers[sub].name %>_options = NAMESPACE::SubscribeOptions::create<<%- compInfo.subscribers[sub].topic.packageName %>::<%- compInfo.subscribers[sub].topic.name %>>\n      (advertiseName.c_str(),\n       1000,\n       boost::bind(&<%- compInfo.name %>::<%- compInfo.subscribers[sub].name %>_operation, this, _1),\n       NAMESPACE::VoidPtr(),\n#ifdef USE_ROSMOD\n       &this->comp_queue,\n       callback_options);\n#else\n       &this->comp_queue);\n#endif \n  this-><%- compInfo.subscribers[sub].name %> = nh.subscribe(<%- compInfo.subscribers[sub].name %>_options);\n<%\n}\n-%>\n\n  // Init Timer\n#ifdef USE_ROSMOD    \n  callback_options.alias = \"init_timer_operation\";\n  callback_options.priority = 99;\n  callback_options.deadline.sec = 1;\n  callback_options.deadline.nsec = 0;\n#endif\n  NAMESPACE::TimerOptions timer_options;\n  timer_options = \n    NAMESPACE::TimerOptions\n    (ros::Duration(-1),\n     boost::bind(&<%- compInfo.name %>::init_timer_operation, this, _1),\n     &this->comp_queue,\n#ifdef USE_ROSMOD     \n     callback_options,\n#endif     \n     true,\n     false); \n  this->init_timer = nh.createTimer(timer_options);\n  this->init_timer.stop();\n\n  // Timers\n<%\nfor (var tmr in compInfo.timers){\n-%>\n  // Component Timer - <%- compInfo.timers[tmr].name %>\n#ifdef USE_ROSMOD   \n  callback_options.alias = \"<%- compInfo.timers[tmr].name %>_operation\";\n  callback_options.priority = <%- compInfo.timers[tmr].priority %>;\n  callback_options.deadline.sec = <%- Math.floor(compInfo.timers[tmr].deadline) %>;\n  callback_options.deadline.nsec = <%- compInfo.timers[tmr].priority % 1 %>;\n#endif\n  timer_options = \n    NAMESPACE::TimerOptions\n    (ros::Duration(5.0),\n     boost::bind(&<%- compInfo.name %>::<%- compInfo.timers[tmr].name %>_operation, this, _1),\n     &this->comp_queue,\n#ifdef USE_ROSMOD     \n     callback_options,\n#endif \n     false,\n     false);\n  this-><%- compInfo.timers[tmr].name %> = nh.createTimer(timer_options);\n  this-><%- compInfo.timers[tmr].name %>.stop();\n<%\n}\n-%>\n\n  // Start the timers\n  this->init_timer.start();\n<%\nfor (var tmr in compInfo.timers){\n-%>\n  this-><%- compInfo.timers[tmr].name %>.start();\n<%\n}\n-%>\n}\n\nextern \"C\" {\n  Component *maker(ComponentConfig &config, int argc, char **argv) {\n    return new <%- compInfo.name %>(config,argc,argv);\n  }\n}\n\n",
    "component.hpp.ejs": "#ifndef CLIENT_HPP\n#define CLIENT_HPP\n#include \"node/Component.hpp\"\n\n// Messages and Services required for this component\n<%\nfor (var i=0; i < compInfo.requiredTypes.length; i++) {\n-%>\n#include \"<%- compInfo.requiredTypes[i].packageName %>/<%- compInfo.requiredTypes[i].name %>.h\"\n<%\n}\n-%>\n\n#ifdef USE_ROSMOD\n  #include \"rosmod/rosmod_ros.h\"\n#else\n  #ifdef USE_ROSCPP\n    #include \"ros/ros.h\"\n  #endif\n#endif\n\n// User Global Forwards\n<%- compInfo.forwards %>\n\nclass <%- compInfo.name %> : public Component\n{\npublic:\n  // Constructor\n  <%- compInfo.name %>(ComponentConfig& _config, int argc, char **argv)\n  : Component(_config, argc, argv) {}\n\n  // Initialization\n  void init_timer_operation(const NAMESPACE::TimerEvent& event);\n\n  // Timers\n<%\nfor (var tmr in compInfo.timers) {\n-%>\n  void <%- compInfo.timers[tmr].name %>_operation(const NAMESPACE::TimerEvent& event);\n<%\n}\n-%>\n  // Subscribers\n<%\nfor (var sub in compInfo.subscribers) {\n-%>\n  void <%- compInfo.subscribers[sub].name %>_operation(const <%- compInfo.subscribers[sub].topic.packageName %>::<%- compInfo.subscribers[sub].topic.name %>::ConstPtr& received_data);\n<%\n}\n-%>\n  // Servers\n<%\nfor (var srv in compInfo.servers) {\n-%>\n  void <%- compInfo.servers[srv].name %>_operation(const <%- compInfo.servers[srv].service.packageName %>::<%- compInfo.servers[srv].service.name %>::Request &req, <%- compInfo.servers[srv].service.packageName %>::<%- compInfo.servers[srv].service.name %>::Response &res);\n<%\n}\n-%>\n\n  // Start up\n  void startUp();\n\n  // Destructor\n  ~<%- compInfo.name %>();\n\nprivate:\n\n<%\nfor (var tmr in compInfo.timers) {\n-%>\n  NAMESPACE::Timer <%- compInfo.timers[tmr].name %>;\n<%\n}\n-%>\n<%\nfor (var svr in compInfo.servers) {\n-%>\n  NAMESPACE::ServiceServer <%- compInfo.servers[svr].name %>;\n<%\n}\n-%>\n<%\nfor (var clt in compInfo.clients) {\n -%>\n  NAMESPACE::ServiceClient <%- compInfo.clients[clt].name %>;\n<%\n}\n-%>\n<%\nfor (var pub in compInfo.publishers) {\n -%>\n  NAMESPACE::Publisher <%- compInfo.publishers[pub].name %>;\n<%\n}\n-%>\n<%\nfor (var sub in compInfo.subscribers) {\n -%>\n  // <%- compInfo.subscribers[sub].name %>\n  NAMESPACE::Subscriber <%- compInfo.subscribers[sub].name %>;\n<%\n}\n-%>\n\n  // User Private Members\n  <%- compInfo.members %>\n};\n\n#endif\n\n",
    "package_xml.ejs": "<?xml version=\"1.0\"?>\n<package>\n  <name><%= pkgInfo.name %></name>\n  <version>0.0.0</version>\n  <description>The <%= pkgInfo.name %> package</description>\n\n  <!-- One maintainer tag required, multiple allowed, one person per tag --> \n  <!-- Example:  -->\n  <!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> -->\n  <maintainer email=\"emfinger@isis.vanderbilt.edu\">William Emfinger</maintainer>\n  <maintainer email=\"pkumar@isis.vanderbilt.edu\">Pranav Srinivas Kumar</maintainer>\n\n  <!-- One license tag required, multiple allowed, one license per tag -->\n  <!-- Commonly used license strings: -->\n  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->\n  <license>BSD</license>\n\n\n  <!-- Url tags are optional, but mutiple are allowed, one per tag -->\n  <!-- Optional attribute type can be: website, bugtracker, or repository -->\n  <!-- Example: -->\n  <!-- <url type=\"website\">http://wiki.ros.org/multi_component_example</url> -->\n\n\n  <!-- Author tags are optional, mutiple are allowed, one per tag -->\n  <!-- Authors do not have to be maintianers, but could be -->\n  <!-- Example: -->\n  <!-- <author email=\"jane.doe@example.com\">Jane Doe</author> -->\n\n\n  <!-- The *_depend tags are used to specify dependencies -->\n  <!-- Dependencies can be catkin packages or system dependencies -->\n  <!-- Examples: -->\n  <!-- Use build_depend for packages you need at compile time: -->\n  <build_depend>message_generation</build_depend>\n  <!-- Use buildtool_depend for build tool packages: -->\n  <!--   <buildtool_depend>catkin</buildtool_depend> -->\n  <!-- Use run_depend for packages you need at runtime: -->\n  <run_depend>message_runtime</run_depend>\n  <!-- Use test_depend for packages you need only for testing: -->\n  <!--   <test_depend>gtest</test_depend> -->\n  <buildtool_depend>catkin</buildtool_depend>\n\n  <build_depend>rosmod</build_depend>\n  <build_depend>roscpp</build_depend>\n  <build_depend>std_msgs</build_depend>\n\n  <run_depend>rosmod</run_depend>\n  <run_depend>roscpp</run_depend>\n  <run_depend>std_msgs</run_depend>\n\n  <!-- The export tag contains other, unspecified, tags -->\n  <export>\n    <!-- You can specify that this package is a metapackage here: -->\n    <!-- <metapackage/> -->\n\n    <!-- Other tools can request additional information be placed here -->\n\n  </export>\n</package>\n"
}});