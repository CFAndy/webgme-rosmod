/** @file    <%- compInfo.name %>.cpp 
 *  @author  <%- compInfo.Authors %>
 *  @date    <%= moment().format() %>
 *  @brief   This file contains definitions for the <%- compInfo.name %> class; <%- compInfo['Brief Description'] %>
 */

#include "<%- model.pathDict[compInfo.parentPath].name %>/<%- compInfo.name %>.hpp"

// User Definitions
<%- compInfo.Definitions %>

// Component Initialization 
void <%- compInfo.name %>::init_timer_operation(const NAMESPACE::TimerEvent& event)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%- compInfo.name %>::init_timer_operation");
#endif
  // User Initialization Code
  <%- compInfo.Initialization %>
  init_timer.stop();
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%- compInfo.name %>::init_timer_operation");
#endif  
}

<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
// Timer Operation - <%- tmr.name %>
void <%- compInfo.name %>::<%- tmr.name %>_operation(const NAMESPACE::TimerEvent& event)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%- compInfo.name %>::<%- tmr.name %>_operation");
#endif
  <%- tmr.Operation %>
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%- compInfo.name %>::<%- tmr.name %>_operation");
#endif
}
<%
  });
 }
-%>

<%
if (compInfo.Subscriber_list) {
  compInfo.Subscriber_list.map(function(sub) {
-%>
// Subscriber Operation - <%- sub.name %>
void <%- compInfo.name %>::<%- sub.name %>_operation(const <%- model.pathDict[sub.Message.parentPath].name %>::<%- sub.Message.name %>::ConstPtr& received_data)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%- compInfo.name %>::<%- sub.name %>_operation");
#endif
  <%- sub.Operation %>
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%- compInfo.name %>::<%- sub.name %>_operation");
#endif
}
<%
  });
 }
-%>

<%
if (compInfo.Server_list) {
  compInfo.Server_list.map(function(srv) {
-%>
// Server Operation - <%- srv.name %>
bool <%- compInfo.name %>::<%- srv.name %>_operation(const <%- model.pathDict[srv.Service.parentPath].name %>::<%- srv.Service.name %>::Request &req, <%- model.pathDict[srv.Service.parentPath].name %>::<%- srv.Service.name %>::Response &res )
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%- compInfo.name %>::<%- srv.name %>_operation");
#endif
  <%- srv.Operation %>
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%- compInfo.name %>::<%- srv.name %>_operation");
#endif
  return true;
}
<%
  });
 }
-%>

// Destructor - Cleanup Ports & Timers
<%- compInfo.name %>::~<%- compInfo.name %>()
{
<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
  <%- tmr.name %>.stop();
<%
	});
 }
-%>
<%
if (compInfo.Publisher_list) {
  compInfo.Publisher_list.map(function(pub) {
-%>
  <%- pub.name %>.shutdown();
<%
	});
 }
-%>
<%
if (compInfo.Subscriber_list) {
  compInfo.Subscriber_list.map(function(sub) {
-%>
  <%- sub.name %>.shutdown();
<%
	});
 }
-%>
<%
if (compInfo.Client_list) {
  compInfo.Client_list.map(function(clt) {
-%>
  <%- clt.name %>.shutdown();
<%
	});
 }
-%>
<%
if (compInfo.Server_list) {
  compInfo.Server_list.map(function(srv) {
-%>
  <%- srv.name %>.shutdown();
<%
	});
 }
-%>
  // User Destruction
  <%- compInfo.Destruction %>
}

// Startup - Setup Component Ports & Timers
void <%- compInfo.name %>::startUp()
{
  NAMESPACE::NodeHandle nh;
  std::string advertiseName;

  // Identify the pwd of Node Executable
  std::string s = node_argv[0];
  std::string exec_path = s;
  std::string delimiter = "/";
  std::string exec, pwd;
  size_t pos = 0;
  while ((pos = s.find(delimiter)) != std::string::npos) {
    exec = s.substr(0, pos);
    s.erase(0, pos + delimiter.length());
  }
  exec = s.substr(0, pos);
  pwd = exec_path.erase(exec_path.find(exec), exec.length());
  std::string log_file_path = pwd + config.nodeName + "." + config.compName + ".log"; 

  logger->create_file(pwd + config.nodeName + "." + config.compName + ".log");
  logger->set_is_periodic(config.is_periodic_logging);
  logger->set_max_log_unit(config.periodic_log_unit);

#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->create_file(pwd + "ROSMOD_DEBUG." + config.nodeName + "." + config.compName + ".log");
  comp_queue.ROSMOD_LOGGER->set_is_periodic(config.is_periodic_logging);
  comp_queue.ROSMOD_LOGGER->set_max_log_unit(config.periodic_log_unit);
#endif    
  
#ifdef USE_ROSMOD 
  this->comp_queue.scheduling_scheme = config.schedulingScheme;
  rosmod::ROSMOD_Callback_Options callback_options;
#endif  

  // Servers
<%
if (compInfo.Server_list) {
  compInfo.Server_list.map(function(srv) {
-%>
  // Server - <%- srv.name %>
#ifdef USE_ROSMOD  
  callback_options.alias = "<%- srv.name %>_operation";
  callback_options.priority = <%- srv.Priority %>;
  callback_options.deadline.sec =<%- Math.floor(srv.Deadline) %>;
  callback_options.deadline.nsec = <%- Math.floor((srv.Deadline % 1) * 1000000000) %>;
#endif    
  advertiseName = "<%- srv.Service.name %>";
  if (config.portGroupMap.find("<%- srv.name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%- srv.name %>"];
  NAMESPACE::AdvertiseServiceOptions <%- srv.name %>_server_options;
  <%- srv.name %>_server_options = NAMESPACE::AdvertiseServiceOptions::create<<%- model.pathDict[srv.Service.parentPath].name %>::<%- srv.Service.name %>>
      (advertiseName.c_str(),
       boost::bind(&<%- compInfo.name %>::<%- srv.name %>_operation, this, _1, _2),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD       
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif
  this-><%- srv.name %> = nh.advertiseService(<%- srv.name %>_server_options);
<%
    });
}
-%>
  // Clients
<%
if (compInfo.Client_list) {
  compInfo.Client_list.map(function(clt) {
-%>
  // Client - <%- clt.name %>
  advertiseName = "<%- clt.Service.name %>";
  if (config.portGroupMap.find("<%- clt.name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%- clt.name %>"];
  this-><%- clt.name %> = nh.serviceClient<<%- model.pathDict[clt.Service.parentPath].name %>::<%- clt.Service.name %>>(advertiseName.c_str());//, true); 
  this-><%- clt.name %>.waitForExistence();
  logger->log("DEBUG", "<%- clt.name %> connected!");
<%
    });
 }
-%>
  // Publishers
<%
if (compInfo.Publisher_list) {
  compInfo.Publisher_list.map(function(pub) {
-%>
  // Publisher - <%- pub.name %>
  advertiseName = "<%- pub.Message.name %>";
  if (config.portGroupMap.find("<%- pub.name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%- pub.name %>"];
  this-><%- pub.name %> = nh.advertise<<%- model.pathDict[pub.Message.parentPath].name %>::<%- pub.Message.name %>>(advertiseName.c_str(), 1000); 
<%
    });
 }
-%>
  // Subscribers
<%
if (compInfo.Subscriber_list) {
  compInfo.Subscriber_list.map(function(sub) {
-%>
  // Subscriber - <%- sub.name %>
#ifdef USE_ROSMOD 
  callback_options.alias = "<%- sub.name %>_operation";
  callback_options.priority = <%- sub.Priority %>;
  callback_options.deadline.sec = <%- Math.floor(sub.Deadline) %>;
  callback_options.deadline.nsec = <%- Math.floor((sub.Deadline % 1) * 1000000000) %>;
#endif  
  advertiseName = "<%- sub.Message.name %>";
  if (config.portGroupMap.find("<%- sub.name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%- sub.name %>"];
  NAMESPACE::SubscribeOptions <%- sub.name %>_options;
  <%- sub.name %>_options = NAMESPACE::SubscribeOptions::create<<%- model.pathDict[sub.Message.parentPath].name %>::<%- sub.Message.name %>>
      (advertiseName.c_str(),
       1000,
       boost::bind(&<%- compInfo.name %>::<%- sub.name %>_operation, this, _1),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif 
  this-><%- sub.name %> = nh.subscribe(<%- sub.name %>_options);
<%
    });
}
-%>

  // Init Timer
#ifdef USE_ROSMOD    
  callback_options.alias = "init_timer_operation";
  callback_options.priority = 99;
  callback_options.deadline.sec = 1;
  callback_options.deadline.nsec = 0;
#endif
  NAMESPACE::TimerOptions timer_options;
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(-1),
     boost::bind(&<%- compInfo.name %>::init_timer_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif     
     true,
     false); 
  this->init_timer = nh.createTimer(timer_options);
  this->init_timer.stop();

  // Timers
<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
  // Component Timer - <%- tmr.name %>
#ifdef USE_ROSMOD   
  callback_options.alias = "<%- tmr.name %>_operation";
  callback_options.priority = <%- tmr.Priority %>;
  callback_options.deadline.sec = <%- Math.floor(tmr.Deadline) %>;
  callback_options.deadline.nsec = <%- Math.floor((tmr.Deadline % 1) * 1000000000) %>;
#endif
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(<%- tmr.Period %>),
     boost::bind(&<%- compInfo.name %>::<%- tmr.name %>_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif 
     <% if ( tmr.Period == 0 ) { -%>
     true,
     <% } else { -%>
     false,
     <% } -%>
     false);
  this-><%- tmr.name %> = nh.createTimer(timer_options);
  this-><%- tmr.name %>.stop();
<%
    });
 }
-%>

  // Start the timers
  this->init_timer.start();
<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
  this-><%- tmr.name %>.start();
<%
    });
 }
-%>
}

extern "C" {
  Component *maker(ComponentConfig &config, int argc, char **argv) {
    return new <%- compInfo.name %>(config,argc,argv);
  }
}

