/** @file    <%- compInfo.name %>.cpp 
 *  @author  <%- compInfo.Authors %>
 *  @date    <%= moment().format() %>
 *  @brief   This file contains definitions for the <%- compInfo.name %> class; <%- compInfo['Brief Description'] %>
 */

#include "<%- objects[compInfo.parentPath].name %>/<%- compInfo.name %>.hpp"

// User Definitions
//::::<%- compInfo.path %>::::Definitions::::
<%- compInfo.Definitions %>

// Component Initialization 
void <%- compInfo.name %>::init_timer_operation(const NAMESPACE::TimerEvent& event)
{
  // User Initialization Code
  //::::<%- compInfo.path %>::::Initialization::::
  try {
  <%- compInfo.Initialization %>
  } catch (std::exception& e) {
    // catch exceptions
    logger->log("ERROR", "std::exception caught in <%- compInfo.name %>::initialization: %s", e.what());
  } catch ( ... ) {
    // catch everything else
    logger->log("ERROR", "unknown exception caught in <%- compInfo.name %>::initialization");
  }
  init_timer.stop();
}

<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
// Timer Operation - <%- tmr.name %>
void <%- compInfo.name %>::<%- tmr.name %>_operation(const NAMESPACE::TimerEvent& event)
{
  //::::<%- tmr.path %>::::Operation::::
  try {
  <%- tmr.Operation %>
  } catch (std::exception& e) {
    // catch exceptions
    logger->log("ERROR", "std::exception caught in <%- compInfo.name %>::<%- tmr.name %>_operation: %s", e.what());
  } catch ( ... ) {
    // catch everything else
    logger->log("ERROR", "unknown exception caught in <%- compInfo.name %>::<%- tmr.name %>_operation");
  }
}
<%
  });
 }
-%>

<%
if (compInfo.Subscriber_list) {
  compInfo.Subscriber_list.map(function(sub) {
-%>
// Subscriber Operation - <%- sub.name %>
void <%- compInfo.name %>::<%- sub.name %>_operation(const <%- objects[sub.Message.parentPath].name %>::<%- sub.Message.name %>::ConstPtr& received_data)
{
  //::::<%- sub.path %>::::Operation::::
  try {
  <%- sub.Operation %>
  } catch (std::exception& e) {
    // catch exceptions
    logger->log("ERROR", "std::exception caught in <%- compInfo.name %>::<%- sub.name %>_operation: %s", e.what());
  } catch ( ... ) {
    // catch everything else
    logger->log("ERROR", "unknown exception caught in <%- compInfo.name %>::<%- sub.name %>_operation");
  }
}
<%
  });
 }
-%>

<%
if (compInfo.Server_list) {
  compInfo.Server_list.map(function(srv) {
-%>
// Server Operation - <%- srv.name %>
bool <%- compInfo.name %>::<%- srv.name %>_operation(const <%- objects[srv.Service.parentPath].name %>::<%- srv.Service.name %>::Request &req, <%- objects[srv.Service.parentPath].name %>::<%- srv.Service.name %>::Response &res )
{
  //::::<%- srv.path %>::::Operation::::
  try {
  <%- srv.Operation %>
  } catch (std::exception& e) {
    // catch exceptions
    logger->log("ERROR", "std::exception caught in <%- compInfo.name %>::<%- srv.name %>_operation: %s", e.what());
  } catch ( ... ) {
    // catch everything else
    logger->log("ERROR", "unknown exception caught in <%- compInfo.name %>::<%- srv.name %>_operation");
  }
  return true;
}
<%
  });
 }
-%>

// Destructor - Cleanup Ports & Timers
<%- compInfo.name %>::~<%- compInfo.name %>()
{
<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
  <%- tmr.name %>.stop();
<%
	});
 }
-%>
<%
if (compInfo.Publisher_list) {
  compInfo.Publisher_list.map(function(pub) {
-%>
  <%- pub.name %>.shutdown();
<%
	});
 }
-%>
<%
if (compInfo.Subscriber_list) {
  compInfo.Subscriber_list.map(function(sub) {
-%>
  <%- sub.name %>.shutdown();
<%
	});
 }
-%>
<%
if (compInfo.Client_list) {
  compInfo.Client_list.map(function(clt) {
-%>
  <%- clt.name %>.shutdown();
<%
	});
 }
-%>
<%
if (compInfo.Server_list) {
  compInfo.Server_list.map(function(srv) {
-%>
  <%- srv.name %>.shutdown();
<%
	});
 }
-%>
  // User Destruction
  <%- compInfo.Destruction %>
}

// Startup - Setup Component Ports & Timers
void <%- compInfo.name %>::startUp()
{
  NAMESPACE::NodeHandle nh;
  std::string advertiseName;
  ros::Duration deadline;
  bool isOneShot;

  logger->create_file(workingDir + '/' + config["Logging"]["Component Logger"]["FileName"].asString());
  logger->set_is_periodic(config["Logging"]["Component Logger"]["Enabled"].asBool());
  logger->set_max_log_unit(config["Logging"]["Component Logger"]["Unit"].asInt());

#ifdef USE_ROSMOD
  if ( config["Logging"]["ROSMOD Logger"]["Enabled"].asBool() ) {
    comp_queue.ROSMOD_LOGGER->enable_logging();
    comp_queue.ROSMOD_LOGGER->create_file( workingDir + '/' + config["Logging"]["ROSMOD Logger"]["FileName"].asString());
    comp_queue.ROSMOD_LOGGER->set_max_log_unit(config["Logging"]["ROSMOD Logger"]["Unit"].asInt());
  }
#endif    
  
#ifdef USE_ROSMOD 
  this->comp_queue.scheduling_scheme = config["SchedulingScheme"].asString();
  rosmod::ROSMOD_Callback_Options callback_options;
#endif  

  // Servers
<%
if (compInfo.Server_list) {
  compInfo.Server_list.map(function(srv) {
-%>
  // Server - <%- srv.name %>
#ifdef USE_ROSMOD  
  callback_options.alias = "<%- srv.name %>_operation";
  
  callback_options.priority = config["Servers"]["<%- srv.name %>"]["Priority"].asInt();
  deadline = ros::Duration(config["Servers"]["<%- srv.name %>"]["Deadline"].asFloat());
  callback_options.deadline.sec = deadline.sec;
  callback_options.deadline.nsec = deadline.nsec;
#endif    
  advertiseName = "<%- srv.Service.name %>";
  NAMESPACE::AdvertiseServiceOptions <%- srv.name %>_server_options;
  <%- srv.name %>_server_options = NAMESPACE::AdvertiseServiceOptions::create<<%- objects[srv.Service.parentPath].name %>::<%- srv.Service.name %>>
      (advertiseName.c_str(),
       boost::bind(&<%- compInfo.name %>::<%- srv.name %>_operation, this, _1, _2),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD       
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif
  this-><%- srv.name %> = nh.advertiseService(<%- srv.name %>_server_options);
<%
    });
}
-%>
  // Clients
<%
if (compInfo.Client_list) {
  compInfo.Client_list.map(function(clt) {
-%>
  // Client - <%- clt.name %>
  advertiseName = "<%- clt.Service.name %>";
  this-><%- clt.name %> = nh.serviceClient<<%- objects[clt.Service.parentPath].name %>::<%- clt.Service.name %>>(advertiseName.c_str());//, true); 
  this-><%- clt.name %>.waitForExistence();
  logger->log("DEBUG", "<%- clt.name %> connected!");
<%
    });
 }
-%>
  // Publishers
<%
if (compInfo.Publisher_list) {
  compInfo.Publisher_list.map(function(pub) {
-%>
  // Publisher - <%- pub.name %>
  advertiseName = "<%- pub.Message.name %>";
  this-><%- pub.name %> = nh.advertise<<%- objects[pub.Message.parentPath].name %>::<%- pub.Message.name %>>(advertiseName.c_str(), 1000); 
<%
    });
 }
-%>
  // Subscribers
<%
if (compInfo.Subscriber_list) {
  compInfo.Subscriber_list.map(function(sub) {
-%>
  // Subscriber - <%- sub.name %>
#ifdef USE_ROSMOD 
  callback_options.alias = "<%- sub.name %>_operation";

  callback_options.priority = config["Subscribers"]["<%- sub.name %>"]["Priority"].asInt();
  deadline = ros::Duration(config["Subscribers"]["<%- sub.name %>"]["Deadline"].asFloat());
  callback_options.deadline.sec = deadline.sec;
  callback_options.deadline.nsec = deadline.nsec;

  callback_options.priority = <%- sub.Priority %>;
  callback_options.deadline.sec = <%- Math.floor(sub.Deadline) %>;
  callback_options.deadline.nsec = <%- Math.floor((sub.Deadline % 1) * 1000000000) %>;
#endif  
  advertiseName = "<%- sub.Message.name %>";
  NAMESPACE::SubscribeOptions <%- sub.name %>_options;
  <%- sub.name %>_options = NAMESPACE::SubscribeOptions::create<<%- objects[sub.Message.parentPath].name %>::<%- sub.Message.name %>>
      (advertiseName.c_str(),
       1000,
       boost::bind(&<%- compInfo.name %>::<%- sub.name %>_operation, this, _1),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif 
  this-><%- sub.name %> = nh.subscribe(<%- sub.name %>_options);
<%
    });
}
-%>

  // Init Timer
#ifdef USE_ROSMOD    
  callback_options.alias = "init_timer_operation";
  callback_options.priority = 99;
  callback_options.deadline.sec = 1;
  callback_options.deadline.nsec = 0;
#endif
  NAMESPACE::TimerOptions timer_options;
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(-1),
     boost::bind(&<%- compInfo.name %>::init_timer_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif     
     true,
     false); 
  this->init_timer = nh.createTimer(timer_options);
  this->init_timer.stop();

  // Timers
<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
  // Component Timer - <%- tmr.name %>
#ifdef USE_ROSMOD   
  callback_options.alias = "<%- tmr.name %>_operation";
  
  callback_options.priority = config["Timers"]["<%- tmr.name %>"]["Priority"].asInt();
  deadline = ros::Duration(config["Timers"]["<%- tmr.name %>"]["Deadline"].asFloat());
  callback_options.deadline.sec = deadline.sec;
  callback_options.deadline.nsec = deadline.nsec;
#endif
  isOneShot = (config["Timers"]["<%- tmr.name %>"]["Period"].asFloat() == 0) ? true : false;
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(config["Timers"]["<%- tmr.name %>"]["Period"].asFloat()),
     boost::bind(&<%- compInfo.name %>::<%- tmr.name %>_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif 
     isOneShot,
     false);
  this-><%- tmr.name %> = nh.createTimer(timer_options);
  this-><%- tmr.name %>.stop();
<%
    });
 }
-%>

  // Start the timers
  this->init_timer.start();
<%
if (compInfo.Timer_list) {
  compInfo.Timer_list.map(function(tmr) {
-%>
  this-><%- tmr.name %>.start();
<%
    });
 }
-%>
}

extern "C" {
  Component *maker(Json::Value &config) {
    return new <%- compInfo.name %>(config);
  }
}

