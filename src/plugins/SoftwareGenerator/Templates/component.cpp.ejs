#include "<%= compInfo.packageName %>/<%= compInfo.name %>.hpp"

// User Definitions
<%= compInfo.userDefinitions %>

// Initialization Function
void <%= compInfo.name %>::init_timer_operation(const NAMESPACE::TimerEvent& event)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%= compInfo.name %>::init_timer_operation");
#endif
  // User Initialization
  <%= compInfo.initialization %>
  // Stop Init Timer
  init_timer.stop();
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%= compInfo.name %>::init_timer_operation");
#endif  
}

<%
for (var tmr in compInfo.timers) {
-%>
// Timer Operation - <%= compInfo.timers[tmr].name %>
void <%= compInfo.name %>::<%= compInfo.timers[tmr].name %>_operation(const NAMESPACE::TimerEvent& event)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%= compInfo.name %>::<%= compInfo.timers[tmr].name %>_operation");
#endif
  <%= compInfo.timers[tmr].operation %>
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%= compInfo.name %>::<%= compInfo.timers[tmr].name %>_operation");
#endif
}
<%
}
-%>

<%
for (var sub in compInfo.subscribers) {
-%>
// Subscriber Operation - <%= compInfo.subscribers[sub].name %>
void <%= compInfo.name %>::<%= compInfo.subscribers[sub].name %>_operation(const <%= compInfo.subscribers[sub].topic %>::ConstPtr& received_data)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%= compInfo.name %>::<%= compInfo.subscribers[sub].name %>_operation");
#endif
  <%= compInfo.subscribers[sub].operation %>
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%= compInfo.name %>::<%= compInfo.subscribers[sub].name %>_operation");
#endif
}
<%
}
-%>

<%
for (var srv in compInfo.servers) {
-%>
// Server Operation - <%= compInfo.servers[srv].name %>
void <%= compInfo.name %>::<%= compInfo.servers[srv].name %>_operation(const <%= compInfo.servers[srv].service %>::Request &req, <%= compInfo.servers[srv].service %>::Response &res )
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering <%= compInfo.name %>::<%= compInfo.servers[srv].name %>_operation");
#endif
  <%= compInfo.servers[srv].operation %>
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting <%= compInfo.name %>::<%= compInfo.servers[srv].name %>_operation");
#endif
}
<%
}
-%>


// Destructor - Cleanup Ports & Timers
<%= compInfo.name %>::~<%= compInfo.name %>()
{
<%
for (var tmr in compInfo.timers){
-%>
  <%= compInfo.timers[tmr].name %>.stop();
<%
}
-%>
<%
for (var pub in compInfo.publishers){
-%>
  <%= compInfo.publishers[pub].name %>.stop();
<%
}
-%>
<%
for (var sub in compInfo.subscribers){
-%>
  <%= compInfo.subscribers[sub].name %>.stop();
<%
}
-%>
<%
for (var clt in compInfo.clients){
-%>
  <%= compInfo.clients[clt].name %>.stop();
<%
}
-%>
<%
for (var srv in compInfo.servers){
-%>
  <%= compInfo.servers[srv].name %>.stop();
<%
}
-%>
  // User Destruction
  <%= compInfo.destruction %>
}

// Startup - Setup Component Ports & Timers
void <%= compInfo.name %>::startUp()
{
  NAMESPACE::NodeHandle nh;
  std::string advertiseName;

  // Identify the pwd of Node Executable
  std::string s = node_argv[0];
  std::string exec_path = s;
  std::string delimiter = "/";
  std::string exec, pwd;
  size_t pos = 0;
  while ((pos = s.find(delimiter)) != std::string::npos) {
    exec = s.substr(0, pos);
    s.erase(0, pos + delimiter.length());
  }
  exec = s.substr(0, pos);
  pwd = exec_path.erase(exec_path.find(exec), exec.length());
  std::string log_file_path = pwd + config.nodeName + "." + config.compName + ".log"; 

  logger->create_file(pwd + config.nodeName + "." + config.compName + ".log");
  logger->set_is_periodic(config.is_periodic_logging);
  logger->set_max_log_unit(config.periodic_log_unit);

#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->create_file(pwd + "ROSMOD_DEBUG." + config.nodeName + "." + config.compName + ".log");
  comp_queue.ROSMOD_LOGGER->set_is_periodic(config.is_periodic_logging);
  comp_queue.ROSMOD_LOGGER->set_max_log_unit(config.periodic_log_unit);
#endif    
  
#ifdef USE_ROSMOD 
  this->comp_queue.scheduling_scheme = config.schedulingScheme;
  rosmod::ROSMOD_Callback_Options callback_options;
#endif  

  // Servers
<%
for (var srv in compInfo.servers) {
-%>
#ifdef USE_ROSMOD  
  callback_options.alias = "<%= compInfo.servers[srv].name %>_operation";
  callback_options.priority = <%= compInfo.servers[srv].priority %>;
  callback_options.deadline.sec =<%= Math.floor(compInfo.servers[srv].deadline) %>;
  callback_options.deadline.nsec = <%= compInfo.servers[srv].deadline % 1 %>;
#endif    
  // Server - <%= compInfo.servers[srv].name %>
  advertiseName = "<%= compInfo.servers[srv].service %>";
  if (config.portGroupMap.find("<%= compInfo.servers[srv].name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%= compInfo.servers[srv].name %>"];
  NAMESPACE::AdvertiseServiceOptions <%= compInfo.servers[srv].name %>_server_options;
  <%= compInfo.servers[srv].name %>_server_options = NAMESPACE::AdvertiseServiceOptions::create<<%= compInfo.packageName %>::<%= compInfo.servers[srv].service %>>
      (advertiseName.c_str(),
       boost::bind(&Component_2::<%= compInfo.servers[srv].name %>_operation, this, _1, _2),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD       
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif
  this-><%= compInfo.servers[srv].name %> = nh.advertiseService(<%= compInfo.servers[srv].name %>_server_options);
<%
}
-%>
  // Clients
<%
for (var clt in compInfo.clients) {
-%>
  // Client - <%= compInfo.clients[clt].name %>
  advertiseName = <%= compInfo.clients[clt].service %>;
  if (config.portGroupMap.find("<%= compInfo.clients[clt].name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%= compInfo.clients[clt].name %>"];
  this-><%= compInfo.clients[clt].name %> = nh.serviceClient<<%= compInfo.packageName %>::<%= compInfo.clients[clt].service %>>(advertiseName.c_str(), true); 
<%
}
-%>
  // Publishers
<%
for (var pub in compInfo.publishers) {
-%>
  // Publisher - <%= compInfo.publishers[pub].name %>
  advertiseName = <%= compInfo.publishers[pub].topic %>;
  if (config.portGroupMap.find("<%= compInfo.publishers[pub].name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%= compInfo.publishers[pub].name %>"];
  this-><%= compInfo.publishers[pub].name %> = nh.advertise<<%= compInfo.packageName %>::<%= compInfo.publishers[pub].topic %>>(advertiseName.c_str(), true); 
<%
}
-%>
  // Subscribers
<%
for (var sub in compInfo.subscribers) {
-%>
  // Subscriber - <%= compInfo.subscribers[sub].name %>
#ifdef USE_ROSMOD 
  callback_options.alias = "<%= compInfo.subscribers[sub].name %>_operation";
  callback_options.priority = <%= compInfo.subscribers[sub].priority %>;
  callback_options.deadline.sec = <%= Math.floor(compInfo.subscribers[sub].deadline) %>;
  callback_options.deadline.nsec = <%= compInfo.subscribers[sub].deadline % 1 %>;
#endif  
  advertiseName = "<%= compInfo.subscribers[sub].topic %>";
  if (config.portGroupMap.find("<%= compInfo.subscribers[sub].name %>") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["<%= compInfo.subscribers[sub].name %>"];
  NAMESPACE::SubscribeOptions <%= compInfo.subscribers[sub].name %>_options;
  <%= compInfo.subscribers[sub].name %>_options = NAMESPACE::SubscribeOptions::create<<%= compInfo.packageName %>::<%= compInfo.subscribers[sub].topic %>>
      (advertiseName.c_str(),
       1000,
       boost::bind(&Component_1::<%= compInfo.subscribers[sub].name %>_operation, this, _1),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif 
  this-><%= compInfo.subscribers[sub].name %> = nh.subscribe(<%= compInfo.subscribers[sub].name %>_options);
<%
}
-%>

  // Init Timer
#ifdef USE_ROSMOD    
  callback_options.alias = "init_timer_operation";
  callback_options.priority = 99;
  callback_options.deadline.sec = 1;
  callback_options.deadline.nsec = 0;
#endif
  NAMESPACE::TimerOptions timer_options;
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(-1),
     boost::bind(&<%= compInfo.name %>::init_timer_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif     
     true,
     false); 
  this->init_timer = nh.createTimer(timer_options);
  this->init_timer.stop();

  // Timers
<%
for (var tmr in compInfo.timers){
-%>
  // Component Timer - <%= compInfo.timers[tmr].name %>
#ifdef USE_ROSMOD   
  callback_options.alias = "<%= compInfo.timers[tmr].name %>_operation";
  callback_options.priority = <%= compInfo.timers[tmr].priority %>;
  callback_options.deadline.sec = <%= Math.floor(compInfo.timers[tmr].deadline) %>;
  callback_options.deadline.nsec = <%= compInfo.timers[tmr].priority % 1 %>;
#endif
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(5.0),
     boost::bind(&<%= compInfo.name %>::<%= compInfo.timers[tmr].name %>_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif 
     false,
     false);
  this-><%= compInfo.timers[tmr].name %> = nh.createTimer(timer_options);
  this-><%= compInfo.timers[tmr].name %>.stop();
<%
}
-%>

  // Start the timers
  this->init_timer.start();
<%
for (var tmr in compInfo.timers){
-%>
  this-><%= compInfo.timers[tmr].name %>.start();
<%
}
-%>
}

extern "C" {
  Component *maker(ComponentConfig &config, int argc, char **argv) {
    return new <%= compInfo.name %>(config,argc,argv);
  }
}

