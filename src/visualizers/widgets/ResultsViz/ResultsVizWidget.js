/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 0.1.0 from webgme on Wed Apr 06 2016 14:15:27 GMT-0500 (CDT).
 */

define([
    'rosmod/Libs/flot/jquery.flot',
    'css!./styles/ResultsVizWidget.css'
], function () {
    'use strict';

    var ResultsVizWidget,
        WIDGET_CLASS = 'results-viz';

    ResultsVizWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    ResultsVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header 
        //this._el.append('<h3>ResultsViz Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    ResultsVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        console.log('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    ResultsVizWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }
   
	    for (var a in desc.attributes) {
		var tmp1 = document.createElement('h3');
		tmp1.innerHTML = a;
		//var tmp = document.createElement('div');
		//tmp.innerHTML = desc.attributes[a];
		//this._el.append(tmp);
		var p = document.createElement('div');
		p.id = "log_plot_" + a;
		p.style = 'width:1300px;height:500px';
		var re = /ROSMOD::(\w+)::([\d]*)::([\w]+ ?)*::Alias=(\w+); (?:(?:[\w=;, ]*Enqueue Time)|(?:Completion Time)) sec=(\d*), nsec=(\d*)/gi;
		var result = re.exec(desc.attributes[a]);
		var log_data = {};
		while(result != null) {
		    var alias = result[4];
		    if (!log_data[alias]) {
			log_data[alias] = {
			    data : []
			};
		    }
		    if (result[3] == "ENQUEUE") {
			var enqueue_time = parseInt(result[5]) + result[6]/1000000000.0;
			log_data[alias].enqueue_time = enqueue_time;
		    }
		    else if (result[3] == "COMPLETED") {
			var completion_time = parseInt(result[5]) + result[6]/1000000000.0;
			log_data[alias].completion_time = completion_time;
		    }
		    if ( log_data[alias].completion_time && log_data[alias].enqueue_time ) {
			var exec_time = log_data[alias].completion_time - 
			    log_data[alias].enqueue_time;
			log_data[alias].data.push([log_data[alias].enqueue_time, 0]);
			log_data[alias].data.push([log_data[alias].enqueue_time, exec_time]);
			log_data[alias].data.push([log_data[alias].completion_time, exec_time]);
			log_data[alias].data.push([log_data[alias].completion_time, 0]);
			log_data[alias].enqueue_time = undefined;
			log_data[alias].completion_time = undefined;
		    }
		    result = re.exec(desc.attributes[a]);
		}
		var d1 = [];
		/*
		for (var i = 0; i < 14; i += 0.5) {
		    d1.push([i, Math.sin(i)]);
		}
		*/
		var aliases = Object.keys(log_data);
		aliases.map(function(alias) {
		    d1.push(log_data[alias].data);
		});
		if (aliases.length > 0) {
		    this._el.append(tmp1);
		    this._el.append(p);
		    $.plot($("#log_plot_"+a), d1);
		}
	    }

            this.nodes[desc.id] = desc;
            node.innerHTML += 'Adding node "' + desc.name + '" (click to view). It has ' + 
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    ResultsVizWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "'+desc.name+'"</div>');
        delete this.nodes[gmeId];
    };

    ResultsVizWidget.prototype.updateNode = function (desc) {
        if (desc) {
            console.log('Updating node:', desc);
            this._el.append('<div>Updating node "'+desc.name+'"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ResultsVizWidget.prototype.onNodeClick = function (id) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    ResultsVizWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ResultsVizWidget.prototype.destroy = function () {
    };

    ResultsVizWidget.prototype.onActivate = function () {
        console.log('ResultsVizWidget has been activated');
    };

    ResultsVizWidget.prototype.onDeactivate = function () {
        console.log('ResultsVizWidget has been deactivated');
    };

    return ResultsVizWidget;
});
