/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Sep 27 2016 23:15:32 GMT-0500 (Central Daylight Time).
 */

define(['./cytoscape.min','./cola.min','cose_bilkent/cytoscape-cose-bilkent', 'q','css!./styles/CommVizWidget.css'], function (cytoscape, cola, regCose, Q) {
    'use strict';

    var CommVizWidget,
        WIDGET_CLASS = 'comm-viz';

    CommVizWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
	this.childNodes = {};
	this.connections = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    CommVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

	regCose( cytoscape );

	this._graph_elements = [];

	this._cytoscape_options = {
	    container: this._el,
	    style: "\n\n\n* {\n    font-size: 10pt;\n}\n\nnode { /* all nodes */\n    content: data(label);\n    shape: roundrectangle;\n    text-valign: center;\n    text-halign: center;\n    width: 100px;\n    height: 60px;\n    text-wrap: wrap;\n    text-max-width: 90px;\n}\n\n$node > node { /* compounds. \"Nodes\" in meta model. $ selects the parent node that has a node instead of the node (as css would) */\n    padding-top: 10px;\n    padding-left: 10px;\n    padding-bottom: 10px;\n    padding-right: 10px;\n    text-valign: top;\n    text-halign: center;\n}\n\n[type=\"nodeGroup\"] {\n    events: no; /* disable click, drag etc as this is just a frame */\n}\n\n[type=\"node\"] {\n    background-color: #B4DCED;\n    color: #3399CC;\n    font-weight: bold;\n\n}\n\n[type=\"serviceInstance\"] {\n    background-color: #E8F8FF;\n    color: #3399CC;\n    font-weight: bold;\n    shadow-blur: 0;\n    shadow-color: #000;\n    shadow-offset-x: 2px;\n    shadow-offset-y: 2px;\n    shadow-opacity: 0.5;\n}\n[type=\"communicationInstance\"] {\n    color: #F4EFDC;\n    line-color: #3399CC;\n    target-arrow-color: #3399CC;\n}\n\n[type=\"nodeGroup\"] {\n    color: #3399CC;\n    background-color: white;\n    border-style: dotted;\n    border-color: #39588A;\n    border-width: 2px;\n    font-weight: bold;\n}\n\nedge {\n    label: data(label);\n    color: black;\n    font-weight: bold;\n    target-arrow-shape: triangle-backcurve;\n    curve-style: bezier; /* supports arrows */\n    width: 2px;\n}\n\n:selected {\n    background-color: black;\n    line-color: black;\n    target-arrow-color: black;\n    source-arrow-color: red;\n}\n\n:touch {\n    border-width: 2px;\n}\n\n\n",
	    // interaction options:
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: true,
	    userZoomingEnabled: true,
	    panningEnabled: true,
	    userPanningEnabled: true,
	    boxSelectionEnabled: true,
	    selectionType: 'single',
	    touchTapThreshold: 8,
	    desktopTapThreshold: 4,
	    autolock: false,
	    autoungrabify: false,
	    autounselectify: false,

	    // rendering options:
	    headless: false,
	    styleEnabled: true,
	    hideEdgesOnViewport: false,
	    hideLabelsOnViewport: false,
	    textureOnViewport: false,
	    motionBlur: false,
	    motionBlurOpacity: 0.2,
	    wheelSensitivity: 1,
	    pixelRatio: 'auto'	    
	};

	this._layout_options = {
	    'name': 'cose'
	    /*
	    'name': 'cose-bilkent',
	    // Called on `layoutready`
	    ready: function () {
	    },
	    // Called on `layoutstop`
	    stop: function () {
	    },
	    // Whether to fit the network view after when done
	    fit: true,
	    // Padding on fit
	    padding: 10,
	    // Whether to enable incremental mode
	    randomize: true,
	    // Node repulsion (non overlapping) multiplier
	    nodeRepulsion: 4500,
	    // Ideal edge (non nested) length
	    idealEdgeLength: 50,
	    // Divisor to compute edge forces
	    edgeElasticity: 0.45,
	    // Nesting factor (multiplier) to compute ideal edge length for nested edges
	    nestingFactor: 0.1,
	    // Gravity force (constant)
	    gravity: 0.25,
	    // Maximum number of iterations to perform
	    numIter: 2500,
	    // For enabling tiling
	    tile: true,
	    // Type of layout animation. The option set is {'during', 'end', false}
	    animate: 'end',
	    // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)
	    tilingPaddingVertical: 10,
	    // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)
	    tilingPaddingHorizontal: 10,
	    // Gravity range (constant) for compounds
	    gravityRangeCompound: 1.5,
	    // Gravity force (constant) for compounds
	    gravityCompound: 1.0,
	    // Gravity range (constant)
	    gravityRange: 3.8
	    */
	};
	this._cytoscape_options.layout = self._layout_options;
	this._cy = cytoscape(self._cytoscape_options);
    };

    CommVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };
    
    var connectionTypes = [
	'Publisher',
	'Subscriber',
	'Client',
	'Server'
    ];

    CommVizWidget.prototype.createEdge = function(from, to, type) {
	var self = this;
	self._cy.add({
	    group: 'edges',
	    data: {
		id: from.id + to.id,
		type: type,
		source: from.id,
		target: to.id
	    }
	});
    }
    
    CommVizWidget.prototype.createNode = function(desc) {
	var self = this;
	var node = {
	    group: 'nodes',
	    data: {
		id: desc.id,
		parent: desc.parentId,
		type: desc.type,
		name: desc.name,
		label: desc.name,
	    }
	};
	//self._logger.error(node);
	self._graph_elements.push(node);
	self._cy.add(node);
	if (self.childNodes[desc.id] && self.childNodes[desc.id].length) {
	    self.childNodes[desc.id].map(function(childDesc) {
		self.createNode(childDesc);
	    });
	    self.childNodes[desc.id] = [];
	}
	if (self.connections[desc.id] && self.connections[desc.id].length) {
	    for (var i=0; i< self.connections[desc.id].length; i++) {
		var connDesc = self.connections[desc.id][i];
		if (connDesc.type == 'Publisher' || connDesc.type == 'Client') {
		    self.createEdge(self.nodes[connDesc.parentId], desc, connDesc.pointerName);
		}
		else {
		    self.createEdge(desc, self.nodes[connDesc.parentId], connDesc.pointerName);
		}
	    }
	    self.connections[desc.id] = [];
	}
    };

    // Adding/Removing/Updating items
    CommVizWidget.prototype.addNode = function (desc) {
	var self = this;
        if (desc && desc.type != 'Deployment') {
	    //self._logger.error(desc.name + ', ' + desc.id + ' parent: '+ desc.parentId);
            // Add node to a table of nodes
            self.nodes[desc.id] = desc;
	    if (connectionTypes.indexOf(desc.type) > -1) {
		if (!self.nodes[desc.connection]) {
		    if (self.connections[desc.connection] == undefined) {
			self.connections[desc.connection] = [];
		    }
		    self.connections[desc.connection].push(desc);
		}
		else {
		    if (desc.type == 'Publisher' || desc.type == 'Client') {
			self.createEdge(self.nodes[desc.parentId], self.nodes[desc.connection], desc.pointerName);
		    }
		    else {
			self.createEdge(self.nodes[desc.connection], self.nodes[desc.parentId], desc.pointerName);
		    }
		}
	    }
	    else if (!desc.parentId || self.nodes[desc.parentId]) {
		self.createNode(desc);
		self._cytoscape_options.elements = self._graph_elements;
		self._cy.layout(self._layout_options);
	    }
	    else {
		if (self.childNodes[desc.parentId] === undefined) {
		    self.childNodes[desc.parentId] = [];
		}
		self.childNodes[desc.parentId].push(desc);
	    }
	}
    };

    CommVizWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._logger.debug('Removing node ' + desc.name);
        delete this.nodes[gmeId];
    };

    CommVizWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    CommVizWidget.prototype.onBackgroundDblClick = function () {
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    CommVizWidget.prototype.destroy = function () {
    };

    CommVizWidget.prototype.onActivate = function () {
        this._logger.debug('CommVizWidget has been activated');
    };

    CommVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('CommVizWidget has been deactivated');
    };

    return CommVizWidget;
});
