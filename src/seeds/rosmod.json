{
    "_metadata": {
        "type": "project",
        "rootGuid": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
        "hasAssets": false
    },
    "root": {
        "path": "",
        "guid": "03d36072-9e09-7866-cb4e-d0a36ff825f6"
    },
    "containment": {
        "2e129f64-d002-cefe-20f8-256883f4b003": {
            "0066ce30-e372-bb27-23c3-219c7d934553": {},
            "0f474808-eadf-a345-7ee9-7279326aab1e": {},
            "11c26da0-dda2-d00c-dc36-f53c52c3fc62": {},
            "2562febd-1839-d9fe-3b97-0a0548314d85": {},
            "27271a90-b612-119a-4451-26b58c0a84b2": {},
            "36d534c1-207e-1c52-5336-c74ff256793f": {},
            "40634285-7f30-4d56-3e22-6047fe32f0d7": {},
            "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9": {},
            "4a9f26bd-4fd6-acb3-0f4e-093cb9a34643": {},
            "5364e1ea-29d3-bc62-87fa-b5715ac58d86": {},
            "5e036e97-58b4-2376-76c5-97ef45bd8c29": {},
            "5fa73dfc-a08d-9aa3-cb07-c7869fccd187": {},
            "6426cc7b-5cb2-d3a7-0790-58b46d29b705": {},
            "6e77078a-7ffc-3881-d2b3-469431fa7020": {},
            "6eee186c-a14e-3be3-d7b1-7fa840843c05": {},
            "7575417a-f5cb-d71e-d261-752e90aee4c3": {},
            "7c902cff-78a7-29da-9892-c0ecdc182ab3": {},
            "984baea9-4feb-5630-81f3-085218530d89": {},
            "9c50fc4a-3e84-5cb0-812e-59460da120f2": {},
            "a83b8adb-232e-4f68-ca06-3ee2c728765b": {},
            "ae4baea9-4feb-5630-81f3-085218530d89": {},
            "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5": {},
            "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a": {},
            "cf2109f7-7027-451c-095f-c0bc64833ba9": {},
            "da2ea5d7-26ee-0923-0025-38bfbceb5293": {},
            "df437d49-a83e-6944-62ed-52fd3dcf806d": {},
            "e400d5b7-c955-fc81-382e-2c414b44fc20": {},
            "e4236ea7-bd34-9066-b116-da90faa42f94": {},
            "e9857a0d-db6e-8197-12f8-76b4ef60b107": {},
            "eecf10d5-1ea4-b2f5-5342-4b3dc960899c": {},
            "fe2f7057-8238-2032-4e6b-3012e0a4ea85": {}
        },
        "8bc323b4-a4eb-abcd-b7a2-f710630dce1c": {
            "04fdc95b-f567-260d-dc01-d41068d3367b": {
                "47ab116f-f11c-a37a-8b11-291b91578348": {
                    "296d633b-35b8-77d3-eadf-d49fc03b8301": {},
                    "47725ce0-f096-ea93-a507-004673d77790": {
                        "a377ee64-9293-7b02-03c2-508ee3e4ed74": {}
                    },
                    "49725ce0-f096-ea93-a507-004673d77790": {
                        "ad77ee64-9293-7b02-03c2-508ee3e4ed74": {}
                    },
                    "5173ec58-cf6c-e536-1efc-d1cf17642062": {},
                    "6f725ce0-f096-ea93-a507-004673d77790": {
                        "8b77ee64-9293-7b02-03c2-508ee3e4ed74": {}
                    },
                    "99ea1844-3957-5ba6-7fa8-df10bec27d3e": {},
                    "a40d3a67-e6b2-043a-c7e3-3041d1475d11": {},
                    "d782b608-6786-9f32-8141-4e616f54c23c": {},
                    "e25ad296-2547-7c6a-ad35-e79b3d417157": {}
                },
                "a14ea363-cf12-dc75-fef2-48cc7b40fb6b": {
                    "13476356-59e6-ee3c-2834-6fe453f1fd92": {},
                    "7c408f55-a315-ae29-dd73-60bbbfc9fb8d": {},
                    "ba0b9e89-2b1a-6163-aeac-8b1884e7638b": {
                        "8c5166ed-ded6-b1af-279f-ba01d0aff3fc": {}
                    },
                    "c40895ae-00a8-9a6d-8907-36175a362c97": {}
                },
                "c120272d-4798-3401-9087-d53be13fa646": {
                    "030622c4-50cc-32b0-031c-28be37569518": {},
                    "04357525-43a6-9058-d9f6-607e9275fb5e": {
                        "772d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "06357525-43a6-9058-d9f6-607e9275fb5e": {
                        "752d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "0d357525-43a6-9058-d9f6-607e9275fb5e": {
                        "7e2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "0f357525-43a6-9058-d9f6-607e9275fb5e": {
                        "7c2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "11ba8891-12a8-41c0-9380-f19a41e8dc53": {},
                    "12a356d3-8ec8-dd52-0801-686fb2299ef2": {},
                    "183b7c25-179d-e884-f133-0024a5db330e": {},
                    "242f9041-eeea-76ed-9546-62d8d83ee81e": {},
                    "25357525-43a6-9058-d9f6-607e9275fb5e": {
                        "562d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "27357525-43a6-9058-d9f6-607e9275fb5e": {
                        "542d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "2c357525-43a6-9058-d9f6-607e9275fb5e": {
                        "5f2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "2e357525-43a6-9058-d9f6-607e9275fb5e": {
                        "5d2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "3109804a-d102-0849-9ad7-b2411f3ce732": {},
                    "32e6a6ea-9cd5-fb73-ff8f-803b2d3492e6": {},
                    "34b22029-292d-bf37-d953-d91dedab2436": {},
                    "3f413882-9032-19b3-46d5-342f9f8538cf": {},
                    "41357525-43a6-9058-d9f6-607e9275fb5e": {
                        "322d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "43357525-43a6-9058-d9f6-607e9275fb5e": {
                        "302d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "44fcafc0-e7f2-3dd7-27fb-da8fd5960950": {},
                    "4585b7fc-307e-c80c-ada2-02a2845c404d": {},
                    "48357525-43a6-9058-d9f6-607e9275fb5e": {
                        "3b2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "4a357525-43a6-9058-d9f6-607e9275fb5e": {
                        "392d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "4bc1deb3-abb3-9bf2-ee49-a072843d1eaf": {},
                    "4f130061-8b9f-0389-c288-ad2d46eeab44": {},
                    "55125e5b-e6b2-0557-d0ca-e9e678b4581a": {},
                    "60248922-f473-bc97-d362-1d9cb0a32efd": {},
                    "60357525-43a6-9058-d9f6-607e9275fb5e": {
                        "132d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "62357525-43a6-9058-d9f6-607e9275fb5e": {
                        "112d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "65d2144b-00c4-571f-ac50-4cfaa9bec92d": {},
                    "679e634b-48de-6844-8479-229fb51dfaf8": {},
                    "69357525-43a6-9058-d9f6-607e9275fb5e": {
                        "1a2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "6b357525-43a6-9058-d9f6-607e9275fb5e": {
                        "182d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "6c0c5975-cf58-cb4b-be6c-292744a30726": {},
                    "87dd799d-18a6-52e6-4fea-8bbf6167a7ef": {},
                    "883f2275-89f3-3656-d28f-33178a9e6a8d": {},
                    "8b4a76cc-97a5-fa9a-5eea-273484f9d5ac": {},
                    "90357525-43a6-9058-d9f6-607e9275fb5e": {
                        "e32d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "9109804a-d102-0849-9ad7-b2411f3ce732": {},
                    "92357525-43a6-9058-d9f6-607e9275fb5e": {
                        "e12d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "99357525-43a6-9058-d9f6-607e9275fb5e": {
                        "ea2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "9b357525-43a6-9058-d9f6-607e9275fb5e": {
                        "e82d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "a4a3211d-4379-d33e-a070-7c38f71754ea": {},
                    "ad688a62-aeb6-e1e6-31a2-573db6aee77c": {},
                    "b0326662-28a6-3f54-d802-de46fa7dd357": {},
                    "b1357525-43a6-9058-d9f6-607e9275fb5e": {
                        "c22d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "b19a7df1-b77a-fea6-b7f9-4cf640560c39": {
                        "51b3d75d-3340-147d-0d42-302ed11445ed": {}
                    },
                    "b3357525-43a6-9058-d9f6-607e9275fb5e": {
                        "c02d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "b4ad8902-a012-9b67-be2b-2af12cdefa37": {},
                    "b8357525-43a6-9058-d9f6-607e9275fb5e": {
                        "cb2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "ba357525-43a6-9058-d9f6-607e9275fb5e": {
                        "c92d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "ba80db39-e4f4-0e84-a57a-02abf337529e": {},
                    "c13851f2-6d96-924e-ad80-da6c3c41050c": {},
                    "d5357525-43a6-9058-d9f6-607e9275fb5e": {
                        "a62d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "d7357525-43a6-9058-d9f6-607e9275fb5e": {
                        "a42d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "d99b77d9-0121-d873-f4c7-784bd7690980": {},
                    "db6aa52c-19d4-c683-5f30-17b381f7e42f": {},
                    "dc357525-43a6-9058-d9f6-607e9275fb5e": {
                        "af2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "de357525-43a6-9058-d9f6-607e9275fb5e": {
                        "ad2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "e3cd1771-47f7-af5e-11bf-1016427c49fb": {},
                    "eb7ba3ff-ef69-3368-24b8-84ee1a9e4e93": {},
                    "ed7d7340-3e40-ea91-ceaf-371d90d75662": {},
                    "ee48c86c-137a-c89e-f82d-2672e5ccff92": {},
                    "f1d51591-74b9-6f43-d930-2e0cfebee7f2": {},
                    "f4357525-43a6-9058-d9f6-607e9275fb5e": {
                        "872d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "f6357525-43a6-9058-d9f6-607e9275fb5e": {
                        "852d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "fd357525-43a6-9058-d9f6-607e9275fb5e": {
                        "8e2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    },
                    "ff038fbb-6658-4ff3-0bce-d0b26e5a494b": {},
                    "ff357525-43a6-9058-d9f6-607e9275fb5e": {
                        "8c2d14c8-aee9-dece-1155-2553a795b2ef": {}
                    }
                }
            },
            "7ec97e63-8e60-b0c0-8e25-eec82cec64be": {
                "2fe9618f-ca21-b656-26d7-801acce13ec2": {},
                "3abf1c09-fdc4-61e7-1e53-501eff8e76ee": {
                    "043de1ab-0b51-afeb-be5f-a5a167b3a363": {},
                    "75973fe4-d007-56ab-2df2-483fac45138c": {},
                    "7599b53d-653a-1ff6-0d2a-c6a49dec721c": {
                        "769c7992-7dd1-3447-3e3c-953fd7e158d4": {},
                        "c093774a-c2a4-bf78-3180-5f6f82ed8cf5": {}
                    },
                    "7c974a97-a7c9-94b1-12e9-dfddb839d1fb": {},
                    "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb": {
                        "407b4c7e-9826-6855-d391-df7e96c3e73b": {},
                        "447d091e-edb3-cc67-88f8-2c4b643ee131": {},
                        "5a1725b5-953f-cbf1-d72d-4897c4d55c11": {},
                        "5e29f1d2-99a8-9559-faff-e924a9c5e677": {},
                        "862a9375-04a6-d7d7-72c3-7fd13b4b4b3b": {},
                        "93f48121-6fe3-48ed-0cdc-dc9db647b01a": {}
                    },
                    "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1": {
                        "265e2d6f-1ce3-f1ce-af71-3934f174d63e": {},
                        "4d04c2a5-a077-dbc9-bb12-690bb10fffc9": {},
                        "5a606d01-44cd-486e-3400-45b5dc693198": {},
                        "8ff74691-1535-f037-068b-52df355dd0bd": {},
                        "94dc4ba7-0a9c-f078-310f-cf1f2bf7bbe7": {},
                        "ecde4aa3-106a-f888-fe6b-473f56ac2d21": {}
                    },
                    "bf3c5759-8b0e-c5a7-7666-e3d42038bc48": {},
                    "d2401091-4e08-04c7-a9a2-d668fb6ea4df": {}
                },
                "4d5526bf-5772-cc61-a03d-36ff99280a1f": {},
                "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e": {
                    "0880f4eb-1dea-2d26-2dfd-1e735a3e739b": {},
                    "0a064327-011a-e497-672b-785e37ff448a": {
                        "47fdb167-6041-cd46-fa83-f6fb651c652d": {},
                        "78617d39-7d27-d9f9-b421-7b8621f0380c": {},
                        "c4d02e7c-c012-94dc-0e24-d04b2752434b": {}
                    },
                    "1b4dffef-842f-6b3c-0302-596cf56a5459": {},
                    "284dffef-842f-6b3c-0302-596cf56a5459": {},
                    "3b80f4eb-1dea-2d26-2dfd-1e735a3e739b": {},
                    "6a84f65c-0fbe-1fc6-79e8-2ff4bc2dcd1e": {},
                    "9ec1ad14-ca6f-6895-63a1-6c501f97a49a": {
                        "7eea081c-beab-287a-1aed-46821198b17c": {},
                        "874020d4-54d8-0c9b-0bda-18052dae44db": {},
                        "c8645e9e-668a-d508-45ff-0920ef6a39a8": {}
                    },
                    "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f": {
                        "0dad946f-7b49-ccba-aff2-c85e58b60ea7": {},
                        "4fc00747-714d-4832-998f-c520d0d3edfc": {},
                        "6815fb72-468f-ef04-95a9-117eb05569de": {},
                        "a9958819-7856-4774-1ef4-934c974095af": {}
                    }
                },
                "7dd6c967-4043-a173-2548-d357b944b810": {},
                "83f33549-7a85-a619-35b2-b18209fdda9d": {
                    "000e696a-b922-ec04-d0bf-b3eeb74660c9": {},
                    "0ecb9167-ab2a-9164-a638-972a058f218c": {},
                    "11cb9167-ab2a-9164-a638-972a058f218c": {},
                    "1f0e696a-b922-ec04-d0bf-b3eeb74660c9": {},
                    "240e696a-b922-ec04-d0bf-b3eeb74660c9": {},
                    "2acb9167-ab2a-9164-a638-972a058f218c": {},
                    "35cb9167-ab2a-9164-a638-972a058f218c": {},
                    "3b0e696a-b922-ec04-d0bf-b3eeb74660c9": {},
                    "51321b06-2a7b-eebe-187b-a68c11e80b87": {
                        "11aa8166-89d9-0008-646c-9c5fc6816600": {},
                        "2df2dde5-9823-c603-092a-f1fc1f28ca14": {},
                        "50177db4-7d87-86ab-98ae-472f9cfd788c": {},
                        "692c4cbd-629c-8265-5d80-9b1dd5103c39": {},
                        "c0742d5e-657f-56c8-fa2f-38560878df39": {}
                    },
                    "8c0974bd-12e4-dc59-4d43-7982b534b262": {
                        "05c1b20d-f9c0-c853-9172-7dd28e48e313": {},
                        "1aacd0f7-c612-def1-e351-b3e09db56136": {},
                        "271decd7-fb7c-8661-135c-400aa45350df": {},
                        "6d32e61a-93a8-9056-b3db-be265442f959": {},
                        "7ea9e1e6-46ee-3981-0169-da6fd2981659": {},
                        "84f4223f-5696-75ae-9190-d695085aea4d": {},
                        "8ed56a84-1f2b-cf95-c812-e0a6f8646438": {},
                        "8f76797c-3114-7740-e093-71d15765f2b3": {},
                        "9c9bbae3-dc41-51ba-4cf5-e29562b4b28a": {},
                        "a755c03e-6812-2249-d918-920af2dea6b1": {},
                        "f0c3e8b4-d847-1890-e883-b293be17add9": {},
                        "f5b6be0c-b866-ac8f-c0e9-38e8c3cba2de": {}
                    }
                },
                "8a20c8ac-2b78-609a-aebe-175f8964c890": {},
                "c29ad503-417a-f40a-28da-57503f809a90": {},
                "c2d1d475-839e-2efe-b48c-410517c4532c": {},
                "d5367025-51d7-5b40-bcc6-664ee22902e4": {}
            },
            "a0aedc6c-26be-58cb-4c99-7cb20a0772ce": {
                "51477479-d072-83e6-eecf-edf8c60a35e6": {
                    "024964e5-fa2e-785e-fe9f-0eba2f263e8d": {}
                },
                "f92d7582-1476-efca-9f72-fa9e89ecea2d": {
                    "d244680c-8428-99b8-e7ab-efdf266bce4e": {}
                }
            },
            "e95e44ec-0245-5b7d-1650-bfb4f10b941c": {
                "453ca24e-7880-8749-b62d-a3d9717d32ad": {},
                "6af13451-3d33-a993-7f16-bcbcc85fce96": {}
            }
        },
        "a361e083-c5a2-be94-f0c4-e157912d2d77": {
            "0efa5f96-1a20-d716-2400-b65695efddc2": {},
            "7781e7ee-ca18-2432-2180-4dadebfe0def": {},
            "e5a436af-5bd6-f65e-739d-64600c8e4683": {}
        },
        "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {},
        "fbb9e11b-926b-10de-58e9-a161fe9deec9": {
            "3b52cac4-09c7-6e5d-9d78-656955adb4f1": {},
            "52c371ec-8f35-bee7-ee11-1de6f0cda7d4": {},
            "eb266241-f732-e42a-f6d9-d422565a6fb6": {}
        }
    },
    "bases": {},
    "nodes": {
        "000e696a-b922-ec04-d0bf-b3eeb74660c9": {
            "attributes": {
                "Definition": "float64 r\nfloat64 theta\nfloat64 z",
                "name": "payloadBayPosition"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 270,
                    "y": 387
                }
            },
            "sets": {}
        },
        "0066ce30-e372-bb27-23c3-219c7d934553": {
            "attributes": {
                "name": "Publisher"
            },
            "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293",
            "meta": {
                "pointers": {
                    "Message": {
                        "items": [
                            "cf2109f7-7027-451c-095f-c0bc64833ba9"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "Message": null,
                "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293"
            },
            "registry": {
                "isAbstract": false,
                "position": {
                    "x": 25,
                    "y": 830
                }
            },
            "sets": {}
        },
        "024964e5-fa2e-785e-fe9f-0eba2f263e8d": {
            "attributes": {},
            "base": "6426cc7b-5cb2-d3a7-0790-58b46d29b705",
            "meta": {},
            "parent": "51477479-d072-83e6-eecf-edf8c60a35e6",
            "pointers": {
                "base": "6426cc7b-5cb2-d3a7-0790-58b46d29b705"
            },
            "registry": {
                "position": {
                    "x": 187,
                    "y": 174
                }
            },
            "sets": {}
        },
        "030622c4-50cc-32b0-031c-28be37569518": {
            "attributes": {
                "IP": "10.1.1.27"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "132d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "03d36072-9e09-7866-cb4e-d0a36ff825f6": {
            "attributes": {
                "name": "Projects"
            },
            "base": null,
            "meta": {
                "children": {
                    "items": [
                        "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                },
                "attributes": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "parent": null,
            "pointers": {
                "base": null
            },
            "registry": {
                "MetaSheets": [
                    {
                        "SetID": "MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d",
                        "order": 0,
                        "title": "META"
                    },
                    {
                        "SetID": "MetaAspectSet_c7b2120d-6197-326d-0ead-0387cc0082ca",
                        "order": 1,
                        "title": "ROSMOD_META"
                    }
                ],
                "ProjectRegistry": {
                    "FCO_ID": "/1"
                },
                "position": {
                    "x": 70,
                    "y": 70
                },
                "usedAddOns": "ExperimentMonitor",
                "validDecorators": "CircleDecorator CodeEditorDecorator DefaultDecorator MetaDecorator ModelDecorator SVGDecorator UMLStateMachineDecorator",
                "validPlugins": "PluginGenerator",
                "validVisualizers": "RootViz"
            },
            "sets": {
                "MetaAspectSet": [
                    {
                        "attributes": {},
                        "guid": "0066ce30-e372-bb27-23c3-219c7d934553",
                        "registry": {
                            "position": {
                                "x": 35,
                                "y": 729
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "0f474808-eadf-a345-7ee9-7279326aab1e",
                        "registry": {
                            "position": {
                                "x": 391,
                                "y": 580
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "11c26da0-dda2-d00c-dc36-f53c52c3fc62",
                        "registry": {
                            "position": {
                                "x": 300,
                                "y": 458
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "2562febd-1839-d9fe-3b97-0a0548314d85",
                        "registry": {
                            "position": {
                                "x": 246,
                                "y": 246
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "27271a90-b612-119a-4451-26b58c0a84b2",
                        "registry": {
                            "position": {
                                "x": 182,
                                "y": 458
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "2e129f64-d002-cefe-20f8-256883f4b003",
                        "registry": {
                            "position": {
                                "x": 378,
                                "y": 231
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "36d534c1-207e-1c52-5336-c74ff256793f",
                        "registry": {
                            "position": {
                                "x": 559,
                                "y": 402
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "40634285-7f30-4d56-3e22-6047fe32f0d7",
                        "registry": {
                            "position": {
                                "x": 382,
                                "y": 732
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9",
                        "registry": {
                            "position": {
                                "x": 898,
                                "y": 257
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "4a9f26bd-4fd6-acb3-0f4e-093cb9a34643",
                        "registry": {
                            "position": {
                                "x": 907,
                                "y": 375
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
                        "registry": {
                            "position": {
                                "x": 344,
                                "y": 467
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
                        "registry": {
                            "position": {
                                "x": 269,
                                "y": 731
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187",
                        "registry": {
                            "position": {
                                "x": 284,
                                "y": 396
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "6426cc7b-5cb2-d3a7-0790-58b46d29b705",
                        "registry": {
                            "position": {
                                "x": 1246,
                                "y": 488
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "6e77078a-7ffc-3881-d2b3-469431fa7020",
                        "registry": {
                            "position": {
                                "x": 914,
                                "y": 607
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "6eee186c-a14e-3be3-d7b1-7fa840843c05",
                        "registry": {
                            "position": {
                                "x": 525,
                                "y": 260
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "7575417a-f5cb-d71e-d261-752e90aee4c3",
                        "registry": {
                            "position": {
                                "x": 911,
                                "y": 477
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "7c902cff-78a7-29da-9892-c0ecdc182ab3",
                        "registry": {
                            "position": {
                                "x": 942,
                                "y": 291
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "984baea9-4feb-5630-81f3-085218530d89",
                        "registry": {
                            "position": {
                                "x": 747,
                                "y": 328
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                        "registry": {
                            "position": {
                                "x": 681,
                                "y": 506
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "a83b8adb-232e-4f68-ca06-3ee2c728765b",
                        "registry": {
                            "position": {
                                "x": 406,
                                "y": 87
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "ae4baea9-4feb-5630-81f3-085218530d89",
                        "registry": {
                            "position": {
                                "x": 685,
                                "y": 403
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
                        "registry": {
                            "position": {
                                "x": 139,
                                "y": 729
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
                        "registry": {
                            "position": {
                                "x": 91,
                                "y": 204
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
                        "registry": {
                            "position": {
                                "x": 100,
                                "y": 100
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "cf2109f7-7027-451c-095f-c0bc64833ba9",
                        "registry": {
                            "position": {
                                "x": 65,
                                "y": 488
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "da2ea5d7-26ee-0923-0025-38bfbceb5293",
                        "registry": {
                            "position": {
                                "x": 272,
                                "y": 608
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "df437d49-a83e-6944-62ed-52fd3dcf806d",
                        "registry": {
                            "position": {
                                "x": 656,
                                "y": 297
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "e400d5b7-c955-fc81-382e-2c414b44fc20",
                        "registry": {
                            "position": {
                                "x": 735,
                                "y": 532
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "e4236ea7-bd34-9066-b116-da90faa42f94",
                        "registry": {
                            "position": {
                                "x": 321,
                                "y": 387
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "e9857a0d-db6e-8197-12f8-76b4ef60b107",
                        "registry": {
                            "position": {
                                "x": 1312,
                                "y": 378.6666666666667
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "eecf10d5-1ea4-b2f5-5342-4b3dc960899c",
                        "registry": {
                            "position": {
                                "x": 114,
                                "y": 55
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "fe2f7057-8238-2032-4e6b-3012e0a4ea85",
                        "registry": {
                            "position": {
                                "x": 1309.3333333333333,
                                "y": 281.3333333333333
                            }
                        }
                    }
                ],
                "MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d": [
                    {
                        "attributes": {},
                        "guid": "2e129f64-d002-cefe-20f8-256883f4b003",
                        "registry": {
                            "position": {
                                "x": 361,
                                "y": 190
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
                        "registry": {
                            "position": {
                                "x": 370,
                                "y": 69
                            }
                        }
                    }
                ],
                "MetaAspectSet_c7b2120d-6197-326d-0ead-0387cc0082ca": [
                    {
                        "attributes": {},
                        "guid": "0066ce30-e372-bb27-23c3-219c7d934553",
                        "registry": {
                            "position": {
                                "x": 8,
                                "y": 966
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "0f474808-eadf-a345-7ee9-7279326aab1e",
                        "registry": {
                            "position": {
                                "x": 328,
                                "y": 776
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "11c26da0-dda2-d00c-dc36-f53c52c3fc62",
                        "registry": {
                            "position": {
                                "x": 372,
                                "y": 511
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "2562febd-1839-d9fe-3b97-0a0548314d85",
                        "registry": {
                            "position": {
                                "x": 250,
                                "y": 230
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "27271a90-b612-119a-4451-26b58c0a84b2",
                        "registry": {
                            "position": {
                                "x": 118,
                                "y": 596
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "36d534c1-207e-1c52-5336-c74ff256793f",
                        "registry": {
                            "position": {
                                "x": 684,
                                "y": 518
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "40634285-7f30-4d56-3e22-6047fe32f0d7",
                        "registry": {
                            "position": {
                                "x": 318,
                                "y": 966
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9",
                        "registry": {
                            "position": {
                                "x": 1004,
                                "y": 268
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "4a9f26bd-4fd6-acb3-0f4e-093cb9a34643",
                        "registry": {
                            "position": {
                                "x": 1024,
                                "y": 488
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
                        "registry": {
                            "position": {
                                "x": 248,
                                "y": 596
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
                        "registry": {
                            "position": {
                                "x": 208,
                                "y": 966
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187",
                        "registry": {
                            "position": {
                                "x": 174,
                                "y": 360
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "6426cc7b-5cb2-d3a7-0790-58b46d29b705",
                        "registry": {
                            "position": {
                                "x": 1185,
                                "y": 524
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "6e77078a-7ffc-3881-d2b3-469431fa7020",
                        "registry": {
                            "position": {
                                "x": 1024,
                                "y": 728
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "6eee186c-a14e-3be3-d7b1-7fa840843c05",
                        "registry": {
                            "position": {
                                "x": 617,
                                "y": 227
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "7575417a-f5cb-d71e-d261-752e90aee4c3",
                        "registry": {
                            "position": {
                                "x": 1024,
                                "y": 598
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "7c902cff-78a7-29da-9892-c0ecdc182ab3",
                        "registry": {
                            "position": {
                                "x": 1014,
                                "y": 368
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "984baea9-4feb-5630-81f3-085218530d89",
                        "registry": {
                            "position": {
                                "x": 844,
                                "y": 408
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                        "registry": {
                            "position": {
                                "x": 684,
                                "y": 648
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "a83b8adb-232e-4f68-ca06-3ee2c728765b",
                        "registry": {
                            "position": {
                                "x": 406,
                                "y": 87
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "ae4baea9-4feb-5630-81f3-085218530d89",
                        "registry": {
                            "position": {
                                "x": 844,
                                "y": 578
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
                        "registry": {
                            "position": {
                                "x": 81,
                                "y": 970
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
                        "registry": {
                            "position": {
                                "x": 508,
                                "y": 514
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "cf2109f7-7027-451c-095f-c0bc64833ba9",
                        "registry": {
                            "position": {
                                "x": 8,
                                "y": 596
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "da2ea5d7-26ee-0923-0025-38bfbceb5293",
                        "registry": {
                            "position": {
                                "x": 178,
                                "y": 776
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "df437d49-a83e-6944-62ed-52fd3dcf806d",
                        "registry": {
                            "position": {
                                "x": 644,
                                "y": 368
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "e400d5b7-c955-fc81-382e-2c414b44fc20",
                        "registry": {
                            "position": {
                                "x": 844,
                                "y": 688
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "e4236ea7-bd34-9066-b116-da90faa42f94",
                        "registry": {
                            "position": {
                                "x": 370,
                                "y": 368
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "e9857a0d-db6e-8197-12f8-76b4ef60b107",
                        "registry": {
                            "position": {
                                "x": 1226,
                                "y": 370.66666666666663
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "eecf10d5-1ea4-b2f5-5342-4b3dc960899c",
                        "registry": {
                            "position": {
                                "x": 64,
                                "y": 37
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "fe2f7057-8238-2032-4e6b-3012e0a4ea85",
                        "registry": {
                            "position": {
                                "x": 1223.3333333333335,
                                "y": 272
                            }
                        }
                    }
                ]
            }
        },
        "04357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node20"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 102,
                    "y": 1474
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "043de1ab-0b51-afeb-be5f-a5a167b3a363": {
            "attributes": {
                "Definition": "uint8[] rawImgVector\nuint8[] hsvThreshImgVector\nuint8[] gsThreshImgVector\nuint8[] bitwiseAndImgVector\nint16 width\nint16 height",
                "name": "payloadBayDetectionImages"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 249,
                    "y": 405
                }
            },
            "sets": {}
        },
        "04fdc95b-f567-260d-dc01-d41068d3367b": {
            "attributes": {
                "name": "Systems"
            },
            "base": "6eee186c-a14e-3be3-d7b1-7fa840843c05",
            "meta": {},
            "parent": "8bc323b4-a4eb-abcd-b7a2-f710630dce1c",
            "pointers": {
                "base": "6eee186c-a14e-3be3-d7b1-7fa840843c05"
            },
            "registry": {
                "position": {
                    "x": 121,
                    "y": 200
                }
            },
            "sets": {}
        },
        "05c1b20d-f9c0-c853-9172-7dd28e48e313": {
            "attributes": {
                "name": "verticalPositionClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "1b4dffef-842f-6b3c-0302-596cf56a5459",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 400,
                    "y": 168
                }
            },
            "sets": {}
        },
        "06357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node28"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 103,
                    "y": 1982
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "0880f4eb-1dea-2d26-2dfd-1e735a3e739b": {
            "attributes": {
                "Definition": "int64 goal\nbool update\n---\nint64 current",
                "name": "armRotation"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 214,
                    "y": 598
                }
            },
            "sets": {}
        },
        "0a064327-011a-e497-672b-785e37ff448a": {
            "attributes": {
                "Definitions": "",
                "Destruction": "",
                "Forwards": "#include <stdlib.h>\n#include \"bbbgpio/gpio.h\"\n#include \"bbbeqep/eqep.h\"",
                "Initialization": "  paused = true;\n  lowerLimitReached = false;\n\n  // THESE NEED TO BE UPDATED\n  epsilon = 100;\n  motorForwardPin = 89; //86;  // connected to GPIO2_22, pin P8_27\n  motorBackwardPin = 88; //87; // connected to GPIO2_23, pin P8_29\n  lowerLimitSwitchPin = 65;       // connected to GPIO2_01, pin P8_18\n  \n  adcPin = 1;  // connected to ADC1, pin P9_40\n\n  // set up the pins to control the h-bridge\n  gpio_export(motorForwardPin);\n  gpio_export(motorBackwardPin);\n  gpio_export(lowerLimitSwitchPin);\n  gpio_set_dir(motorForwardPin,OUTPUT_PIN);\n  gpio_set_dir(motorBackwardPin,OUTPUT_PIN);\n  gpio_set_dir(lowerLimitSwitchPin,INPUT_PIN);\n  // set up the encoder module\n  vm_eqep_period = 1000000000L;\n  verticalMotoreQEP.initialize(\"/sys/devices/ocp.3/48302000.epwmss/48302180.eqep\", eQEP::eQEP_Mode_Absolute);\n  verticalMotoreQEP.set_period(vm_eqep_period);\n\n  // Command line args for radial goal\n  for (int i = 0; i < node_argc; i++)\n    {\n      if (!strcmp(node_argv[i], \"-unpaused\"))\n\t{\n\t  paused = false;\n\t}\n      if (!strcmp(node_argv[i], \"-v\"))\n\t{\n\t  verticalGoal = atoi(node_argv[i+1]);\n\t}\n      if (!strcmp(node_argv[i], \"-e\"))\n\t{\n\t  epsilon = atoi(node_argv[i+1]);\n\t}\n    }\n\n  ROS_INFO(\"VERTICAL GOAL SET TO : %d\",verticalGoal);",
                "Members": "  bool paused;\n  // epsion value for minimum actionable difference between goal and current\n  int epsilon;\n  // goal position for the vertical linear actuator\n  int verticalGoal;\n  // current position of the vertical linear actuator\n  int verticalCurrent;\n  // pin that motor forward is connected to\n  unsigned int motorForwardPin;\n  // pin that motor backward is connected to\n  unsigned int motorBackwardPin;\n  // pin that lower limit switch is connected to\n  unsigned int lowerLimitSwitchPin;\n  // state variable to keep track of whether we've reached the limit or not\n  bool lowerLimitReached;\n  // ADC the motor potentiometer is connected to (for the prototype)\n  int adcPin;\n  // enhanced Quadrature Encoder Pulse eQEP module for the vertical actuator\n  eQEP verticalMotoreQEP;\n  long vm_eqep_period;",
                "name": "verticalController"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 704,
                    "y": 235
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "8a20c8ac-2b78-609a-aebe-175f8964c890",
                        "registry": {
                            "position": {
                                "x": 507,
                                "y": 178
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c29ad503-417a-f40a-28da-57503f809a90",
                        "registry": {
                            "position": {
                                "x": 508,
                                "y": 231
                            }
                        }
                    }
                ]
            }
        },
        "0d357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node8"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 99,
                    "y": 638
                },
                "rotation": 0
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "0dad946f-7b49-ccba-aff2-c85e58b60ea7": {
            "attributes": {
                "Operation": "  if (!paused) \n    {\n\n      int pos; // temp value to store position from servo\n    \n      // ARM SERVO \n      dynamixel.setPosition(&serialPort, armServoID, Dynamixel::angleToPos_28T(armRotationGoal));\n      pos = dynamixel.getPosition(&serialPort, armServoID);\n      //      ROS_INFO(\"Arm base servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      armRotationCurrent = Dynamixel::posToAngle_28T(pos);\n\n      // GRIPPER ROTATION SERVO\n      dynamixel.setPosition(&serialPort, gripperRotationID, Dynamixel::angleToPos(gripperRotationGoal));\n      pos = dynamixel.getPosition(&serialPort, gripperRotationID);\n      //      ROS_INFO(\"Gripper rotation servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      gripperRotationCurrent = Dynamixel::posToAngle(pos);\n    \n      // GRIPPER POSITION SERVO\n      dynamixel.setPosition(&serialPort, gripperPositionID, Dynamixel::angleToPos(gripperPosGoal));\n      pos = dynamixel.getPosition(&serialPort, gripperPositionID);\n      //      ROS_INFO(\"Gripper position servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      gripperPosCurrent = Dynamixel::posToAngle(pos);\n    }\n  else \n    {\n      int pos; // temp value to store position from servo\n    \n      // ARM SERVO \n      pos = dynamixel.getPosition(&serialPort, armServoID);\n      //      ROS_INFO(\"Arm base servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      armRotationCurrent = Dynamixel::posToAngle_28T(pos);\n\n      // GRIPPER ROTATION SERVO\n      pos = dynamixel.getPosition(&serialPort, gripperRotationID);\n      //      ROS_INFO(\"Gripper rotation servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      gripperRotationCurrent = Dynamixel::posToAngle(pos);\n    \n      // GRIPPER POSITION SERVO\n      pos = dynamixel.getPosition(&serialPort, gripperPositionID);\n      //      ROS_INFO(\"Gripper position servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      gripperPosCurrent = Dynamixel::posToAngle(pos);\n    }",
                "Period": 0,
                "name": "servoTimer"
            },
            "base": "0f474808-eadf-a345-7ee9-7279326aab1e",
            "meta": {},
            "parent": "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f",
            "pointers": {
                "base": "0f474808-eadf-a345-7ee9-7279326aab1e"
            },
            "registry": {
                "position": {
                    "x": 491,
                    "y": 377
                }
            },
            "sets": {}
        },
        "0ecb9167-ab2a-9164-a638-972a058f218c": {
            "attributes": {
                "Definition": "float32 r\nfloat32 theta\nfloat32 z",
                "name": "samplePosition"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 270,
                    "y": 154
                }
            },
            "sets": {}
        },
        "0efa5f96-1a20-d716-2400-b65695efddc2": {
            "attributes": {},
            "base": "6eee186c-a14e-3be3-d7b1-7fa840843c05",
            "meta": {},
            "parent": "a361e083-c5a2-be94-f0c4-e157912d2d77",
            "pointers": {
                "base": "6eee186c-a14e-3be3-d7b1-7fa840843c05"
            },
            "registry": {
                "borderColor": "#99ff99",
                "color": "#33ffff",
                "position": {
                    "x": 152,
                    "y": 243
                }
            },
            "sets": {}
        },
        "0f357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node16"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 105,
                    "y": 1208
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "0f474808-eadf-a345-7ee9-7279326aab1e": {
            "attributes": {
                "ABL": "",
                "Deadline": 0,
                "Operation": "",
                "Period": 0,
                "Priority": 50,
                "name": "Timer"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Operation": {
                        "type": "string"
                    },
                    "Period": {
                        "type": "float"
                    },
                    "Deadline": {
                        "type": "float"
                    },
                    "Priority": {
                        "type": "integer",
                        "min": 1,
                        "max": 99
                    },
                    "ABL": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/clock.svg",
                "decorator": "CodeEditorDecorator",
                "position": {
                    "x": -27,
                    "y": 737
                }
            },
            "sets": {}
        },
        "112d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "62357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "11aa8166-89d9-0008-646c-9c5fc6816600": {
            "attributes": {
                "Operation": "  payloadBay.pos = received_data->pos;\n  payloadBay.orientation = received_data->orientation;",
                "name": "payloadBayStateSub"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "51321b06-2a7b-eebe-187b-a68c11e80b87",
            "pointers": {
                "Message": "3b0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 588,
                    "y": 219
                }
            },
            "sets": {}
        },
        "11ba8891-12a8-41c0-9380-f19a41e8dc53": {
            "attributes": {
                "IP": "10.1.1.30"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "852d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "11c26da0-dda2-d00c-dc36-f53c52c3fc62": {
            "attributes": {
                "Include Directories": "",
                "name": "System Library"
            },
            "base": "e4236ea7-bd34-9066-b116-da90faa42f94",
            "meta": {
                "attributes": {
                    "Include Directories": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "e4236ea7-bd34-9066-b116-da90faa42f94"
            },
            "registry": {
                "SVGIcon": "svgs/systemLibrary.svg",
                "decorator": "SVGDecorator",
                "isAbstract": false,
                "position": {
                    "x": 454,
                    "y": 688
                }
            },
            "sets": {}
        },
        "11cb9167-ab2a-9164-a638-972a058f218c": {
            "attributes": {
                "Definition": "float64 theta\nfloat64 phi",
                "name": "payloadBayOrientation"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 270,
                    "y": 466
                }
            },
            "sets": {}
        },
        "12a356d3-8ec8-dd52-0801-686fb2299ef2": {
            "attributes": {
                "IP": "10.1.1.4"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "5d2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "132d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "60357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "13476356-59e6-ee3c-2834-6fe453f1fd92": {
            "attributes": {
                "Subnet": "127.0.0.0"
            },
            "base": "36d534c1-207e-1c52-5336-c74ff256793f",
            "meta": {},
            "parent": "a14ea363-cf12-dc75-fef2-48cc7b40fb6b",
            "pointers": {
                "base": "36d534c1-207e-1c52-5336-c74ff256793f"
            },
            "registry": {
                "position": {
                    "x": 593,
                    "y": 254
                }
            },
            "sets": {}
        },
        "182d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "6b357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "183b7c25-179d-e884-f133-0024a5db330e": {
            "attributes": {
                "IP": "10.1.1.13"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "c92d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "1a2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "69357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "1aacd0f7-c612-def1-e351-b3e09db56136": {
            "attributes": {
                "name": "sampleStateFromImageClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "75973fe4-d007-56ab-2df2-483fac45138c",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 860,
                    "y": 249
                }
            },
            "sets": {}
        },
        "1b4dffef-842f-6b3c-0302-596cf56a5459": {
            "attributes": {
                "Definition": "int64 goal\nbool update\nbool setZeroPosition\n---\nint64 current\nbool lowerLimitReached\nbool upperLimitReached",
                "name": "verticalPosition"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 242,
                    "y": 217
                }
            },
            "sets": {}
        },
        "1f0e696a-b922-ec04-d0bf-b3eeb74660c9": {
            "attributes": {
                "Definition": "bool paused\nbool start\nbool stop\nbool manual\nbool halted",
                "name": "controlInputs"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 272,
                    "y": 712
                }
            },
            "sets": {}
        },
        "240e696a-b922-ec04-d0bf-b3eeb74660c9": {
            "attributes": {
                "Definition": "float32 theta\nfloat32 phi",
                "name": "sampleOrientation"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 271,
                    "y": 227
                }
            },
            "sets": {}
        },
        "242f9041-eeea-76ed-9546-62d8d83ee81e": {
            "attributes": {
                "IP": "10.1.1.22"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "872d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "25357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node32"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 2231
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "2562febd-1839-d9fe-3b97-0a0548314d85": {
            "attributes": {
                "name": "Software"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "5fa73dfc-a08d-9aa3-cb07-c7869fccd187",
                        "e4236ea7-bd34-9066-b116-da90faa42f94"
                    ],
                    "minItems": [
                        -1,
                        -1
                    ],
                    "maxItems": [
                        -1,
                        -1
                    ]
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/code.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 224,
                    "y": 325
                },
                "validPlugins": "SoftwareGenerator"
            },
            "sets": {}
        },
        "265e2d6f-1ce3-f1ce-af71-3934f174d63e": {
            "attributes": {
                "name": "captureImageClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1",
            "pointers": {
                "Service": "7c974a97-a7c9-94b1-12e9-dfddb839d1fb",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 474,
                    "y": 200
                }
            },
            "sets": {}
        },
        "271decd7-fb7c-8661-135c-400aa45350df": {
            "attributes": {
                "name": "gripperPositionClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "3b80f4eb-1dea-2d26-2dfd-1e735a3e739b",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 403,
                    "y": 460
                }
            },
            "sets": {}
        },
        "27271a90-b612-119a-4451-26b58c0a84b2": {
            "attributes": {
                "Definition": "",
                "name": "Service"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Definition": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/service.svg",
                "decorator": "CodeEditorDecorator",
                "position": {
                    "x": 174,
                    "y": 538
                }
            },
            "sets": {}
        },
        "27357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node24"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 99,
                    "y": 1730
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "284dffef-842f-6b3c-0302-596cf56a5459": {
            "attributes": {
                "Definition": "int64 goal\nbool update\n---\nint64 current",
                "name": "gripperRotation"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 147,
                    "y": 434
                }
            },
            "sets": {}
        },
        "296d633b-35b8-77d3-eadf-d49fc03b8301": {
            "attributes": {
                "IP": "10.1.1.1"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "e25ad296-2547-7c6a-ad35-e79b3d417157",
                "src": "a377ee64-9293-7b02-03c2-508ee3e4ed74"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "2acb9167-ab2a-9164-a638-972a058f218c": {
            "attributes": {
                "Definition": "high_level_controller/samplePosition pos\nhigh_level_controller/sampleOrientation orientation",
                "name": "sampleState"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 269,
                    "y": 315
                }
            },
            "sets": {}
        },
        "2c357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node12"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 104,
                    "y": 929
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "2df2dde5-9823-c603-092a-f1fc1f28ca14": {
            "attributes": {
                "Operation": "arm.state = received_data->state;",
                "name": "armStateMessage"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "51321b06-2a7b-eebe-187b-a68c11e80b87",
            "pointers": {
                "Message": "35cb9167-ab2a-9164-a638-972a058f218c",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 390,
                    "y": 349
                }
            },
            "sets": {}
        },
        "2e129f64-d002-cefe-20f8-256883f4b003": {
            "attributes": {
                "name": "ROSMOD_META"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                }
            },
            "parent": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 379
                }
            },
            "sets": {}
        },
        "2e357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node4"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 103,
                    "y": 372
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "2fe9618f-ca21-b656-26d7-801acce13ec2": {
            "attributes": {
                "Link Libraries": "v4l2",
                "name": "Video4Linux"
            },
            "base": "11c26da0-dda2-d00c-dc36-f53c52c3fc62",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "11c26da0-dda2-d00c-dc36-f53c52c3fc62"
            },
            "registry": {
                "position": {
                    "x": 673,
                    "y": 336
                }
            },
            "sets": {}
        },
        "302d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "43357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "3109804a-d102-0849-9ad7-b2411f3ce732": {
            "attributes": {
                "Directory": "/home/debian",
                "Key": "/home/jeb/.ssh/id_rsa_jetsontk1",
                "name": "debian"
            },
            "base": "984baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "984baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 286,
                    "y": 44
                }
            },
            "sets": {}
        },
        "322d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "41357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "32e6a6ea-9cd5-fb73-ff8f-803b2d3492e6": {
            "attributes": {
                "IP": "10.1.1.26"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "a62d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "34b22029-292d-bf37-d953-d91dedab2436": {
            "attributes": {
                "name": "ApplicationNetwork"
            },
            "base": "36d534c1-207e-1c52-5336-c74ff256793f",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "36d534c1-207e-1c52-5336-c74ff256793f"
            },
            "registry": {
                "position": {
                    "x": 738,
                    "y": 1304
                }
            },
            "sets": {}
        },
        "35cb9167-ab2a-9164-a638-972a058f218c": {
            "attributes": {
                "Definition": "int64 state",
                "name": "armState"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 272,
                    "y": 632
                }
            },
            "sets": {}
        },
        "36d534c1-207e-1c52-5336-c74ff256793f": {
            "attributes": {
                "Netmask": "255.255.255.0",
                "Subnet": "10.1.1.0",
                "name": "Network"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Subnet": {
                        "type": "string"
                    },
                    "Netmask": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "DisplayFormat": "$name:$Subnet",
                "SVGIcon": "svgs/cloud_network.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 739,
                    "y": 519
                }
            },
            "sets": {}
        },
        "392d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "4a357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "3abf1c09-fdc4-61e7-1e53-501eff8e76ee": {
            "attributes": {
                "name": "image_processor"
            },
            "base": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187"
            },
            "registry": {
                "position": {
                    "x": 316,
                    "y": 288
                }
            },
            "sets": {}
        },
        "3b0e696a-b922-ec04-d0bf-b3eeb74660c9": {
            "attributes": {
                "Definition": "high_level_controller/payloadBayPosition pos\nhigh_level_controller/payloadBayOrientation orientation",
                "name": "payloadBayState"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 272,
                    "y": 552
                }
            },
            "sets": {}
        },
        "3b2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "48357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "3b52cac4-09c7-6e5d-9d78-656955adb4f1": {
            "attributes": {},
            "base": "2562febd-1839-d9fe-3b97-0a0548314d85",
            "meta": {},
            "parent": "fbb9e11b-926b-10de-58e9-a161fe9deec9",
            "pointers": {
                "base": "2562febd-1839-d9fe-3b97-0a0548314d85"
            },
            "registry": {
                "position": {
                    "x": 184,
                    "y": 122
                }
            },
            "sets": {}
        },
        "3b80f4eb-1dea-2d26-2dfd-1e735a3e739b": {
            "attributes": {
                "Definition": "int64 goal\nbool update\n---\nint64 current",
                "name": "gripperPosition"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 58,
                    "y": 293
                }
            },
            "sets": {}
        },
        "3f413882-9032-19b3-46d5-342f9f8538cf": {
            "attributes": {
                "IP": "10.1.1.19"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "112d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "40634285-7f30-4d56-3e22-6047fe32f0d7": {
            "attributes": {
                "ABL": "",
                "Deadline": 0,
                "Operation": "",
                "name": "Server"
            },
            "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293",
            "meta": {
                "attributes": {
                    "Deadline": {
                        "type": "float"
                    },
                    "Operation": {
                        "type": "string"
                    },
                    "ABL": {
                        "type": "string"
                    }
                },
                "pointers": {
                    "Service": {
                        "items": [
                            "27271a90-b612-119a-4451-26b58c0a84b2"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "Service": null,
                "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293"
            },
            "registry": {
                "decorator": "CodeEditorDecorator",
                "isAbstract": false,
                "position": {
                    "x": 413,
                    "y": 828
                }
            },
            "sets": {}
        },
        "407b4c7e-9826-6855-d391-df7e96c3e73b": {
            "attributes": {
                "name": "captureImageClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb",
            "pointers": {
                "Service": "7c974a97-a7c9-94b1-12e9-dfddb839d1fb",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 667,
                    "y": 480
                }
            },
            "sets": {}
        },
        "41357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node23"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 246,
                    "y": 1659
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "43357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node31"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 251,
                    "y": 2164
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9": {
            "attributes": {
                "name": "Deployments"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "7c902cff-78a7-29da-9892-c0ecdc182ab3"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/deployment.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 1103,
                    "y": 337
                }
            },
            "sets": {}
        },
        "447d091e-edb3-cc67-88f8-2c4b643ee131": {
            "attributes": {
                "name": "sampleDetectionImagesPublisher"
            },
            "base": "0066ce30-e372-bb27-23c3-219c7d934553",
            "meta": {},
            "parent": "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb",
            "pointers": {
                "Message": "d2401091-4e08-04c7-a9a2-d668fb6ea4df",
                "base": "0066ce30-e372-bb27-23c3-219c7d934553"
            },
            "registry": {
                "position": {
                    "x": 220,
                    "y": 375
                }
            },
            "sets": {}
        },
        "44fcafc0-e7f2-3dd7-27fb-da8fd5960950": {
            "attributes": {
                "IP": "10.1.1.7"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "182d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "453ca24e-7880-8749-b62d-a3d9717d32ad": {
            "attributes": {},
            "base": "7c902cff-78a7-29da-9892-c0ecdc182ab3",
            "meta": {},
            "parent": "e95e44ec-0245-5b7d-1650-bfb4f10b941c",
            "pointers": {
                "base": "7c902cff-78a7-29da-9892-c0ecdc182ab3"
            },
            "registry": {
                "position": {
                    "x": 209,
                    "y": 269
                }
            },
            "sets": {}
        },
        "4585b7fc-307e-c80c-ada2-02a2845c404d": {
            "attributes": {
                "IP": "10.1.1.18"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "a42d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "47725ce0-f096-ea93-a507-004673d77790": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "MotorControl"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 585,
                    "y": 230
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "99ea1844-3957-5ba6-7fa8-df10bec27d3e",
                        "registry": {
                            "position": {
                                "x": 379,
                                "y": 240
                            }
                        }
                    }
                ]
            }
        },
        "47ab116f-f11c-a37a-8b11-291b91578348": {
            "attributes": {
                "name": "AGSE"
            },
            "base": "df437d49-a83e-6944-62ed-52fd3dcf806d",
            "meta": {},
            "parent": "04fdc95b-f567-260d-dc01-d41068d3367b",
            "pointers": {
                "base": "df437d49-a83e-6944-62ed-52fd3dcf806d"
            },
            "registry": {
                "position": {
                    "x": 359,
                    "y": 120
                }
            },
            "sets": {}
        },
        "47fdb167-6041-cd46-fa83-f6fb651c652d": {
            "attributes": {
                "Operation": "  if (req.update == true)\n    {\n      //      ROS_INFO(\"GOT NEW HEIGHT GOAL: %d\",(int)req.goal);\n      //      ROS_INFO(\"CURRENT HEIGHT: %d\",verticalCurrent);\n      verticalGoal = req.goal;\n    }\n  if (req.setZeroPosition == true)\n    {\n      ROS_INFO(\"ZEROED VERTICAL ENCODER\");\n      verticalMotoreQEP.set_position(0);\n    }\n  res.lowerLimitReached = lowerLimitReached;\n  res.upperLimitReached = false;\n  res.current = verticalCurrent;\n  return true;\n",
                "name": "verticalPositionServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "0a064327-011a-e497-672b-785e37ff448a",
            "pointers": {
                "Service": "1b4dffef-842f-6b3c-0302-596cf56a5459",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 383,
                    "y": 266
                }
            },
            "sets": {}
        },
        "48357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node3"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 249,
                    "y": 300
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "49725ce0-f096-ea93-a507-004673d77790": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Jetson"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 580,
                    "y": 443
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "99ea1844-3957-5ba6-7fa8-df10bec27d3e",
                        "registry": {
                            "position": {
                                "x": 681,
                                "y": 227
                            }
                        }
                    }
                ]
            }
        },
        "4a357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node11"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 246,
                    "y": 869
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "4a9f26bd-4fd6-acb3-0f4e-093cb9a34643": {
            "attributes": {
                "name": "Container"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "7575417a-f5cb-d71e-d261-752e90aee4c3"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "position": {
                    "x": 1083,
                    "y": 507
                }
            },
            "sets": {}
        },
        "4bc1deb3-abb3-9bf2-ee49-a072843d1eaf": {
            "attributes": {
                "IP": "10.1.1.29"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "e32d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "4d04c2a5-a077-dbc9-bb12-690bb10fffc9": {
            "attributes": {
                "name": "payloadBayStateSusbcriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1",
            "pointers": {
                "Message": "3b0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 813,
                    "y": 188
                }
            },
            "sets": {}
        },
        "4d5526bf-5772-cc61-a03d-36ff99280a1f": {
            "attributes": {
                "Link Libraries": "",
                "URL": "https://github.com/rosmod/lib-aruco/files/170738/aruco.zip",
                "name": "aruco"
            },
            "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a"
            },
            "registry": {
                "position": {
                    "x": 656,
                    "y": 141
                }
            },
            "sets": {}
        },
        "4f130061-8b9f-0389-c288-ad2d46eeab44": {
            "attributes": {
                "IP": "10.1.1.9"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "ea2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "4fc00747-714d-4832-998f-c520d0d3edfc": {
            "attributes": {
                "Operation": "  if (req.update == true)\n    {\n      gripperPosGoal = req.goal;\n    }\n  res.current = gripperPosCurrent;\n  return true;",
                "name": "gripperPositionServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f",
            "pointers": {
                "Service": "3b80f4eb-1dea-2d26-2dfd-1e735a3e739b",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 308,
                    "y": 249
                }
            },
            "sets": {}
        },
        "50177db4-7d87-86ab-98ae-472f9cfd788c": {
            "attributes": {
                "name": "controlInputsPublisher"
            },
            "base": "0066ce30-e372-bb27-23c3-219c7d934553",
            "meta": {},
            "parent": "51321b06-2a7b-eebe-187b-a68c11e80b87",
            "pointers": {
                "Message": "1f0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "0066ce30-e372-bb27-23c3-219c7d934553"
            },
            "registry": {
                "position": {
                    "x": 393,
                    "y": 261
                }
            },
            "sets": {}
        },
        "51321b06-2a7b-eebe-187b-a68c11e80b87": {
            "attributes": {
                "Forwards": "#include \"bbbgpio/gpio.h\"\n#include \"opencv/cv.h\"\n#include \"opencv/highgui.h\"\nusing namespace cv;",
                "Initialization": "  paused = false;\n  halted = false;\n  manual = false;\n  \n  noGPIO = false;\n\n  // Command line args for radial goal\n  for (int i = 0; i < node_argc; i++)\n    {\n      if (!strcmp(node_argv[i], \"-noGPIO\"))\n\t{\n\t  noGPIO = true;\n\t}\n    }\n\n  if (noGPIO == false) {\n\n    //////////////////////////////////////////////\n    // UIP SWITCHES\n    //////////////////////////////////////////////\n\n    // PAUSE Switch - Amber\n    pauseSwitchPin = 27; // P8_17\n    gpio_export(pauseSwitchPin);\n    gpio_set_dir(pauseSwitchPin,INPUT_PIN);\n\n    // MANUAL Switch - Blue\n    manualSwitchPin = 22; // P8_19\n    gpio_export(manualSwitchPin);\n    gpio_set_dir(manualSwitchPin,INPUT_PIN);\n\n    // HALT Switch - Red\n    haltSwitchPin = 65; // P8_18\n    gpio_export(haltSwitchPin);\n    gpio_set_dir(haltSwitchPin,INPUT_PIN);\n\n    //////////////////////////////////////////////\n    // UIP LEDS\n    //////////////////////////////////////////////\n\n    // PAUSE MAIN LED \n    pauseLED = 37; // P8_22 - Amber\n    gpio_export(pauseLED);\n    gpio_set_dir(pauseLED, OUTPUT_PIN);\n    pauseLEDBlinkDelay = 5;\n\n    // ALARM MAIN LED\n    alarmLED = 66; // P8_07 - Red\n    gpio_export(alarmLED);\n    gpio_set_dir(alarmLED, OUTPUT_PIN);  \n\n    // INIT MAIN LED\n    initLED[0] = 45; // P8_11 - Blue\n    initLED[1] = 44; // P8_12 - Green\n    initLED[2] = 23; // P8_13 - Red\n    gpio_export(initLED[0]);\n    gpio_set_dir(initLED[0], OUTPUT_PIN);  \n    gpio_export(initLED[1]);\n    gpio_set_dir(initLED[1], OUTPUT_PIN);  \n    gpio_export(initLED[2]);\n    gpio_set_dir(initLED[2], OUTPUT_PIN);  \n\n    gpio_set_value(initLED[0], HIGH);\n\n    // SAMPLE MAIN LED\n    sampleLED[0] = 26; // P8_14 - Blue\n    sampleLED[1] = 47; // P8_15 - Green\n    sampleLED[2] = 46; // P8_16 - Red\n    gpio_export(sampleLED[0]);\n    gpio_set_dir(sampleLED[0], OUTPUT_PIN);  \n    gpio_export(sampleLED[1]);\n    gpio_set_dir(sampleLED[1], OUTPUT_PIN);  \n    gpio_export(sampleLED[2]);\n    gpio_set_dir(sampleLED[2], OUTPUT_PIN);  \n    sampleLEDBlinkDelay = 5;\n\n    // BAY MAIN LED\n    bayLED[0] = 67; // P8_08 - Blue\n    bayLED[1] = 69; // P8_09 - Green\n    bayLED[2] = 68; // P8_10 - Red\n    gpio_export(bayLED[0]);\n    gpio_set_dir(bayLED[0], OUTPUT_PIN);  \n    gpio_export(bayLED[1]);\n    gpio_set_dir(bayLED[1], OUTPUT_PIN);  \n    gpio_export(bayLED[2]);\n    gpio_set_dir(bayLED[2], OUTPUT_PIN);  \n    bayLEDBlinkDelay = 5;\n  }\n",
                "Members": "  bool paused;\n  bool halted;\n  bool manual;\n\n  bool noGPIO;\n\n  // used to keep track of AGSE state\n  high_level_controller::armState arm;\n  high_level_controller::sampleState sample;\n  high_level_controller::payloadBayState payloadBay;\n\n  // Pins for Pause (AMBER) Missile Switch\n  unsigned int pauseSwitchPin; \n  // Pins for Manual Override (RED) Missile Switch\n  unsigned int manualSwitchPin;\n  // Pins for halt (BLUE) Missile Switch\n  unsigned int haltSwitchPin; \n\n  // variable to keep track of switch states\n  unsigned int pauseSwitchState;\n  unsigned int haltSwitchState;\n  unsigned int manualSwitchState;\n\n  // Pin for Pause LED\n  unsigned int pauseLED;\n  unsigned int pauseLEDBlinkDelay;\n  // Pin for Alarm LED\n  unsigned int alarmLED;\n  // Pin for Sample LED\n  unsigned int sampleLED[3];\n  unsigned int sampleLEDBlinkDelay;\n  // Pin for Bay LED\n  unsigned int bayLED[3];\n  unsigned int bayLEDBlinkDelay;\n  // Pin for Init LED\n  unsigned int initLED[3];\n",
                "name": "userInputController"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 509,
                    "y": 556
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "c29ad503-417a-f40a-28da-57503f809a90",
                        "registry": {
                            "position": {
                                "x": 709,
                                "y": 328
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c2d1d475-839e-2efe-b48c-410517c4532c",
                        "registry": {
                            "position": {
                                "x": 708,
                                "y": 258
                            }
                        }
                    }
                ]
            }
        },
        "51477479-d072-83e6-eecf-edf8c60a35e6": {
            "attributes": {},
            "base": "e9857a0d-db6e-8197-12f8-76b4ef60b107",
            "meta": {},
            "parent": "a0aedc6c-26be-58cb-4c99-7cb20a0772ce",
            "pointers": {
                "base": "e9857a0d-db6e-8197-12f8-76b4ef60b107"
            },
            "registry": {
                "position": {
                    "x": 278,
                    "y": 162
                }
            },
            "sets": {}
        },
        "5173ec58-cf6c-e536-1efc-d1cf17642062": {
            "attributes": {
                "IP": "10.1.1.3"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "e25ad296-2547-7c6a-ad35-e79b3d417157",
                "src": "ad77ee64-9293-7b02-03c2-508ee3e4ed74"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "51b3d75d-3340-147d-0d42-302ed11445ed": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "b19a7df1-b77a-fea6-b7f9-4cf640560c39",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 79,
                    "y": 285
                }
            },
            "sets": {}
        },
        "52c371ec-8f35-bee7-ee11-1de6f0cda7d4": {
            "attributes": {},
            "base": "6eee186c-a14e-3be3-d7b1-7fa840843c05",
            "meta": {},
            "parent": "fbb9e11b-926b-10de-58e9-a161fe9deec9",
            "pointers": {
                "base": "6eee186c-a14e-3be3-d7b1-7fa840843c05"
            },
            "registry": {
                "position": {
                    "x": 178,
                    "y": 218
                }
            },
            "sets": {}
        },
        "5364e1ea-29d3-bc62-87fa-b5715ac58d86": {
            "attributes": {
                "Definitions": "",
                "Destruction": "",
                "Forwards": "",
                "Initialization": "",
                "Members": "",
                "name": "Component"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "0f474808-eadf-a345-7ee9-7279326aab1e",
                        "da2ea5d7-26ee-0923-0025-38bfbceb5293"
                    ],
                    "minItems": [
                        -1,
                        -1
                    ],
                    "maxItems": [
                        -1,
                        -1
                    ]
                },
                "attributes": {
                    "Members": {
                        "type": "string"
                    },
                    "Initialization": {
                        "type": "string"
                    },
                    "Forwards": {
                        "type": "string"
                    },
                    "Destruction": {
                        "type": "string"
                    },
                    "Definitions": {
                        "type": "string"
                    }
                },
                "pointers": {
                    "Libraries": {
                        "items": [
                            "e4236ea7-bd34-9066-b116-da90faa42f94"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            -1
                        ]
                    }
                },
                "mixins": [
                    "eecf10d5-1ea4-b2f5-5342-4b3dc960899c"
                ]
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/component.svg",
                "decorator": "CodeEditorDecorator",
                "position": {
                    "x": 13,
                    "y": 540
                }
            },
            "sets": {
                "Libraries": []
            }
        },
        "542d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "27357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "55125e5b-e6b2-0557-d0ca-e9e678b4581a": {
            "attributes": {
                "IP": "10.1.1.24"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "542d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "562d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "25357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "5a1725b5-953f-cbf1-d72d-4897c4d55c11": {
            "attributes": {
                "Operation": "    paused = received_data->paused;\n    ROS_INFO( paused ? \"Image Processor paused!\" : \"Image Processor Unpaused\" );",
                "name": "controlInputsSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb",
            "pointers": {
                "Message": "1f0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 673,
                    "y": 310
                }
            },
            "sets": {}
        },
        "5a606d01-44cd-486e-3400-45b5dc693198": {
            "attributes": {
                "Operation": "  pb_rawImage = Mat(received_data->height, \n\t\t    received_data->width, \n\t\t    CV_8UC3, \n\t\t    const_cast<unsigned char*>(received_data->rawImgVector.data()));\n\n  pb_hsvImage = Mat(received_data->height, \n\t\t    received_data->width, \n\t\t    CV_8UC3, \n\t\t    const_cast<unsigned char*>(received_data->hsvThreshImgVector.data()));\n\n  pb_gsImage = Mat(received_data->height, \n\t\t   received_data->width, \n\t\t   CV_8UC3, \n\t\t   const_cast<unsigned char*>(received_data->gsThreshImgVector.data()));\n  \n  pb_bitwise = Mat(received_data->height, \n\t\t   received_data->width, \n\t\t   CV_8UC3, \n\t\t   const_cast<unsigned char*>(received_data->bitwiseAndImgVector.data()));\n\n  bottom_left = cvCreateImage(cvSize(pb_rawImage.cols, pb_rawImage.rows), 8, 3);\n  IplImage ipltemp = pb_rawImage;\n  cvCopy(&ipltemp, bottom_left);",
                "name": "payloadBayDetectionImagesSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1",
            "pointers": {
                "Message": "043de1ab-0b51-afeb-be5f-a5a167b3a363",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 614,
                    "y": 130
                }
            },
            "sets": {}
        },
        "5d2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "2e357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "5e036e97-58b4-2376-76c5-97ef45bd8c29": {
            "attributes": {
                "name": "Client"
            },
            "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293",
            "meta": {
                "pointers": {
                    "Service": {
                        "items": [
                            "27271a90-b612-119a-4451-26b58c0a84b2"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "Service": null,
                "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293"
            },
            "registry": {
                "isAbstract": false,
                "position": {
                    "x": 283,
                    "y": 831
                }
            },
            "sets": {}
        },
        "5e29f1d2-99a8-9559-faff-e924a9c5e677": {
            "attributes": {
                "Operation": "if (!paused)\n{\n  image_processor::captureImage arg;\n  if (this->captureImageClient.call(arg)) {\n    //\tROS_INFO(\"Image width: %d, height: %d, size: %d\", \n    //\t arg.response.width,\n    //\t arg.response.height,\n    //\t arg.response.imgVector.size());\n    Mat image = Mat( arg.response.height, \n                    arg.response.width, \n                    CV_8UC3, \n                    arg.response.imgVector.data());\n    Mat detectedObjectsMask = Mat::zeros(image.size(), CV_8UC3);\n    // NEED TO GET RETURN VALUES ABOUT DETECTED PAYLOAD BAY HERE\n    DetectedObject payloadBay =\n      payloadBayDetector.run(image,detectedObjectsMask,\"autonomous_PB\"); \n    ROS_INFO(\"PayloadBay: %d, (%f,%f), %f\",payloadBay.state, payloadBay.x, payloadBay.y, payloadBay.angle);\n    cv::imwrite(\"PayloadBay-01-Raw.png\", image+detectedObjectsMask);\n    if ( payloadBay.x >= 0 && payloadBay.x <= arg.response.width &&\n        payloadBay.y >= 0 && payloadBay.y <= arg.response.height )\n    {\n      res.status = payloadBay.state;\n      res.x = payloadBay.x - arg.response.width / 2;   // convert [0,w] -> [-w/2,w/2]\n      res.y = payloadBay.y - arg.response.height / 2;  // convert [0,h] -> [-h/2,h/2]\n      res.angle = payloadBay.angle;\n    }\n    else\n      res.status = HIDDEN;\n    return true;\n  }\n  else {\n    ROS_INFO(\"ERROR: Client call failed; couldn't get image.\");\n  }\n}\nreturn false;\n",
                "name": "payloadBayStateFromImageServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb",
            "pointers": {
                "Service": "bf3c5759-8b0e-c5a7-7666-e3d42038bc48",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 669,
                    "y": 218
                }
            },
            "sets": {}
        },
        "5f2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "2c357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "5fa73dfc-a08d-9aa3-cb07-c7869fccd187": {
            "attributes": {
                "name": "Package"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "27271a90-b612-119a-4451-26b58c0a84b2",
                        "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
                        "cf2109f7-7027-451c-095f-c0bc64833ba9"
                    ],
                    "minItems": [
                        -1,
                        -1,
                        -1
                    ],
                    "maxItems": [
                        -1,
                        -1,
                        -1
                    ]
                },
                "constraints": {
                    "nameConstraint": {
                        "script": "function(core, node, callback) {\n  callback(node,{hasViolation:true,message:'TEST: '});\n}",
                        "priority": 1,
                        "info": ""
                    }
                },
                "mixins": [
                    "eecf10d5-1ea4-b2f5-5342-4b3dc960899c"
                ]
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/package.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 219,
                    "y": 421
                }
            },
            "sets": {}
        },
        "60248922-f473-bc97-d362-1d9cb0a32efd": {
            "attributes": {
                "IP": "10.1.1.101"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "51b3d75d-3340-147d-0d42-302ed11445ed"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "60357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node27"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 251,
                    "y": 1915
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "62357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node19"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 249,
                    "y": 1395
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "6426cc7b-5cb2-d3a7-0790-58b46d29b705": {
            "attributes": {
                "name": "Results"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {},
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/results.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 1284,
                    "y": 556
                }
            },
            "sets": {}
        },
        "65d2144b-00c4-571f-ac50-4cfaa9bec92d": {
            "attributes": {
                "IP": "10.1.1.11"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "392d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "679e634b-48de-6844-8479-229fb51dfaf8": {
            "attributes": {
                "IP": "10.1.1.28"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "752d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "6815fb72-468f-ef04-95a9-117eb05569de": {
            "attributes": {
                "Operation": "  if (req.update == true)\n    {\n      gripperRotationGoal = req.goal;\n    }\n  res.current = gripperRotationCurrent;\n  return true;",
                "name": "gripperRotationServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f",
            "pointers": {
                "Service": "284dffef-842f-6b3c-0302-596cf56a5459",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 627,
                    "y": 241
                }
            },
            "sets": {}
        },
        "692c4cbd-629c-8265-5d80-9b1dd5103c39": {
            "attributes": {
                "Operation": "  sample.pos = received_data->pos;\n  sample.orientation = received_data->orientation;",
                "name": "sampleStateSub"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "51321b06-2a7b-eebe-187b-a68c11e80b87",
            "pointers": {
                "Message": "2acb9167-ab2a-9164-a638-972a058f218c",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 592,
                    "y": 331
                }
            },
            "sets": {}
        },
        "69357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node15"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 247,
                    "y": 1135
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "6a84f65c-0fbe-1fc6-79e8-2ff4bc2dcd1e": {
            "attributes": {
                "Definition": "int64 goal\nbool update\nbool setZeroPosition\n---\nint64 current\nbool lowerLimitReached\nbool upperLimitReached",
                "name": "radialPosition"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 210,
                    "y": 56
                }
            },
            "sets": {}
        },
        "6af13451-3d33-a993-7f16-bcbcc85fce96": {
            "attributes": {},
            "base": "7c902cff-78a7-29da-9892-c0ecdc182ab3",
            "meta": {},
            "parent": "e95e44ec-0245-5b7d-1650-bfb4f10b941c",
            "pointers": {
                "base": "7c902cff-78a7-29da-9892-c0ecdc182ab3"
            },
            "registry": {
                "position": {
                    "x": 204,
                    "y": 158
                }
            },
            "sets": {}
        },
        "6b357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node7"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 250,
                    "y": 569
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "6c0c5975-cf58-cb4b-be6c-292744a30726": {
            "attributes": {
                "IP": "10.1.1.8"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "7e2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "6d32e61a-93a8-9056-b3db-be265442f959": {
            "attributes": {
                "name": "armStatePublisher"
            },
            "base": "0066ce30-e372-bb27-23c3-219c7d934553",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Message": "35cb9167-ab2a-9164-a638-972a058f218c",
                "base": "0066ce30-e372-bb27-23c3-219c7d934553"
            },
            "registry": {
                "position": {
                    "x": 570,
                    "y": 308
                }
            },
            "sets": {}
        },
        "6e77078a-7ffc-3881-d2b3-469431fa7020": {
            "attributes": {
                "SchedulingScheme": "FIFO",
                "name": "Component Instance"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "SchedulingScheme": {
                        "type": "string",
                        "enum": [
                            "FIFO",
                            "PFIFO",
                            "EDF"
                        ]
                    }
                },
                "pointers": {
                    "Component": {
                        "items": [
                            "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "Component": null,
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "position": {
                    "x": 1083,
                    "y": 607
                }
            },
            "sets": {}
        },
        "6eee186c-a14e-3be3-d7b1-7fa840843c05": {
            "attributes": {
                "name": "Systems"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "df437d49-a83e-6944-62ed-52fd3dcf806d"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/nature.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 789,
                    "y": 339
                }
            },
            "sets": {}
        },
        "6f725ce0-f096-ea93-a507-004673d77790": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "UserInput"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 577,
                    "y": 328
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "99ea1844-3957-5ba6-7fa8-df10bec27d3e",
                        "registry": {
                            "position": {
                                "x": 437,
                                "y": 304
                            }
                        }
                    }
                ]
            }
        },
        "752d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "06357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "7575417a-f5cb-d71e-d261-752e90aee4c3": {
            "attributes": {
                "CMDLine": "",
                "Priority": 50,
                "name": "Node"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "6e77078a-7ffc-3881-d2b3-469431fa7020"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                },
                "attributes": {
                    "CMDLine": {
                        "type": "string"
                    },
                    "Priority": {
                        "type": "integer",
                        "max": 99
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "position": {
                    "x": 1083,
                    "y": 557
                }
            },
            "sets": {}
        },
        "75973fe4-d007-56ab-2df2-483fac45138c": {
            "attributes": {
                "Definition": "---\nint8 status\nfloat32 x\nfloat32 y\nfloat32 angle",
                "name": "sampleStateFromImage"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 447,
                    "y": 374
                }
            },
            "sets": {}
        },
        "7599b53d-653a-1ff6-0d2a-c6a49dec721c": {
            "attributes": {
                "Definitions": "struct buffer      *buffers;\nstruct v4l2_buffer  buf;\nint                 n_buffers;\n\nstatic void xioctl(int fh, int request, void *arg)\n{\n  int r;\n  do {\n    r = v4l2_ioctl(fh, request, arg);\n  } while (r == -1 && ((errno == EINTR) || (errno == EAGAIN)));\n  if (r == -1) {\n    fprintf(stderr, \"error %d, %s\\n\", errno, strerror(errno));\n    exit(EXIT_FAILURE);\n  }\n}\n",
                "Forwards": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <signal.h>\n#include <sys/ioctl.h>\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/mman.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <jpeglib.h>\n#include <time.h>\n\n#include <linux/videodev2.h>\n#include <libv4l2.h>\n\n#define CLEAR(x) memset(&(x), 0, sizeof(x))\n\nstruct buffer {\n        void   *start;\n        size_t length;\n};\n",
                "Initialization": "  paused = true;\n  sprintf(videoDevice,\"/dev/video0\");\n  width = 1920;\n  height = 1080;\n\n  struct v4l2_format              fmt;\n  struct v4l2_requestbuffers      reqBufs;\n\n  videoFD = v4l2_open(videoDevice, O_RDWR | O_NONBLOCK, 0);\n  if (videoFD < 0) {\n    perror(\"Cannot open device\");\n    exit(EXIT_FAILURE);\n  }\n\n  CLEAR(fmt);\n  fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n  fmt.fmt.pix.width       = width;\n  fmt.fmt.pix.height      = height;\n  fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_BGR24;\n  fmt.fmt.pix.field       = V4L2_FIELD_INTERLACED;\n  xioctl(videoFD, VIDIOC_S_FMT, &fmt);\n  if (fmt.fmt.pix.pixelformat != V4L2_PIX_FMT_BGR24) {\n    printf(\"Libv4l didn't accept BGR24 format. Can't proceed.\\n\");\n    exit(EXIT_FAILURE);\n  }\n  if ((fmt.fmt.pix.width != width) || (fmt.fmt.pix.height != height))\n    printf(\"Warning: driver is sending image at %dx%d\\n\",\n\t   fmt.fmt.pix.width, fmt.fmt.pix.height);\n\n  CLEAR(reqBufs);\n  reqBufs.count = 2;\n  reqBufs.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n  reqBufs.memory = V4L2_MEMORY_MMAP;\n  xioctl(videoFD, VIDIOC_REQBUFS, &reqBufs);\n\n  buffers = (buffer *)calloc(reqBufs.count, sizeof(*buffers));\n  for (n_buffers = 0; n_buffers < reqBufs.count; ++n_buffers) {\n    CLEAR(buf);\n\n    buf.type        = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n    buf.memory      = V4L2_MEMORY_MMAP;\n    buf.index       = n_buffers;\n\n    xioctl(videoFD, VIDIOC_QUERYBUF, &buf);\n\n    buffers[n_buffers].length = buf.length;\n    buffers[n_buffers].start = v4l2_mmap(NULL, buf.length,\n\t\t\t\t\t PROT_READ | PROT_WRITE, MAP_SHARED,\n\t\t\t\t\t videoFD, buf.m.offset);\n\n    if (MAP_FAILED == buffers[n_buffers].start) {\n      perror(\"mmap\");\n      exit(EXIT_FAILURE);\n    }\n  }\n\n  // Command line args for servo control\n  for (int i = 0; i < node_argc; i++) \n    {\n      if (!strcmp(node_argv[i], \"-unpaused\"))\n\tpaused = false;\n    }\n",
                "Members": "        bool paused;\n        char videoDevice[50];\n        int videoFD;\n        int width;\n        int height;\n        int numFrames;",
                "name": "imageSensor"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 1084,
                    "y": 115
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "2fe9618f-ca21-b656-26d7-801acce13ec2",
                        "registry": {
                            "position": {
                                "x": 429,
                                "y": 275
                            }
                        }
                    }
                ]
            }
        },
        "769c7992-7dd1-3447-3e3c-953fd7e158d4": {
            "attributes": {
                "Operation": "    if (!paused)\n    {\n      // Business Logic for captureImage_server Server providing captureImage Service\n      fd_set                          fds;\n      struct timeval                  tv;\n      enum v4l2_buf_type              type;\n      int                             r;\n\n      for (int i = 0; i < n_buffers; ++i) {\n\tCLEAR(buf);\n\tbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\tbuf.memory = V4L2_MEMORY_MMAP;\n\tbuf.index = i;\n\txioctl(videoFD, VIDIOC_QBUF, &buf);\n      }\n      type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\n      xioctl(videoFD, VIDIOC_STREAMON, &type);\n      do {\n\tFD_ZERO(&fds);\n\tFD_SET(videoFD, &fds);\n\n\t/* Timeout. */\n\ttv.tv_sec = 2;\n\ttv.tv_usec = 0;\n\n\tr = select(videoFD + 1, &fds, NULL, NULL, &tv);\n      } while ((r == -1 && (errno = EINTR)));\n      if (r == -1) {\n\tperror(\"select\");\n\treturn false;\n      }\n\n      CLEAR(buf);\n      buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n      buf.memory = V4L2_MEMORY_MMAP;\n      xioctl(videoFD, VIDIOC_DQBUF, &buf);\n\n      //fwrite(buffers[buf.index].start, buf.bytesused, 1, fout);\n\n      type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n      xioctl(videoFD, VIDIOC_STREAMOFF, &type);\n\n      res.imgVector.reserve(buf.bytesused);\n      std::copy(&((unsigned char *)buffers[buf.index].start)[0],\n\t\t&((unsigned char *)buffers[buf.index].start)[0] + buf.bytesused,\n\t\tback_inserter(res.imgVector));\n      res.width = width;\n      res.height = height;\n\t\t\n      return true;\n    }\n  return false;\n",
                "name": "captureImageServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "7599b53d-653a-1ff6-0d2a-c6a49dec721c",
            "pointers": {
                "Service": "7c974a97-a7c9-94b1-12e9-dfddb839d1fb",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 441,
                    "y": 266
                }
            },
            "sets": {}
        },
        "772d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "04357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "7781e7ee-ca18-2432-2180-4dadebfe0def": {
            "attributes": {
                "name": "Deployments"
            },
            "base": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9",
            "meta": {},
            "parent": "a361e083-c5a2-be94-f0c4-e157912d2d77",
            "pointers": {
                "base": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9"
            },
            "registry": {
                "borderColor": "#99ff99",
                "color": "#33ffff",
                "position": {
                    "x": 150,
                    "y": 348
                }
            },
            "sets": {}
        },
        "78617d39-7d27-d9f9-b421-7b8621f0380c": {
            "attributes": {
                "Operation": "paused = received_data->paused;",
                "name": "controlInputsSusbcriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "0a064327-011a-e497-672b-785e37ff448a",
            "pointers": {
                "Message": "1f0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 382,
                    "y": 359
                }
            },
            "sets": {}
        },
        "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e": {
            "attributes": {
                "name": "motor_controller"
            },
            "base": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187"
            },
            "registry": {
                "position": {
                    "x": 322,
                    "y": 128
                }
            },
            "sets": {}
        },
        "7c2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "0f357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "7c408f55-a315-ae29-dd73-60bbbfc9fb8d": {
            "attributes": {
                "IP": "127.0.0.1"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "a14ea363-cf12-dc75-fef2-48cc7b40fb6b",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "13476356-59e6-ee3c-2834-6fe453f1fd92",
                "src": "8c5166ed-ded6-b1af-279f-ba01d0aff3fc"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "7c902cff-78a7-29da-9892-c0ecdc182ab3": {
            "attributes": {
                "name": "Deployment"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "4a9f26bd-4fd6-acb3-0f4e-093cb9a34643"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/robot.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 1103,
                    "y": 417
                },
                "validPlugins": ""
            },
            "sets": {}
        },
        "7c974a97-a7c9-94b1-12e9-dfddb839d1fb": {
            "attributes": {
                "Definition": "---\nuint8[] imgVector\nint16 width\nint16 height",
                "name": "captureImage"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 458,
                    "y": 216
                }
            },
            "sets": {}
        },
        "7dd6c967-4043-a173-2548-d357b944b810": {
            "attributes": {
                "Link Libraries": "",
                "URL": "https://github.com/rosmod/lib-objecttracker/files/170732/ObjectTracker.zip",
                "name": "objecttracker"
            },
            "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a"
            },
            "registry": {
                "position": {
                    "x": 829,
                    "y": 228
                }
            },
            "sets": {}
        },
        "7e2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "0d357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "7ea9e1e6-46ee-3981-0169-da6fd2981659": {
            "attributes": {
                "name": "gripperRotationClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "284dffef-842f-6b3c-0302-596cf56a5459",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 402,
                    "y": 387
                }
            },
            "sets": {}
        },
        "7ec97e63-8e60-b0c0-8e25-eec82cec64be": {
            "attributes": {
                "name": "Software"
            },
            "base": "2562febd-1839-d9fe-3b97-0a0548314d85",
            "meta": {},
            "parent": "8bc323b4-a4eb-abcd-b7a2-f710630dce1c",
            "pointers": {
                "base": "2562febd-1839-d9fe-3b97-0a0548314d85"
            },
            "registry": {
                "position": {
                    "x": 122,
                    "y": 100
                }
            },
            "sets": {}
        },
        "7eea081c-beab-287a-1aed-46821198b17c": {
            "attributes": {
                "Operation": "paused = received_data->paused;",
                "name": "controlInputsSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "9ec1ad14-ca6f-6895-63a1-6c501f97a49a",
            "pointers": {
                "Message": "1f0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 378,
                    "y": 114
                }
            },
            "sets": {}
        },
        "83f33549-7a85-a619-35b2-b18209fdda9d": {
            "attributes": {
                "name": "high_level_controller"
            },
            "base": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "5fa73dfc-a08d-9aa3-cb07-c7869fccd187"
            },
            "registry": {
                "position": {
                    "x": 307,
                    "y": 214
                }
            },
            "sets": {}
        },
        "84f4223f-5696-75ae-9190-d695085aea4d": {
            "attributes": {
                "name": "payloadBayStatePublisher"
            },
            "base": "0066ce30-e372-bb27-23c3-219c7d934553",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Message": "3b0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "0066ce30-e372-bb27-23c3-219c7d934553"
            },
            "registry": {
                "position": {
                    "x": 569,
                    "y": 238
                }
            },
            "sets": {}
        },
        "852d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "f6357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "862a9375-04a6-d7d7-72c3-7fd13b4b4b3b": {
            "attributes": {
                "name": "payloadBayDetectionImagesPublisher"
            },
            "base": "0066ce30-e372-bb27-23c3-219c7d934553",
            "meta": {},
            "parent": "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb",
            "pointers": {
                "Message": "043de1ab-0b51-afeb-be5f-a5a167b3a363",
                "base": "0066ce30-e372-bb27-23c3-219c7d934553"
            },
            "registry": {
                "position": {
                    "x": 668,
                    "y": 411
                }
            },
            "sets": {}
        },
        "872d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "f4357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "874020d4-54d8-0c9b-0bda-18052dae44db": {
            "attributes": {
                "Operation": "  if (!paused)\n    {\n      // read current value for radial position (encoder)\n      radialCurrent = radialMotoreQEP.get_position();\n      //ROS_INFO(\"Raidal Actuator Encoder Reading: %d\",radialCurrent);\n\n      unsigned int limitSwitchState = 0;\n      unsigned int backwardPinState = 0;\n      gpio_get_value(lowerLimitSwitchPin,&limitSwitchState);\n      gpio_get_value(motorBackwardPin,&backwardPinState);\n      if (backwardPinState && !limitSwitchState)\n\t{\n\t  lowerLimitReached = true;\n\t}\n      // update motor based on current value\n      if ( abs(radialGoal-radialCurrent) > epsilon ) // if there's significant reason to move\n\t{\n\t  if (radialGoal > radialCurrent) \n\t    {\n\t      lowerLimitReached = false;\n\t      gpio_set_value(motorBackwardPin,LOW);\n\t      gpio_set_value(motorForwardPin,HIGH);\n\t    }\n\t  else\n\t    {\n\t      gpio_set_value(motorForwardPin,LOW);\n\t      gpio_set_value(motorBackwardPin,HIGH);\n\t    }\n\t}\n      else\n\t{\n\t  gpio_set_value(motorForwardPin,LOW);\n\t  gpio_set_value(motorBackwardPin,LOW);\n\t}\n    }\n  else \n    {\n      gpio_set_value(motorForwardPin,LOW);\n      gpio_set_value(motorBackwardPin,LOW);      \n    }\n\n",
                "name": "radialPositionTimer"
            },
            "base": "0f474808-eadf-a345-7ee9-7279326aab1e",
            "meta": {},
            "parent": "9ec1ad14-ca6f-6895-63a1-6c501f97a49a",
            "pointers": {
                "base": "0f474808-eadf-a345-7ee9-7279326aab1e"
            },
            "registry": {
                "position": {
                    "x": 380,
                    "y": 318
                }
            },
            "sets": {}
        },
        "87dd799d-18a6-52e6-4fea-8bbf6167a7ef": {
            "attributes": {
                "IP": "10.1.1.21"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "e12d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "883f2275-89f3-3656-d28f-33178a9e6a8d": {
            "attributes": {
                "IP": "10.1.1.23"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "322d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "8a20c8ac-2b78-609a-aebe-175f8964c890": {
            "attributes": {
                "URL": "https://github.com/rosmod/lib-bbbeqep/files/170735/bbbeqep.zip",
                "name": "bbbeqep"
            },
            "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a"
            },
            "registry": {
                "position": {
                    "x": 655,
                    "y": 245
                }
            },
            "sets": {}
        },
        "8b4a76cc-97a5-fa9a-5eea-273484f9d5ac": {
            "attributes": {
                "IP": "10.1.1.5"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "cb2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "8b77ee64-9293-7b02-03c2-508ee3e4ed74": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "6f725ce0-f096-ea93-a507-004673d77790",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 242,
                    "y": 269
                }
            },
            "sets": {}
        },
        "8bc323b4-a4eb-abcd-b7a2-f710630dce1c": {
            "attributes": {
                "Authors": "Pranav Srinivas Kumar, William Emfinger",
                "Detailed": "This is the Vanderbilt Aerospace Design Lab's (VADL) Autonomous Ground Support Equipment (AGSE) robot code which performed a simulated Mars Sample Recovery (MSR) mission by autonomously finding and placing a Martian sample into a rocket before launch.  This project contains the software model, hardware model, and algorithms for the AGSE.",
                "name": "AGSE"
            },
            "base": "a83b8adb-232e-4f68-ca06-3ee2c728765b",
            "meta": {},
            "parent": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
            "pointers": {
                "base": "a83b8adb-232e-4f68-ca06-3ee2c728765b"
            },
            "registry": {
                "position": {
                    "x": 501,
                    "y": 390
                }
            },
            "sets": {}
        },
        "8c0974bd-12e4-dc59-4d43-7982b534b262": {
            "attributes": {
                "Definitions": "const char* openPayloadBayString = \"1\";\nconst char* closePayloadBayString = \"0\";\n\nvoid armController::PrintCurrentState()\n{\n  switch (currentState)\n    {\n    case INIT:\n      ROS_INFO(\"INITIALIZING\");\n      break;\n    case OPENING_PB:\n      ROS_INFO(\"OPENING PAYLOAD BAY\");\n      break;\n    case FINDING_SAMPLE:\n      ROS_INFO(\"FINDING SAMPLE\");\n      break;\n    case FINDING_PB:\n      ROS_INFO(\"FINDING PAYLOAD BAY\");\n      break;\n    case GRABBING_SAMPLE:\n      ROS_INFO(\"GRABBING SAMPLE\");\n      break;\n    case CARRYING_SAMPLE:\n      ROS_INFO(\"CARRYING SAMPLE\");\n      break;\n    case INSERTING_SAMPLE:\n      ROS_INFO(\"INSERTING SAMPLE\");\n      break;\n    case CLOSING_PB:\n      ROS_INFO(\"CLOSING PAYLOAD BAY\");\n      break;\n    case MOVING_AWAY:\n      ROS_INFO(\"MOVING AWAY\");\n      break;\n    }\n}\n\nvoid armController::UpdateSensorData()\n{\n  // all servers have \n  // inputs: int64 goal, bool update\n  // output: current\n  motor_controller::radialPosition rPos;\n  rPos.request.update = false;\n  rPos.request.setZeroPosition = false;\n  radialPositionClient.call(rPos);\n  currentRadialPos = rPos.response.current;\n\n  motor_controller::verticalPosition vPos;\n  vPos.request.update = false;\n  vPos.request.setZeroPosition = false;\n  verticalPositionClient.call(vPos);\n  currentVerticalPos = vPos.response.current;\n\n  motor_controller::armRotation arm;\n  arm.request.update = false;\n  armRotationClient.call(arm);\n  currentArmRotation = arm.response.current;\n\n  motor_controller::gripperRotation gRot;\n  gRot.request.update = false;\n  gripperRotationClient.call(gRot);\n  currentGripperRotation = gRot.response.current;\n  \n  motor_controller::gripperPosition gPos;\n  gPos.request.update = false;\n  gripperPositionClient.call(gPos);\n  currentGripperPos = gPos.response.current;\n}\n\nvoid armController::UpdateArmPosition()\n{\n  // all servers have \n  // inputs: int64 goal, bool update\n  // output: current\n  motor_controller::radialPosition rPos;\n  rPos.request.update = true;\n  rPos.request.setZeroPosition = false;\n  rPos.request.goal = goalRadialPos;\n  radialPositionClient.call(rPos);\n  currentRadialPos = rPos.response.current;\n\n  motor_controller::verticalPosition vPos;\n  vPos.request.update = true;\n  vPos.request.setZeroPosition = false;\n  vPos.request.goal = goalVerticalPos;\n  verticalPositionClient.call(vPos);\n  currentVerticalPos = vPos.response.current;\n\n  motor_controller::armRotation arm;\n  arm.request.update = true;\n  arm.request.goal = goalArmRotation;\n  armRotationClient.call(arm);\n  currentArmRotation = arm.response.current;\n\n  motor_controller::gripperRotation gRot;\n  gRot.request.update = true;\n  gRot.request.goal = goalGripperRotation;\n  gripperRotationClient.call(gRot);\n  currentGripperRotation = gRot.response.current;\n  \n  motor_controller::gripperPosition gPos;\n  gPos.request.update = true;\n  gPos.request.goal = goalGripperPos;\n  gripperPositionClient.call(gPos);\n  currentGripperPos = gPos.response.current;\n}\n\nbool armController::CheckGoals()\n{\n#if 1\n  ROS_INFO(\"RADIAL GOAL: %d\",goalRadialPos);\n  ROS_INFO(\"RADIUS : %d\",currentRadialPos);\n  ROS_INFO(\"HEIGHT GOAL: %d\",goalVerticalPos);\n  ROS_INFO(\"HEIGHT : %d\",currentVerticalPos);\n  ROS_INFO(\"ARM ROTATION GOAL: %f\",goalArmRotation);\n  ROS_INFO(\"ARM ROTATION : %f\",currentArmRotation);\n  ROS_INFO(\"GRIPPER ROTATION GOAL: %f\",goalGripperRotation);\n  ROS_INFO(\"GRIPPER ROTATION : %f\",currentGripperRotation);\n  ROS_INFO(\"GRIPPER POSITION GOAL: %f\",goalGripperPos);\n  ROS_INFO(\"GRIPPER POSITION : %f\",currentGripperPos);\n#endif\n  if ( abs(goalRadialPos - currentRadialPos) > radialEpsilon )\n    return false;\n  if ( abs(goalVerticalPos - currentVerticalPos) > verticalEpsilon )\n    return false;\n  if ( abs(goalArmRotation - currentArmRotation) > armRotationEpsilon )\n    return false;\n  if ( abs(goalGripperRotation - currentGripperRotation) > gripperRotationEpsilon )\n    return false;\n  if ( abs(goalGripperPos - currentGripperPos) > gripperPosEpsilon )\n    return false;\n  ROS_INFO(\"Reached Goals\");\n  return true;\n}\n\nvoid armController::Init_StateFunc()\n{\n  // Init zeroes out the positions of the linear actuators for calibration\n  static bool zeroedHeight = false;\n  static bool zeroedRadius = false;\n  if (!zeroedHeight)\n    {\n      motor_controller::verticalPosition vPos;\n      vPos.request.update = true;\n      vPos.request.setZeroPosition = false;\n      vPos.request.goal = currentVerticalPos - 10000;\n      verticalPositionClient.call(vPos);\n      if (vPos.response.lowerLimitReached)\n\t{\n    \t  ROS_INFO(\"ZEROED HEIGHT\");\n\t  vPos.request.update = false;\n\t  vPos.request.setZeroPosition = true;\n\t  verticalPositionClient.call(vPos);\n\t  zeroedHeight = true;\n\t}\n    }\n  else if (!zeroedRadius)\n    {\n      motor_controller::radialPosition rPos;\n      rPos.request.update = true;\n      rPos.request.setZeroPosition = false;\n      rPos.request.goal = currentRadialPos - 10000;\n      radialPositionClient.call(rPos);\n      if (rPos.response.lowerLimitReached)\n\t{\n\t  ROS_INFO(\"ZEROED RADIUS\");\n\t  rPos.request.update = false;\n\t  rPos.request.setZeroPosition = true;\n\t  radialPositionClient.call(rPos);\n\t  zeroedRadius = true;\n\t}\n    }\n  else\n    {\n      //      ROS_INFO(\"ZEROED EVERYTHING\");\n      motor_controller::verticalPosition vPos;\n      vPos.request.update = true;\n      vPos.request.setZeroPosition = false;\n      vPos.request.goal = 0;\n      verticalPositionClient.call(vPos);\n      motor_controller::radialPosition rPos;\n      rPos.request.update = true;\n      rPos.request.setZeroPosition = false;\n      rPos.request.goal = 0;\n      radialPositionClient.call(rPos);\n\n      goalRadialPos = minRadialPos;\n      goalVerticalPos = minVerticalPos;\n      goalArmRotation = minArmRotation;\n      goalGripperRotation = currentGripperRotation;\n      goalGripperPos = gripperPosOpened;\n\n      currentState = OPENING_PB;\n      stateChanged = true;\n    }\n}\n\nvoid armController::Opening_PB_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n\n  // starting with:\n  // * known PB position\n  // * directly above PB\n\n  // State logic:\n  // send the command to the PB through UART to open the PB,\n  // OPTIONAL : use image based detection to confirm PB opens\n  // transition to next state (FINDING_SAMPLE) if PB responds well\n  payloadBayOpened = true;\n\n  //goalVerticalPos = minVerticalPos;\n\n  currentState = FINDING_SAMPLE;\n  stateChanged = true;\n}\n\nvoid armController::Finding_Sample_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  static float startSearchArmRotation = 0.0f; //200.0f;\n  static float initRadialPos       = (maxRadialPos + minRadialPos) * 3.0f / 4.0f;\n  static float initVerticalPos     = 311000;//minVerticalPos + 50000;\n  static float initArmRotation     = startSearchArmRotation;\n  static float initGripperRotation = gripperRotationSafe;\n  static float initGripperPos      = gripperPosClosed;\n  static bool firstRun = true;\n\n  if (firstRun)\n    {\n      goalRadialPos = initRadialPos;\n      goalVerticalPos = initVerticalPos;\n      goalArmRotation = initArmRotation;\n      goalGripperRotation = initGripperRotation;\n      goalGripperPos = initGripperPos;\n      firstRun = false;\n      return;\n    }\n\n  static float maxSearchTime = 300.0f; // seconds we are allowed to search\n\n  static float armRotationStep = 15.0f;     // degrees between steps of the state search\n  static float radialPosStep = 10000.0f;    // amount to move by in radius\n  static float armRotationScale = 1.0f/150.0f;  // amount to move by in theta based on image space\n  static float radialPosScale = 100.0f;         // amount to move by in radius based on image space\n\n  static float positionRadius = 50.0f; // once center of sample is in this radius, we are done\n  \n  static bool foundSample = false;\n  static high_level_controller::sampleState internalSampleState; // used within this state; global state set when done\n  static float sX, sY; // image-space position of sample\n\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n\n  // starting with:\n  // * known payload bay position and orientation (not relevant to this state)\n\n  // State logic:\n  // if !foundSample or internalSampleState.pos.{r,z} not within radius\n  if ( !foundSample || abs(sX) > positionRadius || abs(sY) > positionRadius )\n    {\n      // get image Processor result\n      bool newTest = false;\n      image_processor::sampleStateFromImage sStateImage;\n      if ( sampleStateFromImageClient.call(sStateImage) )\n\t{\n\t  switch (sStateImage.response.status)\n\t    {\n\t    case DETECTED:\n\t    case PARTIAL:\n\t      newTest = true;\n\t      ROS_INFO(\"FOUND SAMPLE: %d, %f , %f, %f\",\n\t\t       sStateImage.response.status, \n\t\t       sStateImage.response.x, \n\t\t       sStateImage.response.y, \n\t\t       sStateImage.response.angle);\n\t      break;\n\t    default: // covers the HIDDEN case too, already initialized to false\n    \t      ROS_INFO(\"NO SAMPLE FOUND\");\n\t      break;\n\t    }\n\t  // if result has no detection:\n\t  if (!newTest)\n\t    {\n\t      if (!foundSample) // if never found Sample:\n\t\t{\n\t\t  // increment arm rotation by arm rotation step\n\t\t  initArmRotation += armRotationStep;\n\t\t  if (initArmRotation >= 200.0f) //< minArmRotation)\n\t\t    {\n\t\t      initArmRotation = startSearchArmRotation;\n\t\t      initRadialPos += radialPosStep;\n\t\t      if (initRadialPos > maxRadialPos)\n\t\t\t{\n\t\t\t  initRadialPos = minRadialPos;\n\t\t\t}\n\t\t    }\n\n\t\t  goalRadialPos = initRadialPos;\n\t\t  goalVerticalPos = initVerticalPos;\n\t\t  goalArmRotation = initArmRotation;\n\t\t  goalGripperRotation = initGripperRotation;\n\t\t  goalGripperPos = initGripperPos;\n\t\t} else // else if found previously:\n\t\t{\n\t\t  // go half way between previous find location and current location\n\t\t  float previousArmRotation = internalSampleState.pos.theta;\n\t\t  int previousRadialPos = internalSampleState.pos.r;\n\n\t\t  goalRadialPos = (goalRadialPos + previousRadialPos) / 2.0f;\n\t\t  goalVerticalPos = initVerticalPos;\n\t\t  goalArmRotation = (goalArmRotation + previousArmRotation) / 2.0f;\n\t\t  goalGripperRotation = initGripperRotation;\n\t\t  goalGripperPos = initGripperPos;\n\t\t}\n\t    } else // else if result has detection:\n\t    {\n\t      // update internal variables\n\t      foundSample = true;\n\t      sX = sStateImage.response.x;\n\t      sY = sStateImage.response.y;\n\t      // update the internalSampleState\n\t      internalSampleState.pos.r = currentRadialPos;\n\t      internalSampleState.pos.theta = currentArmRotation;\n\t      internalSampleState.pos.z = currentVerticalPos;\n\t      internalSampleState.orientation.theta = sStateImage.response.angle + sampleOrientationOffset;\n\t      // if the sample's current image-space position is within the allowable radius\n\t      if ( abs(sX) <= positionRadius && abs(sY) <= positionRadius ) \n\t\t{\n\t\t  // we're not setting the goals; so this state should get triggered again immediately\n\t\t  // and it will have:\n\t\t  // * foundSample=true; \n\t\t  // * sX < positionRadius; \n\t\t  // * sY < positionRadius \n\t\t  // so will transition to next state\n\t\t} else // need to center the payload\n\t\t{\n\t\t  // move to detected position (i.e. set goals to detected position)\n\t\t  // NOTE: IMAGE SPACE IS +Y = DOWN; THIS MEANS +Y -> CCW\n\t\t  // if sY > 0 : rotate CW, else if sY < 0 CCW\n\t\t  if ( abs(sY) > positionRadius )\n\t\t    {\n\t\t      initArmRotation += (sY) * armRotationScale;\n\t\t      if ( initArmRotation > maxArmRotation )\n\t\t\tinitArmRotation = maxArmRotation;\n\t\t      if ( initArmRotation < minArmRotation )\n\t\t\tinitArmRotation = minArmRotation;\n\t\t    }\n\t\t  // NOTE: IMAGE SPACE IS +X = RETRACT RADIUS\n\t\t  // if sX > 0 : retract radius, else if sX < 0 extend\n\t\t  if ( abs(sX) > positionRadius )\n\t\t    {\n\t\t      initRadialPos += (-sX) * radialPosScale;\n\t\t      if ( initRadialPos > maxRadialPos )\n\t\t\tinitRadialPos = maxRadialPos;\n\t\t      if ( initRadialPos < minRadialPos )\n\t\t\tinitRadialPos = minRadialPos;\n\t\t    }\n\t\t  goalRadialPos = initRadialPos;\n\t\t  goalArmRotation = initArmRotation;\n\t\t}\n\t    }\n\t}\n    } else // else sample has been found and is within radius\n    {\n      // set component's SampleState\n      sample = internalSampleState;\n      // transition to next state (GRABBING_SAMPLE)\n      currentState = FINDING_PB;\n      //      currentState = GRABBING_SAMPLE;\n      stateChanged = true;\n    }\n}\n\nvoid armController::Finding_PB_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  static float startSearchArmRotation = 200.0f;\n  static float initRadialPos       = (maxRadialPos + minRadialPos) * 3.0f / 4.0f;\n  static float initVerticalPos     = minVerticalPos + 50000;\n  static float initArmRotation     = startSearchArmRotation;\n  static float initGripperRotation = gripperRotationSafe;\n  static float initGripperPos      = gripperPosClosed;\n  static bool firstRun = true;\n  static bool reachedHeight = false;\n\n  if (!reachedHeight)\n    {\n      goalVerticalPos = initVerticalPos;\n      reachedHeight = true;\n      return;\n    }\n\n  if (firstRun)\n    {\n      goalRadialPos = initRadialPos;\n      goalVerticalPos = initVerticalPos;\n      goalArmRotation = initArmRotation;\n      goalGripperRotation = initGripperRotation;\n      goalGripperPos = initGripperPos;\n      firstRun = false;\n      return;\n    }\n\n  static float maxSearchTime = 300.0f; // seconds we are allowed to search\n\n  static float armRotationStep = 15.0f;     // degrees between steps of the state search (arm rotation)\n  static float radialPosStep = 10000.0f;    // distance between steps of state search (radius)\n  static float armRotationScale = 1.0f/150.0f;   // amount to move by in theta based on image space \n  static float radialPosScale = 100.0f;          // amount to move by in radius based on image space\n\n  static float positionRadius = 50.0f; // once center of PB is in this radius, we are done\n  \n  static bool foundPB = false;\n  static high_level_controller::payloadBayState internalPBState; // used within this state; global state set when done\n  static float pbX, pbY; // image-space position of Payload Bay\n\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n\n  // starting with:\n  // * calibration data\n\n  // State logic:\n  // if !foundPB or internalPBState.pos.{r,z} not within radius\n  if ( !foundPB || abs(pbX) > positionRadius || abs(pbY) > positionRadius )\n    {\n      // get image Processor result\n      bool newTest = false;\n      image_processor::payloadBayStateFromImage pbStateImage;\n      if ( payloadBayStateFromImageClient.call(pbStateImage) )\n\t{\n\t  switch (pbStateImage.response.status)\n\t    {\n\t    case DETECTED:\n\t    case PARTIAL:\n\t      newTest = true;\n\t      ROS_INFO(\"FOUND PAYLOAD BAY: %d, %f , %f, %f\",\n\t\t       pbStateImage.response.status, \n\t\t       pbStateImage.response.x, \n\t\t       pbStateImage.response.y, \n\t\t       pbStateImage.response.angle);\n\t      break;\n\t    default: // covers the HIDDEN case too, already initialized to false\n\t      ROS_INFO(\"NO PAYLOAD BAY FOUND\");\n\t      break;\n\t    }\n\t  // if result has no detection:\n\t  if (!newTest)\n\t    {\n\t      if (!foundPB) // if never found PB:\n\t\t{\n\t\t  // increment arm rotation by arm rotation step\n\t\t  initArmRotation += armRotationStep;\n\t\t  if (initArmRotation > maxArmRotation)\n\t\t    {\n\t\t      initArmRotation = startSearchArmRotation;\n\t\t      initRadialPos += radialPosStep;\n\t\t      if (initRadialPos > maxRadialPos)\n\t\t\t{\n\t\t\t  initRadialPos = minRadialPos;\n\t\t\t}\n\t\t    }\n\n\t\t  goalRadialPos = initRadialPos;\n\t\t  goalVerticalPos = initVerticalPos;\n\t\t  goalArmRotation = initArmRotation;\n\t\t  goalGripperRotation = initGripperRotation;\n\t\t  goalGripperPos = initGripperPos;\n\t\t} else // else if found previously:\n\t\t{\n\t\t  // go half way between previous find location and current location\n\t\t  float previousArmRotation = internalPBState.pos.theta;\n\t\t  int previousRadialPos = internalPBState.pos.r;\n\n\t\t  goalRadialPos = (goalRadialPos + previousRadialPos) / 2.0f;\n\t\t  goalVerticalPos = initVerticalPos;\n\t\t  goalArmRotation = (goalArmRotation + previousArmRotation) / 2.0f;\n\t\t  goalGripperRotation = initGripperRotation;\n\t\t  goalGripperPos = initGripperPos;\n\t\t}\n\t    } else // else if result has detection:\n\t    {\n\t      // update internal variables\n\t      foundPB = true;\n\t      pbX = pbStateImage.response.x;\n\t      pbY = pbStateImage.response.y;\n\t      // update the internalPBState\n\t      internalPBState.pos.r = currentRadialPos;\n\t      internalPBState.pos.theta = currentArmRotation;\n\t      internalPBState.pos.z = currentVerticalPos;\n\t      internalPBState.orientation.theta = pbStateImage.response.angle;\n\t      // if the payload bay's current image-space position is within the allowable radius\n\t      if ( abs(pbX) <= positionRadius && abs(pbY) <= positionRadius ) \n\t\t{\n\t\t  // we're not setting the goals; so this state should get triggered again immediately\n\t\t  // and it will have:\n\t\t  // * foundPB=true; \n\t\t  // * pbX < positionRadius; \n\t\t  // * pbY < positionRadius \n\t\t  // so will transition to next state\n\t\t} else // need to center the payload bay\n\t\t{\n\t\t  // move to detected position (i.e. set goals to detected position)\n\t\t  // NOTE: IMAGE SPACE IS +Y = DOWN; THIS MEANS +Y -> CCW\n\t\t  // if pbY < 0 : rotate CW, else if pbY > 0 rotate CCW\n\t\t  if ( abs(pbY) > positionRadius )\n\t\t    {\n\t\t      initArmRotation += (pbY) * armRotationScale;\n\t\t      if ( initArmRotation > maxArmRotation )\n\t\t\tinitArmRotation = maxArmRotation;\n\t\t      if ( initArmRotation < minArmRotation )\n\t\t\tinitArmRotation = minArmRotation;\n\t\t    }\n\t\t  // NOTE: IMAGE SPACE IS +X = RETRACT RADIUS\n\t\t  // if pbX > 0 : retract radius, else if pbX < 0 extend radius\n\t\t  if ( abs(pbX) > positionRadius )\n\t\t    {\n\t\t      initRadialPos += (-pbX) * radialPosScale;\n\t\t      if ( initRadialPos > maxRadialPos )\n\t\t\tinitRadialPos = maxRadialPos;\n\t\t      if ( initRadialPos < minRadialPos )\n\t\t\tinitRadialPos = minRadialPos;\n\t\t    }\n\t\t  goalRadialPos = initRadialPos;\n\t\t  goalArmRotation = initArmRotation;\n\t\t}\n\t    }\n\t}\n      else // else client call to detector failed\n\t{\n\t  ROS_INFO(\"CLIENT CALL TO PAYLOAD BAY DETECTOR FAILED\");\n\t}\n    } else // else payload has been found and is within radius\n    {\n      // set component's PBState\n      payloadBay = internalPBState;\n      // transition to next state (GRABBING_SAMPLE)\n      currentState = GRABBING_SAMPLE;\n      stateChanged = true;\n    }\n}\n\nvoid armController::Grabbing_Sample_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n  static float sampleZPlane = sampleVerticalPos;\n  static bool atSample = false;\n  static bool grabbedSample = false;\n\n  // starting with:\n  // * known sample position\n  // * directly above sample\n\n  // State logic:\n  if ( !atSample )\n    {\n      // Take into account the offset between center of camera and center of gripper:\n      goalRadialPos = sample.pos.r + radiusBetweenGripperAndCamera;\n      float angleOffset = 0;\n      angleOffset = atan2( arcLengthBetweenGripperAndCamera, goalRadialPos ) * 180.0f / M_PI;\n      ROS_INFO(\"ANGLE OFFSET = %f\",angleOffset);\n      goalArmRotation = sample.pos.theta - angleOffset;\n      // Orient gripper to sample (based on sample.orientation.theta)\n      if ( sample.orientation.theta < 0 )\n\tsample.orientation.theta += 180.0f;\n      if ( sample.orientation.theta > 180.0f )\n\tsample.orientation.theta -= 180.0f;\n      goalGripperRotation = sample.orientation.theta + gripperRotationOffset;\n      if ( goalGripperRotation > 180.0f )\n\tgoalGripperRotation -= 180.0f;\n      // Go down to proper Z level for the sample\n      goalVerticalPos = sampleZPlane;\n      // Open The gripper\n      goalGripperPos = gripperPosOpened;\n      atSample = true;\n    } else if ( !grabbedSample )\n    {\n      // close gripper\n      goalGripperPos = gripperPosClosed;\n      grabbedSample = true;\n    } else\n    {\n      // move up some amount\n      goalVerticalPos = payloadBayVerticalPos - 10000;\n      // transition to next state (CARRYING_SAMPLE)\n      currentState = CARRYING_SAMPLE;\n      stateChanged = true;\n    }\n}\n\nvoid armController::Carrying_Sample_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n  static bool atPayloadBay = false;\n  static float payloadBayZPlane = payloadBayVerticalPos;\n\n  // starting with:\n  // * already have the sample\n  // * at max height\n  // * already know the position & orientation of the PB\n\n  // State Logic:\n  if ( !atPayloadBay )\n    {\n      // Go to Payload Bay's Radius and Angle\n      // Take into account the offset between center of camera and center of gripper:\n      goalRadialPos = payloadBay.pos.r + radiusBetweenGripperAndCamera;\n      float angleOffset = 0.0f;\n      angleOffset = atan2( arcLengthBetweenGripperAndCamera, goalRadialPos ) * 180.0f / M_PI;\n      ROS_INFO(\"ANGLE OFFSET = %f\",angleOffset);\n      goalArmRotation = payloadBay.pos.theta - angleOffset;\n      // change gripper rotation to payloadBay's orientation (payloadBay.orientation.theta)\n      if ( payloadBay.orientation.theta < 0 )\n      \tpayloadBay.orientation.theta += 180.0f;\n      if ( payloadBay.orientation.theta > 180.0f )\n      \tpayloadBay.orientation.theta -= 180.0f;\n      goalGripperRotation = payloadBay.orientation.theta + gripperRotationOffset;\n      //      goalGripperRotation = 100;\n      //goalArmRotation = 255;\n      //goalRadialPos = 253000;\n      atPayloadBay = true;\n    } else\n    {\n      // move down in Z to proper height for PB\n      goalVerticalPos = payloadBayZPlane;\n      //   goalVerticalPos = 161300;\n      // transition to next state (INSERTING_SAMPLE)\n      currentState = INSERTING_SAMPLE;\n      stateChanged = true;\n    }\n}\n\nvoid armController::Inserting_Sample_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n\n  // starting with:\n  // * payload is in gripper\n  // * directly above PB at appropriate height and orientation\n\n  // State Logic:\n  // Open Gripper (set gripper pos to open pos)\n  goalGripperPos = gripperPosOpened;\n  // transition to next state (CLOSING_PB)\n  currentState = CLOSING_PB;\n  stateChanged = true;\n}\n\nvoid armController::Closing_PB_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n\n  // starting with:\n  // * sample is in PB\n  // * directly above PB\n\n  // State logic:\n  // move up some amount (to max height)\n  goalVerticalPos = minVerticalPos;\n  // send the command to the PB through UART to close the PB,\n  payloadBayOpened = false;\n\n  // OPTIONAL : use image based detection to confirm PB closes\n  // transition to next state (MOVING_AWAY) if PB responds well\n  currentState = MOVING_AWAY;\n  stateChanged = true;\n}\n\nvoid armController::Moving_Away_StateFunc()\n{\n  // initialize static members for initial values of this state\n  //   e.g. where the search starts, what the goals of the state are, etc.\n  // perform any image processing required using the detector\n  // update the arm's goal variables based on the result of the image processing\n  // update the current state of the arm if necessary\n\n  // starting with:\n  // * sample is in PB\n  // * PB is closed\n  // * directly above PB at max height\n\n  // State logic:\n  // determine safe zone for arm (based on PB position)\n  float safeRotation;\n  safeRotation = payloadBay.pos.theta - 90.0f;\n  if ( safeRotation < minArmRotation || safeRotation > maxArmRotation )\n    safeRotation += 180.0f;\n  // move to safe zone\n  goalArmRotation = safeRotation;\n}",
                "Forwards": "#include \"objecttracker/detected_object.hpp\"\n#include \"dynamixel/SerialPort.h\"\n#include \"image_processor/payloadBayStateFromImage.h\"\n#include \"image_processor/sampleStateFromImage.h\"",
                "Initialization": "paused = true;\nusingSerialPort = true;\npayloadBayOpened = false;\nstateChanged = true;\ncurrentState = INIT;\n\n// need to initialize the offsets with measurements from the system\nradialOffset          = 0.0;\nverticalOffset        = 0.0;\narmRotationOffset     = 0.0f;\ngripperRotationOffset = 15.0f;\ngripperPosOffset      = 0.0f;\n\nsampleOrientationOffset = 0.0f;\n\n// need to initialize the offsets with measurements from the system\nradiusBetweenGripperAndCamera = 25000;\narcLengthBetweenGripperAndCamera = int(1.75f * 20000.0f);  // 2.5 inches * 20000 counts per inch\n\n// initialization of the z-plane for the payload bay and the sample\nsampleVerticalPos = 498550;\npayloadBayVerticalPos = 157660;\n\n// need to initialize the min and max sensor values\nmaxRadialPos       = 275000;\nmaxVerticalPos     = 495000;\nmaxArmRotation     = 330.0f;\nmaxGripperRotation = 180.0f;\nmaxGripperPos      = 260.0f;\n\nminRadialPos       = 0;\nminVerticalPos     = 0;\nminArmRotation     = 1.0f;\nminGripperRotation = 0.0f;\nminGripperPos      = 190.0f;\n\n// Safe gripper rotation; won't hit vertical stage\ngripperRotationSafe = 180.0f + gripperRotationOffset;\n\n// need to initialize the gripper's state sensor values\ngripperPosOpened = 250.0f;\ngripperPosClosed = 200.0f;\n\n// need to initialize the epsilons for the goal/current feedback loops\nradialEpsilon          = 100;\nverticalEpsilon        = 100;\narmRotationEpsilon     = 4.0f;\ngripperRotationEpsilon = 4.0f;\ngripperPosEpsilon      = 4.0f;\n\n// need to properly initialize the current sensor readings\ncurrentRadialPos        = -1.0;\ncurrentVerticalPos      = -1.0;\ncurrentArmRotation      = -1.0f;\ncurrentGripperRotation  = -1.0f;\ncurrentGripperPos       = -1.0f;\n\n// need to properly initialize the current actuator goals\ngoalRadialPos        = minRadialPos;\ngoalVerticalPos      = minVerticalPos;\ngoalArmRotation      = minArmRotation;\ngoalGripperRotation  = minGripperRotation;\ngoalGripperPos       = gripperPosOpened;\n\n// need to properly initialize the sample and payloadBay\nsample.pos.r     = -1.0f;\nsample.pos.theta = -1.0f;\nsample.pos.z     = -1.0f;\nsample.orientation.theta = -1.0f;\nsample.orientation.phi   = -1.0f;\n\npayloadBay.pos.r     = -1.0f;\npayloadBay.pos.theta = -1.0f;\npayloadBay.pos.z     = -1.0f;\npayloadBay.orientation.theta = -1.0f;\npayloadBay.orientation.phi   = -1.0f;\n\n// command line args parsing for arm_controller:\nfor (int i=0; i < node_argc; i++) \n{\n  if (!strcmp(node_argv[i], \"-unpaused\"))\n  {\n    paused = false;\n  }\n  if (!strcmp(node_argv[i], \"-noSerial\"))\n  {\n    usingSerialPort = false;\n  }\n  if (!strcmp(node_argv[i], \"-state\"))\n  {\n    currentState = (armController::ArmState)atoi(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-r\"))\n  {\n    goalRadialPos = atoi(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-theta\"))\n  {\n    goalArmRotation = atoi(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-z\"))\n  {\n    goalVerticalPos = atoi(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-gRot\"))\n  {\n    goalGripperRotation = atoi(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-gPos\"))\n  {\n    goalGripperPos = atoi(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-servoEpsilon\"))\n  {\n    armRotationEpsilon = atof(node_argv[i+1]);\n  }\n  if (!strcmp(node_argv[i], \"-samplePlane\"))\n  {\n    sampleVerticalPos = atoi(node_argv[i+1]);\n  }\n}\n// Jetson's USB-Serial Port for communicating with the ardunio\nsprintf(portName,\"//dev//ttyACM0\");\nint baudRate = 9600;\nif ( usingSerialPort )\n{\n  if (serialPort.connect(portName,baudRate)!=0)\n  {\n    ROS_INFO(\"OPENED SERIAL PORT\");\n  }\n  else\n  {\n    ROS_INFO(\"COULDN'T OPEN SERIAL PORT %s at %d\",portName,baudRate);\n  }\n}\n",
                "Members": "  bool paused;\n  bool usingSerialPort;\n  bool payloadBayOpened;\n  bool stateChanged;\n  enum ArmState\n    {\n      INIT = 0,\n      OPENING_PB = 1,\n      FINDING_SAMPLE = 2,\n      FINDING_PB = 3,\n      GRABBING_SAMPLE = 4,\n      CARRYING_SAMPLE = 5,\n      INSERTING_SAMPLE = 6,\n      CLOSING_PB = 7,\n      MOVING_AWAY = 8\n    };\n\n  void PrintCurrentState();\n  void UpdateSensorData();\n  void UpdateArmPosition();\n  bool CheckGoals();\n\n  ArmState currentState;\n  high_level_controller::armState arm;\n  high_level_controller::sampleState sample;\n  high_level_controller::payloadBayState payloadBay;\n\n  void Init_StateFunc();\n  void Finding_PB_StateFunc();\n  void Opening_PB_StateFunc();\n  void Finding_Sample_StateFunc();\n  void Grabbing_Sample_StateFunc();\n  void Carrying_Sample_StateFunc();\n  void Inserting_Sample_StateFunc();\n  void Closing_PB_StateFunc();\n  void Moving_Away_StateFunc();\n  \n  int maxRadialPos;\n  int maxVerticalPos;\n  float maxArmRotation;\n  float maxGripperRotation;\n  float maxGripperPos;\n\n  int minRadialPos;\n  int minVerticalPos;\n  float minArmRotation;\n  float minGripperRotation;\n  float minGripperPos;\n\n  float gripperRotationSafe;\n\n  float gripperPosOpened;\n  float gripperPosClosed;\n  \n  int currentRadialPos;\n  int currentVerticalPos;\n  float currentArmRotation;\n  float currentGripperRotation;\n  float currentGripperPos;\n\n  int goalRadialPos;\n  int goalVerticalPos;\n  float goalArmRotation;\n  float goalGripperRotation;\n  float goalGripperPos;\n\n  int radialEpsilon;\n  int verticalEpsilon;\n  float armRotationEpsilon;\n  float gripperRotationEpsilon;\n  float gripperPosEpsilon;\n\n  int radialOffset;   // should be 0\n  int verticalOffset; // should be 0\n  float armRotationOffset; // difference between our 0 angle (arm frame) and servo's 0 angle\n  float gripperRotationOffset; // difference between our 0 angle (plane of radius) and servo's 0 angle\n  float gripperPosOffset; // difference between our 0 angle (open) and the servo's 0 angle\n\n  float sampleOrientationOffset;  // difference between angle gotten from image and gripper angle\n\n  // offsets measured between center of camera image and the center underneath the gripper (r,theta)\n  int arcLengthBetweenGripperAndCamera;\n  int radiusBetweenGripperAndCamera;\n\n  // presets for the z-plane on which the sample and payload bay will lie (will be different)\n  int sampleVerticalPos;\n  int payloadBayVerticalPos;\n\n  // serial port we use on the Jetson TK1 for reading from / writing to the payload bay\n  SerialPort serialPort;\n  char portName[50];\n",
                "name": "armController"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "83f33549-7a85-a619-35b2-b18209fdda9d",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 509,
                    "y": 241
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "7dd6c967-4043-a173-2548-d357b944b810",
                        "registry": {
                            "position": {
                                "x": 622,
                                "y": 199
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "d5367025-51d7-5b40-bcc6-664ee22902e4",
                        "registry": {
                            "position": {
                                "x": 623,
                                "y": 135
                            }
                        }
                    }
                ]
            }
        },
        "8c2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "ff357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "8c5166ed-ded6-b1af-279f-ba01d0aff3fc": {
            "attributes": {
                "name": "lo"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "ba0b9e89-2b1a-6163-aeac-8b1884e7638b",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 712,
                    "y": 223
                }
            },
            "sets": {}
        },
        "8e2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "fd357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "8ed56a84-1f2b-cf95-c812-e0a6f8646438": {
            "attributes": {
                "name": "sampleStatePublisher"
            },
            "base": "0066ce30-e372-bb27-23c3-219c7d934553",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Message": "2acb9167-ab2a-9164-a638-972a058f218c",
                "base": "0066ce30-e372-bb27-23c3-219c7d934553"
            },
            "registry": {
                "position": {
                    "x": 571,
                    "y": 168
                }
            },
            "sets": {}
        },
        "8f76797c-3114-7740-e093-71d15765f2b3": {
            "attributes": {
                "name": "payloadBayStateFromImageClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "bf3c5759-8b0e-c5a7-7666-e3d42038bc48",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 860,
                    "y": 313
                }
            },
            "sets": {}
        },
        "8ff74691-1535-f037-068b-52df355dd0bd": {
            "attributes": {
                "Operation": "  sample_rawImage = Mat(received_data->height, \n\t\t\treceived_data->width, \n\t\t\tCV_8UC3, \n\t\t\tconst_cast<unsigned char*>(received_data->rawImgVector.data()));\n\n  sample_hsvImage = Mat(received_data->height, \n\t\t\treceived_data->width, \n\t\t\tCV_8UC3, \n\t\t\tconst_cast<unsigned char*>(received_data->hsvThreshImgVector.data()));\n\n  sample_gsImage = Mat(received_data->height, \n\t\t       received_data->width, \n\t\t       CV_8UC3, \n\t\t       const_cast<unsigned char*>(received_data->gsThreshImgVector.data()));\n  \n  sample_bitwise = Mat(received_data->height, \n\t\t       received_data->width, \n\t\t       CV_8UC3, \n\t\t       const_cast<unsigned char*>(received_data->bitwiseAndImgVector.data()));\n\n  top_left = cvCreateImage(cvSize(sample_rawImage.cols, sample_rawImage.rows), 8, 3);\n  IplImage ipltemp = sample_rawImage;\n  cvCopy(&ipltemp, top_left);",
                "name": "sampleDetectionImagesSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1",
            "pointers": {
                "Message": "d2401091-4e08-04c7-a9a2-d668fb6ea4df",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 641,
                    "y": 268
                }
            },
            "sets": {}
        },
        "90357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node29"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 248,
                    "y": 2041
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "9109804a-d102-0849-9ad7-b2411f3ce732": {
            "attributes": {
                "Directory": "/home/ubuntu",
                "Key": "/home/jeb/.ssh/id_rsa_jetsontk1",
                "name": "ubuntu"
            },
            "base": "984baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "984baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 1063,
                    "y": 50
                }
            },
            "sets": {}
        },
        "92357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node21"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 250,
                    "y": 1529
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "93f48121-6fe3-48ed-0cdc-dc9db647b01a": {
            "attributes": {
                "Operation": "if (!paused)\n{\n  image_processor::captureImage arg;\n  if (this->captureImageClient.call(arg)) {\n    //\tROS_INFO(\"Image width: %d, height: %d, size: %d\", \n    //\t\t arg.response.width,\n    //\t\t arg.response.height,\n    //\t\t arg.response.imgVector.size());\n    Mat image = Mat( arg.response.height, \n                    arg.response.width, \n                    CV_8UC3, \n                    arg.response.imgVector.data());\n    Mat detectedObjectsMask = Mat::zeros(image.size(), CV_8UC3);\n    // NEED TO GET RETURN VALUES ABOUT DETECTED SAMPLE HERE\n    DetectedObject sample =\n      sampleDetector.run(image,detectedObjectsMask,\"autonomous_S\"); \n    //\tROS_INFO(\"Sample: %d, (%f,%f), %f\",sample.state, sample.x, sample.y, sample.angle);\n    cv::imwrite(\"Sample-01-Raw.png\", image+detectedObjectsMask);\n    cv::Mat sample_detected_image = image + detectedObjectsMask; \n    if ( sample.x >= 0 && sample.x <= arg.response.width &&\n        sample.y >= 0 && sample.y <= arg.response.height )\n    {\n      res.status = sample.state;\n      res.x = sample.x - arg.response.width / 2;   // convert [0,w] -> [-w/2,w/2]\n      res.y = sample.y - arg.response.height / 2;  // convert [0,h] -> [-h/2,h/2]\n      res.angle = sample.angle;\n    }\n    else\n      res.status = HIDDEN;\n    return true;\n  }\n  else {\n    ROS_INFO(\"ERROR: Client call failed; couldn't get image.\");\n  }\n}\nreturn false;\n",
                "name": "sampleStateFromImageServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb",
            "pointers": {
                "Service": "75973fe4-d007-56ab-2df2-483fac45138c",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 216,
                    "y": 263
                }
            },
            "sets": {}
        },
        "94dc4ba7-0a9c-f078-310f-cf1f2bf7bbe7": {
            "attributes": {
                "Operation": "image_processor::captureImage arg;\nMat camera_feed;\n\nif (this->captureImageClient.call(arg)) {\n\n  ROS_INFO(\"Capture Image Client Call Successful; Height: %d, Width: %d \", arg.response.height, arg.response.width);\n\n  camera_feed = Mat(arg.response.height, \n                    arg.response.width, \n                    CV_8UC3, \n                    arg.response.imgVector.data());\n\n  // Mat to IplImage *\n  IplImage ipltemp = camera_feed;\n  cvCopy(&ipltemp, processed_image);\n  cvResize(processed_image, Mode_1);\n  cvShowImage( \"UIP\", Mode_1);\n  cvNamedWindow( \"UIP\", 1 );\n  cvSetWindowProperty(\"UIP\", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);\n}\n\nkey = 0;\nkey = cvWaitKey(1);\n\n// RAW CAMERA FEED\nif (key == 65361) {\n  ROS_INFO(\"Mode 1 Activated\");\n  cvShowImage( \"UIP\", Mode_1);\n}\n/*\n  // SAMPLE PROCESSED IMAGE\n  else if (key == 65363) {\n    ROS_INFO(\"Mode 2 Activated\");\n\n    // Mat to IplImage *\n    processed_image = cvCreateImage(cvSize(sample_rawImage.cols, sample_rawImage.rows), 8, 3);\n    IplImage ipltemp = sample_rawImage;\n    cvCopy(&ipltemp, processed_image);\n\n    cvResize(processed_image, Mode_2);\n    cvShowImage( \"UIP\", Mode_2);\n    cvNamedWindow( \"UIP\", 1 );\n    cvSetWindowProperty(\"UIP\", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);\n    key = 0;\n\n  }\n\n  else if (key == 65362) {\n\n    ROS_INFO(\"Mode 3 Activated\");\n\n    // Mat to IplImage *\n    processed_image = cvCreateImage(cvSize(pb_rawImage.cols, pb_rawImage.rows), 8, 3);\n    IplImage ipltemp = pb_rawImage;\n    cvCopy(&ipltemp, processed_image);\n\n    cvResize(processed_image, Mode_3);\n    cvShowImage( \"UIP\", Mode_3);\n    cvNamedWindow( \"UIP\", 1 );\n    cvSetWindowProperty(\"UIP\", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);\n    key = 0;\n  }\n\n  else if (key == 65364) {\n\n    ROS_INFO(\"Mode 4 Activated\"); \n\n    // Mat to IplImage *\n    processed_image = cvCreateImage(cvSize(pb_gsImage.cols, pb_gsImage.rows), 8, 3);\n    IplImage ipltemp = pb_gsImage;\n    cvCopy(&ipltemp, processed_image);\n\n    cvResize(processed_image, Mode_4);\n    cvShowImage( \"UIP\", Mode_4);\n    cvNamedWindow( \"UIP\", 1 );\n    cvSetWindowProperty(\"UIP\", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);\n    key = 0;\n  }\n\n  else if (key == 13) {\n\n    ROS_INFO(\"Mode 5 Activated\");\n    cvShowManyImages(\"UIP\", 4, top_left, top_right, bottom_left, bottom_right);\n    key = 0;\n  }\n  */\nelse {\n  ROS_INFO(\"No Mode Activated\");\n  cvShowImage( \"UIP\", Mode_1);\n}\n",
                "name": "userDisplayTimer"
            },
            "base": "0f474808-eadf-a345-7ee9-7279326aab1e",
            "meta": {},
            "parent": "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1",
            "pointers": {
                "base": "0f474808-eadf-a345-7ee9-7279326aab1e"
            },
            "registry": {
                "position": {
                    "x": 439,
                    "y": 298
                }
            },
            "sets": {}
        },
        "984baea9-4feb-5630-81f3-085218530d89": {
            "attributes": {
                "Directory": "/home/$name",
                "Key": "~/.ssh/id_rsa",
                "name": "User"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Key": {
                        "type": "string"
                    },
                    "Directory": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/user.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 979,
                    "y": 519
                }
            },
            "sets": {}
        },
        "99357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node9"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 246,
                    "y": 711
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "99ea1844-3957-5ba6-7fa8-df10bec27d3e": {
            "attributes": {
                "Directory": "/home/debian",
                "Key": "/home/jeb/.ssh/id_rsa_jetsontk1",
                "name": "debian"
            },
            "base": "984baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "984baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 615,
                    "y": 106
                }
            },
            "sets": {}
        },
        "9b357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node1"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 250,
                    "y": 154
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "9c50fc4a-3e84-5cb0-812e-59460da120f2": {
            "attributes": {
                "IP": "0.0.0.0",
                "NetworkProfile": "",
                "name": "Link"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "IP": {
                        "type": "string"
                    },
                    "NetworkProfile": {
                        "type": "string"
                    }
                },
                "pointers": {
                    "dst": {
                        "items": [
                            "36d534c1-207e-1c52-5336-c74ff256793f"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    },
                    "src": {
                        "items": [
                            "e400d5b7-c955-fc81-382e-2c414b44fc20"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
                "dst": null,
                "src": null
            },
            "registry": {
                "DisplayFormat": "$IP",
                "position": {
                    "x": 609,
                    "y": 539
                }
            },
            "sets": {}
        },
        "9c9bbae3-dc41-51ba-4cf5-e29562b4b28a": {
            "attributes": {
                "name": "armRotationClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "0880f4eb-1dea-2d26-2dfd-1e735a3e739b",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 398,
                    "y": 315
                }
            },
            "sets": {}
        },
        "9ec1ad14-ca6f-6895-63a1-6c501f97a49a": {
            "attributes": {
                "Definitions": "#include <stdlib.h>",
                "Destruction": "",
                "Forwards": "#include <stdlib.h>\n#include \"bbbgpio/gpio.h\"\n#include \"bbbeqep/eqep.h\"",
                "Initialization": "  paused = true;\n  lowerLimitReached = false;\n\n  // THESE NEED TO BE UPDATED\n  epsilon = 100;\n  motorForwardPin = 87; //88;     // connected to GPIO2_24, pin P8_28\n  motorBackwardPin = 86; //89;    // connected to GPIO2_25, pin P8_30\n  lowerLimitSwitchPin = 27;       // connected to GPIO0_27, pin P8_17\n  \n  adcPin = 0;  // connected to ADC0, pin P9_39\n\n  // set up the pins to control the h-bridge\n  gpio_export(motorForwardPin);\n  gpio_export(motorBackwardPin);\n  gpio_export(lowerLimitSwitchPin);\n  gpio_set_dir(motorForwardPin,OUTPUT_PIN);\n  gpio_set_dir(motorBackwardPin,OUTPUT_PIN);\n  gpio_set_dir(lowerLimitSwitchPin,INPUT_PIN);\n  // set up the encoder module\n  rm_eqep_period = 1000000000L;\n  radialMotoreQEP.initialize(\"/sys/devices/ocp.3/48304000.epwmss/48304180.eqep\", eQEP::eQEP_Mode_Absolute);\n  radialMotoreQEP.set_period(rm_eqep_period);\n\n  // Command line args for radial goal\n  for (int i = 0; i < node_argc; i++)\n    {\n      if (!strcmp(node_argv[i], \"-unpaused\"))\n\t{\n\t  paused = false;\n\t}\n      if (!strcmp(node_argv[i], \"-r\"))\n\t{\n\t  radialGoal = atoi(node_argv[i+1]);\n\t}\n      if (!strcmp(node_argv[i], \"-e\"))\n\t{\n\t  epsilon = atoi(node_argv[i+1]);\n\t}\n    }\n\n  ROS_INFO(\"RADIAL GOAL SET TO : %d\",radialGoal);\n\n",
                "Members": "  // paused variable which is controlled by the pause switch\n  bool paused;\n  // epsion value for minimum actionable difference between goal and current\n  int epsilon;\n  // goal position for the radial linear actuator\n  int radialGoal;\n  // current position of the radial linear actuator\n  int radialCurrent;\n  // pin that motor forward is connected to\n  unsigned int motorForwardPin;\n  // pin that motor backward is connected to\n  unsigned int motorBackwardPin;\n  // pin that lowerLimitSwitch is connected to\n  unsigned int lowerLimitSwitchPin;\n  // state variable to keep track of whether we've reached the limit or not\n  bool lowerLimitReached;\n  // ADC the motor potentiometer is connected to (for the prototype)\n  int adcPin;\n  // enhanced quadrature encoder pulse module for the radial actuator\n  eQEP radialMotoreQEP;\n  long rm_eqep_period;",
                "name": "radialController"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 486,
                    "y": 116
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "8a20c8ac-2b78-609a-aebe-175f8964c890",
                        "registry": {
                            "position": {
                                "x": 393,
                                "y": 368
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c29ad503-417a-f40a-28da-57503f809a90",
                        "registry": {
                            "position": {
                                "x": 393,
                                "y": 257
                            }
                        }
                    }
                ]
            }
        },
        "a0aedc6c-26be-58cb-4c99-7cb20a0772ce": {
            "attributes": {},
            "base": "fe2f7057-8238-2032-4e6b-3012e0a4ea85",
            "meta": {},
            "parent": "8bc323b4-a4eb-abcd-b7a2-f710630dce1c",
            "pointers": {
                "base": "fe2f7057-8238-2032-4e6b-3012e0a4ea85"
            },
            "registry": {
                "position": {
                    "x": 134,
                    "y": 443
                }
            },
            "sets": {}
        },
        "a14ea363-cf12-dc75-fef2-48cc7b40fb6b": {
            "attributes": {
                "name": "Local"
            },
            "base": "df437d49-a83e-6944-62ed-52fd3dcf806d",
            "meta": {},
            "parent": "04fdc95b-f567-260d-dc01-d41068d3367b",
            "pointers": {
                "base": "df437d49-a83e-6944-62ed-52fd3dcf806d"
            },
            "registry": {
                "position": {
                    "x": 360,
                    "y": 283
                }
            },
            "sets": {}
        },
        "a361e083-c5a2-be94-f0c4-e157912d2d77": {
            "attributes": {
                "Detailed": "Simple Client Server example demonstrating how to define and use ROS services in a software model.",
                "name": "Client Server"
            },
            "base": "a83b8adb-232e-4f68-ca06-3ee2c728765b",
            "meta": {},
            "parent": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
            "pointers": {
                "base": "a83b8adb-232e-4f68-ca06-3ee2c728765b"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "a377ee64-9293-7b02-03c2-508ee3e4ed74": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "47725ce0-f096-ea93-a507-004673d77790",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 242,
                    "y": 269
                }
            },
            "sets": {}
        },
        "a40d3a67-e6b2-043a-c7e3-3041d1475d11": {
            "attributes": {
                "IP": "10.1.1.2"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "e25ad296-2547-7c6a-ad35-e79b3d417157",
                "src": "8b77ee64-9293-7b02-03c2-508ee3e4ed74"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "a42d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "d7357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "a4a3211d-4379-d33e-a070-7c38f71754ea": {
            "attributes": {
                "IP": "10.1.1.12"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "5f2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "a62d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "d5357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "a755c03e-6812-2249-d918-920af2dea6b1": {
            "attributes": {
                "Operation": "if (!paused)\n{\n  UpdateSensorData();\n  switch (currentState)\n  {\n    case INIT:\n    Init_StateFunc();\n    break;\n    case FINDING_PB:\n    if ( CheckGoals() )\n      Finding_PB_StateFunc();\n    UpdateArmPosition();\n    break;\n    case OPENING_PB:\n    Opening_PB_StateFunc();\n    UpdateArmPosition();\n    break;\n    case FINDING_SAMPLE:\n    if ( CheckGoals() )\n      Finding_Sample_StateFunc();\n    UpdateArmPosition();\n    break;\n    case GRABBING_SAMPLE:\n    if ( CheckGoals() )\n      Grabbing_Sample_StateFunc();\n    UpdateArmPosition();\n    break;\n    case CARRYING_SAMPLE:\n    if ( CheckGoals() )\n      Carrying_Sample_StateFunc();\n    UpdateArmPosition();\n    break;\n    case INSERTING_SAMPLE:\n    if ( CheckGoals() )\n      Inserting_Sample_StateFunc();\n    UpdateArmPosition();\n    break;\n    case CLOSING_PB:\n    if ( CheckGoals() )\n      Closing_PB_StateFunc();\n    UpdateArmPosition();\n    break;\n    case MOVING_AWAY:\n    if ( CheckGoals() )\n      Moving_Away_StateFunc();\n    UpdateArmPosition();\n    break;\n    default:\n    break;\n  }\n  if ( stateChanged )\n  {\n    PrintCurrentState();\n    stateChanged = false;\n  }\n  sampleStatePublisher.publish(sample);\n  payloadBayStatePublisher.publish(payloadBay);\n  arm.state = currentState;\n  armStatePublisher.publish(arm);\n  if ( usingSerialPort )\n  {\n    char buffer[20];\n    if ( payloadBayOpened )\n    {\n      sprintf(buffer,\"%s\",openPayloadBayString);\n    }\n    else\n    {\n      sprintf(buffer,\"%s\",closePayloadBayString);\n    }\n    serialPort.sendArray((unsigned char *)buffer,strlen(buffer));\n  }\n}\n",
                "name": "armTimer"
            },
            "base": "0f474808-eadf-a345-7ee9-7279326aab1e",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "base": "0f474808-eadf-a345-7ee9-7279326aab1e"
            },
            "registry": {
                "position": {
                    "x": 195,
                    "y": 208
                }
            },
            "sets": {}
        },
        "a83b8adb-232e-4f68-ca06-3ee2c728765b": {
            "attributes": {
                "name": "Project"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "2562febd-1839-d9fe-3b97-0a0548314d85",
                        "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9",
                        "6eee186c-a14e-3be3-d7b1-7fa840843c05",
                        "fe2f7057-8238-2032-4e6b-3012e0a4ea85"
                    ],
                    "minItems": [
                        1,
                        1,
                        1,
                        1
                    ],
                    "maxItems": [
                        1,
                        1,
                        1,
                        1
                    ]
                },
                "mixins": [
                    "eecf10d5-1ea4-b2f5-5342-4b3dc960899c"
                ]
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/project.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 510,
                    "y": 158
                }
            },
            "sets": {}
        },
        "a9958819-7856-4774-1ef4-934c974095af": {
            "attributes": {
                "Operation": "  if (req.update == true)\n    {\n      armRotationGoal = req.goal;\n    }\n  res.current = armRotationCurrent;\n  return true;",
                "name": "armRotationServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f",
            "pointers": {
                "Service": "0880f4eb-1dea-2d26-2dfd-1e735a3e739b",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 402,
                    "y": 124
                }
            },
            "sets": {}
        },
        "ad2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "de357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "ad688a62-aeb6-e1e6-31a2-573db6aee77c": {
            "attributes": {
                "IP": "10.1.1.16"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "7c2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "ad77ee64-9293-7b02-03c2-508ee3e4ed74": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "49725ce0-f096-ea93-a507-004673d77790",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 242,
                    "y": 269
                }
            },
            "sets": {}
        },
        "ae4baea9-4feb-5630-81f3-085218530d89": {
            "attributes": {
                "Architecture": "armv7l",
                "OS": "Linux",
                "name": "Host"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "e400d5b7-c955-fc81-382e-2c414b44fc20"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                },
                "attributes": {
                    "OS": {
                        "type": "string"
                    },
                    "Architecture": {
                        "type": "string"
                    }
                },
                "pointers": {
                    "Users": {
                        "items": [
                            "984baea9-4feb-5630-81f3-085218530d89"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            -1
                        ]
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/computer.svg",
                "position": {
                    "x": 839,
                    "y": 519
                }
            },
            "sets": {
                "Users": []
            }
        },
        "af2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "dc357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "b0326662-28a6-3f54-d802-de46fa7dd357": {
            "attributes": {
                "IP": "10.1.1.2"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "8e2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "b1357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node17"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 249,
                    "y": 1277
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "b19a7df1-b77a-fea6-b7f9-4cf640560c39": {
            "attributes": {
                "name": "JetsonTK1"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 1023,
                    "y": 180
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "9109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 589,
                                "y": 255
                            }
                        }
                    }
                ]
            }
        },
        "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f": {
            "attributes": {
                "Definitions": "",
                "Destruction": "",
                "Forwards": "#include <stdlib.h>\n#include \"dynamixel/Dynamixel.h\"\n#include \"dynamixel/SerialPort.h\"",
                "Initialization": "  paused = true;\n  sprintf(portName,\"//dev//ttyO5\");\n  armServoID = 10;\n  gripperRotationID = 11;\n  gripperPositionID = 1;\n\n  armServoSpeed = 20; // half speed; full speed is either 0 or 1023\n  gripperRotationSpeed = 0;\n  gripperPositionSpeed = 0;\n\n  complianceMargin = 90;\n  complianceSlope = 5;\n\n  int iGain = 8;\n\n  if (serialPort.connect(portName,9600)!=0)\n    {\n      int pos;\n      // ARM SERVO \n      pos = dynamixel.getPosition(&serialPort, armServoID);\n      //      ROS_INFO(\"Arm base servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      armRotationGoal = Dynamixel::posToAngle_28T(pos);\n\n      // GRIPPER ROTATION SERVO\n      pos = dynamixel.getPosition(&serialPort, gripperRotationID);\n      //      ROS_INFO(\"Gripper rotation servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      gripperRotationGoal = Dynamixel::posToAngle(pos);\n    \n      // GRIPPER POSITION SERVO\n      pos = dynamixel.getPosition(&serialPort, gripperPositionID);\n      //      ROS_INFO(\"Gripper position servo angle: %f\\n\",Dynamixel::posToAngle(pos));\n      gripperPosGoal = Dynamixel::posToAngle(pos);\n\n      // Command line args for servo control\n      for (int i = 0; i < node_argc; i++) \n\t{\n\t  if (!strcmp(node_argv[i], \"-unpaused\"))\n\t    paused = false;\n\t  else if (!strcmp(node_argv[i], \"-theta\"))\n\t    armRotationGoal = atof(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-gRot\"))\n\t    gripperRotationGoal = atof(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-gPos\"))\n\t    gripperPosGoal = atof(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-armSpeed\"))\n\t    armServoSpeed = atoi(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-margin\"))\n\t    complianceMargin  = atoi(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-slope\"))\n\t    complianceSlope = atoi(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-gRotSpeed\"))\n\t    gripperRotationSpeed = atoi(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-gPosSpeed\"))\n\t    gripperPositionSpeed = atoi(node_argv[i+1]);\n\t  else if (!strcmp(node_argv[i], \"-iGain\"))\n\t    iGain = atoi(node_argv[i+1]);\n\t}\n\n      //dynamixel.setSpeed(&serialPort, armServoID, armServoSpeed);\n      //dynamixel.setSpeed(&serialPort, gripperRotationID, gripperRotationSpeed);\n      //dynamixel.setSpeed(&serialPort, gripperPositionID, gripperPositionSpeed);\n\n      // Setting a compliance margin\n      // Min: 0; Max: 254\n      // for MX28T the CWComplianceMargin is the D gain\n      dynamixel.setCWComplianceMargin(&serialPort, armServoID, complianceMargin);\n      dynamixel.setCCWComplianceMargin(&serialPort, armServoID, iGain);\n      dynamixel.setCWAngleLimit(&serialPort, armServoID, 1);\n      dynamixel.setCCWAngleLimit(&serialPort, armServoID, 4095);\n      //dynamixel.setCCWComplianceMargin(&serialPort, armServoID, complianceMargin);\n      //dynamixel.setCWComplianceMargin(&serialPort, gripperRotationID, complianceMargin);\n      //dynamixel.setCCWComplianceMargin(&serialPort, gripperRotationID, complianceMargin);\n      //dynamixel.setCWComplianceMargin(&serialPort, gripperPositionID, complianceMargin);\n      //dynamixel.setCCWComplianceMargin(&serialPort, gripperPositionID, complianceMargin);\n\n      //dynamixel.setCWComplianceSlope(&serialPort, armServoID, complianceSlope);\n      //dynamixel.setCCWComplianceSlope(&serialPort, armServoID, complianceSlope);\n    }\n  else\n    {\n      ROS_INFO (\"Can't open serial port %s\", portName);\n    } ",
                "Members": "  bool paused;\n\n  // serial port we use on the BBB\n  SerialPort serialPort;\n  char portName[50];\n  // object for reading/writing to AX-12A servos\n  Dynamixel dynamixel;\n\n  // IDs for the servo motors\n  int armServoID;\n  int gripperRotationID;\n  int gripperPositionID;\n\n  // speeds for the servo motors\n  int armServoSpeed;\n  int gripperRotationSpeed;\n  int gripperPositionSpeed;\n\n  // compliance margin\n  int complianceMargin;\n  // compliance slope\n  int complianceSlope;\n\n  // goal Position for the arm servo\n  float armRotationGoal;\n  // current position of the arm servo\n  float armRotationCurrent;\n\n  // goal Position for the gripperRotation servo\n  float gripperRotationGoal;\n  // current position of the gripperRotation servo\n  float gripperRotationCurrent;\n\n  // goal Position for the gripperPos servo\n  float gripperPosGoal;\n  // current position of the gripperPos servo\n  float gripperPosCurrent;",
                "name": "rotationController"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 489,
                    "y": 467
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "d5367025-51d7-5b40-bcc6-664ee22902e4",
                        "registry": {
                            "position": {
                                "x": 621,
                                "y": 276
                            }
                        }
                    }
                ]
            }
        },
        "b3357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node25"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 248,
                    "y": 1790
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "b4ad8902-a012-9b67-be2b-2af12cdefa37": {
            "attributes": {
                "IP": "10.1.1.20"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "772d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb": {
            "attributes": {
                "Forwards": "#include \"objecttracker/sample_detector.hpp\"\n#include \"objecttracker/payloadbay_detector.hpp\"",
                "Initialization": "paused = true;\n// initialize both the sample detector code\n// and the payload bay (marker) detector code\nsampleDetector.init();\npayloadBayDetector.init( 0.75f, \"/home/ubuntu/camera.yml\");\n\n// Command line args for image processor\nfor (int i = 0; i < node_argc; i++)\n{\n  if (!strcmp(node_argv[i], \"-unpaused\"))\n  {\n    paused = false;\n  }\n  if (!strcmp(node_argv[i], \"-detect\"))\n  {\n    image_processor::captureImage arg;\n    if (this->captureImageClient.call(arg)) {\n      //\t      ROS_INFO(\"Image width: %d, height: %d, size: %d\", \n      //\t\t       arg.response.width,\n      //\t       arg.response.height,\n      //       arg.response.imgVector.size());\n      Mat image = Mat( arg.response.height, \n                      arg.response.width, \n                      CV_8UC3, \n                      arg.response.imgVector.data());\n      Mat detectedObjectsMask = Mat::zeros(image.size(), CV_8UC3);\n      DetectedObject sample = \n        sampleDetector.run( image,\n                           detectedObjectsMask); \n      DetectedObject payloadBay =\n        payloadBayDetector.run( image,\n                               detectedObjectsMask); \n      cv::imwrite(\"Sample-01-Raw.png\", image+detectedObjectsMask);\n      ROS_INFO(\"Sample: %d, (%f,%f), %f\",sample.state, sample.x, sample.y, sample.angle);\n      ROS_INFO(\"PayloadBay: %d, (%f,%f), %f\",payloadBay.state, payloadBay.x, payloadBay.y, payloadBay.angle);\n    }\n  }\n}\n",
                "Members": "  bool paused;\n  Sample_Detector sampleDetector;\n  PayloadBay_Detector payloadBayDetector;",
                "name": "imageProcessor"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 936,
                    "y": 111
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "4d5526bf-5772-cc61-a03d-36ff99280a1f",
                        "registry": {
                            "position": {
                                "x": 549,
                                "y": 218
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "7dd6c967-4043-a173-2548-d357b944b810",
                        "registry": {
                            "position": {
                                "x": 549,
                                "y": 148
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c2d1d475-839e-2efe-b48c-410517c4532c",
                        "registry": {
                            "position": {
                                "x": 550,
                                "y": 278
                            }
                        }
                    }
                ]
            }
        },
        "b8357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node5"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 247,
                    "y": 433
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "ba0b9e89-2b1a-6163-aeac-8b1884e7638b": {
            "attributes": {
                "Architecture": "x86_64",
                "name": "Localhost"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "a14ea363-cf12-dc75-fef2-48cc7b40fb6b",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 272,
                    "y": 245
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "c40895ae-00a8-9a6d-8907-36175a362c97",
                        "registry": {
                            "position": {
                                "x": 544,
                                "y": 274
                            }
                        }
                    }
                ]
            }
        },
        "ba357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node13"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 247,
                    "y": 1008
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "ba80db39-e4f4-0e84-a57a-02abf337529e": {
            "attributes": {
                "IP": "10.1.1.32"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "562d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1": {
            "attributes": {
                "Forwards": "#include <opencv/cv.h>\n#include <opencv/highgui.h>\nusing namespace cv;\n\n\n#include <opencv/cv.h>\n#include <opencv/highgui.h>\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <ctime>\n\n#include <iostream>\n#include <fstream>\nusing namespace std;\nIplImage *DispImage;\nIplImage *Mode_1;    \nIplImage *Mode_2;    \nIplImage *Mode_3;    \nIplImage *Mode_4;    \n\nvoid cvShowManyImages(char* title, int nArgs, ...) {\n\n  // img - Used for getting the arguments \n  IplImage *img;\n\n  int size;\n  int i;\n  int m, n;\n  int x, y;\n\n  // w - Maximum number of images in a row \n  // h - Maximum number of images in a column \n  int w, h;\n\n  // scale - How much we have to resize the image\n  float scale;\n  int max;\n\n  // If the number of arguments is lesser than 0 or greater than 12\n  // return without displaying \n  if(nArgs <= 0) {\n    printf(\"Number of arguments too small....\\n\");\n    return;\n  }\n  else if(nArgs > 12) {\n    printf(\"Number of arguments too large....\\n\");\n    return;\n  }\n  \n  // Determine the size of the image, \n  // and the number of rows/cols \n  // from number of arguments \n  else if (nArgs == 1) {\n    w = h = 1;\n    size = 300;\n  }\n  else if (nArgs == 2) {\n    w = 2; h = 1;\n    size = 300;\n  }\n  else if (nArgs == 3 || nArgs == 4) {\n    w = 2; h = 2;\n    size = 400;\n  }\n  else if (nArgs == 5 || nArgs == 6) {\n    w = 3; h = 2;\n    size = 200;\n  }\n  else if (nArgs == 7 || nArgs == 8) {\n    w = 4; h = 2;\n    size = 200;\n  }\n  else {\n    w = 4; h = 3;\n    size = 150;\n  }\n\n  // Create a new 3 channel image\n  DispImage = cvCreateImage( cvSize(800, 480), 8, 3);\n  //  DispImage = cvCreateImage( cvSize(100 + size*w, 60 + size*h), 8, 3 );\n\n  // Used to get the arguments passed\n  va_list args;\n  va_start(args, nArgs);\n\n  // Loop for nArgs number of arguments\n  for (i = 0, m = 1, n = 1; i < nArgs; i++, m += 400) {\n    // Get the Pointer to the IplImage\n    img = va_arg(args, IplImage*);\n\n    // Check whether it is NULL or not\n    // If it is NULL, release the image, and return\n    if(img == 0) {\n      printf(\"Invalid arguments\");\n      cvReleaseImage(&DispImage);\n      return;\n    }\n\n    // Find the width and height of the image\n    x = img->width;\n    y = img->height;\n  \n    // Find whether height or width is greater in order to resize the image\n    max = (x > y)? x: y;\n\n    // Find the scaling factor to resize the image\n    scale = (float) ( (float) max / size );\n\n    // Used to Align the images\n    if( i % w == 0 && m!= 1) {\n      m = 1;\n      n+= 245;\n    }\n\n    // Set the image ROI to display the current image\n    cvSetImageROI(DispImage, cvRect(m, n, (int)( x/scale ), (int)( y/scale )));\n\n    // Resize the input image and copy the it to the Single Big Image\n    cvResize(img, DispImage);\n\n    // Reset the ROI in order to display the next image\n    cvResetImageROI(DispImage);\n  }\n\n  // Create a new window, and show the Single Big Image\n  cvNamedWindow( title, 1 );\n  cvSetWindowProperty(title, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);\n\n  \n  // Add font to image\n  CvFont sample_font = cvFontQt(\"Arial\", 24, cvScalar(255, 0, 0), CV_FONT_BLACK, CV_STYLE_NORMAL, 0);\n  CvFont sample_state = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_state_value = cvFontQt(\"Arial\", 16, cvScalar(0, 0, 255), CV_FONT_BLACK, CV_STYLE_NORMAL, 0);\n  CvFont sample_center = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_center_value = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_radius = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_radius_value = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_angle = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_angle_value = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_depth = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont sample_depth_value = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n\n  CvFont pb_font = cvFontQt(\"Arial\", 24, cvScalar(255, 0, 0), CV_FONT_BLACK, CV_STYLE_NORMAL, 0);\n  CvFont pb_state = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont pb_state_value = cvFontQt(\"Arial\", 16, cvScalar(0, 0, 255), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont pb_center = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont pb_radius = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont pb_angle = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n  CvFont pb_depth = cvFontQt(\"Arial\", 16, cvScalarAll(0), CV_FONT_BOLD, CV_STYLE_NORMAL, 0);\n\n  // Sample Detection Text\n  cvAddText (DispImage, \"Sample Detection\", cvPoint(410, 40), &sample_font);\n  cvAddText (DispImage, \"Detection State       : \", cvPoint(410, 80), &sample_state);  \n  cvAddText (DispImage, \"Searching...\", cvPoint(650, 80), &sample_state_value);  \n  cvAddText (DispImage, \"Sample Angle φ      : \", cvPoint(410, 110), &sample_center);  \n  cvAddText (DispImage, \"Arm Radius r           : \", cvPoint(410, 140), &sample_radius);  \n  cvAddText (DispImage, \"Arm Orientation θ   : \", cvPoint(410, 170), &sample_angle);  \n  cvAddText (DispImage, \"Arm Depth z            : \", cvPoint(410, 200), &sample_depth);  \n\n  // Payload Bay Detection Text\n  cvAddText (DispImage, \"Payload Bay Detection\", cvPoint(410, 280), &pb_font);\n  cvAddText (DispImage, \"Detection State       : \", cvPoint(410, 320), &pb_state);  \n  cvAddText (DispImage, \"Searching...\", cvPoint(650, 320), &pb_state_value);  \n  cvAddText (DispImage, \"Bay Center O           : \", cvPoint(410, 350), &pb_center);  \n  cvAddText (DispImage, \"Arm Radius r           : \", cvPoint(410, 380), &pb_radius);  \n  cvAddText (DispImage, \"Arm Orientation θ   : \", cvPoint(410, 410), &pb_angle);  \n  cvAddText (DispImage, \"Arm Depth z            : \", cvPoint(410, 440), &pb_depth);  \n  /*\n  unsigned int microseconds = 3000000;\n\n  while(true) {\n  cvShowManyImages(\"UIP\", 4, img1, img2, img3, img4);\n  usleep(microseconds);\n  }\n  */\n\n   cvShowImage( title, DispImage);\n\n   //   cvShowImage(title, DispImage);\n   /*\n    cvWaitKey();\n   cvDestroyWindow(title);\n\n  // End the number of arguments\n   va_end(args);\n\n  // Release the Image Memory\n   cvReleaseImage(&DispImage);\n   */\n}\n",
                "Initialization": "  ROS_INFO(\"Initializing User Input Imager\");\n\n  //////////////////////////////////////////////\n  // UIP LCD SETUP\n  //////////////////////////////////////////////\n  \n  // The Four Images to show in UIP\n  //  top_right = cvLoadImage(\"/home/debian/Repositories/agse2015/code/UIP/input/white.png\");\n  //  bottom_right = cvLoadImage(\"/home/debian/Repositories/agse2015/code/UIP/input/white.png\");\n\n  key = 0;\n\n  Mode_1 = cvCreateImage( cvSize(800, 480), 8, 3);\n  Mode_2 = cvCreateImage( cvSize(800, 480), 8, 3);\n  Mode_3 = cvCreateImage( cvSize(800, 480), 8, 3);\n  Mode_4 = cvCreateImage( cvSize(800, 480), 8, 3);\n  processed_image = cvCreateImage(cvSize(1920, 1080), 8, 3);",
                "Members": "  // Received Images\n  Mat pb_rawImage;\n  Mat pb_hsvImage;\n  Mat pb_gsImage;\n  Mat pb_bitwise;\n\n  Mat sample_rawImage;\n  Mat sample_hsvImage;\n  Mat sample_gsImage;\n  Mat sample_bitwise;\n\n  // Four Images to show in UIP\n  IplImage * top_left;\n  IplImage * top_right;\n  IplImage * bottom_left;\n  IplImage * bottom_right;\n\n  // Fullscreen single images\n  IplImage * camera_feed;\n  IplImage * processed_image;\n\n  // Keyboard interrupt\n  int key;",
                "name": "userDisplay"
            },
            "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "5364e1ea-29d3-bc62-87fa-b5715ac58d86"
            },
            "registry": {
                "position": {
                    "x": 786,
                    "y": 108
                }
            },
            "sets": {
                "Libraries": [
                    {
                        "attributes": {},
                        "guid": "4d5526bf-5772-cc61-a03d-36ff99280a1f",
                        "registry": {
                            "position": {
                                "x": 419,
                                "y": 189
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "7dd6c967-4043-a173-2548-d357b944b810",
                        "registry": {
                            "position": {
                                "x": 595,
                                "y": 209
                            }
                        }
                    },
                    {
                        "attributes": {},
                        "guid": "c2d1d475-839e-2efe-b48c-410517c4532c",
                        "registry": {
                            "position": {
                                "x": 579,
                                "y": 357
                            }
                        }
                    }
                ]
            }
        },
        "bf3c5759-8b0e-c5a7-7666-e3d42038bc48": {
            "attributes": {
                "Definition": "---\nint8 status\nfloat32 x\nfloat32 y\nfloat32 angle",
                "name": "payloadBayStateFromImage"
            },
            "base": "27271a90-b612-119a-4451-26b58c0a84b2",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "27271a90-b612-119a-4451-26b58c0a84b2"
            },
            "registry": {
                "position": {
                    "x": 447,
                    "y": 530
                }
            },
            "sets": {}
        },
        "c02d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "b3357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "c0742d5e-657f-56c8-fa2f-38560878df39": {
            "attributes": {
                "Operation": "if (noGPIO == false) {\n\n  // Business Logic for userInputTimer\n  // HANDLE MISSILE SWITCHES HERE\n  unsigned int previousSwitchState = pauseSwitchState;\n  gpio_get_value(pauseSwitchPin, &pauseSwitchState);\n  //  ROS_INFO(\"Pause Switch State: %d\", pauseSwitchState);\n\n  high_level_controller::controlInputs control;\n\n  if ( previousSwitchState != pauseSwitchState )\n  {\n    paused = (pauseSwitchState == HIGH) ? true : false;\n    if (paused) {\n      ROS_INFO(\"Pausing the system!\");\n    }\n    else {\n      ROS_INFO(\"Unpausing the system!\");\n    }\n  }\n  previousSwitchState = haltSwitchState;\n  gpio_get_value(haltSwitchPin, &haltSwitchState);\n  if ( previousSwitchState != haltSwitchState )\n  {\n    halted = (haltSwitchState == HIGH) ? true : false;\n    if (halted) {\n      ROS_INFO(\"Halting the system!\");\n    }\n    else {\n      ROS_INFO(\"Un-halting the system!\");\n    }\n  }\n  previousSwitchState = manualSwitchState;\n  gpio_get_value(manualSwitchPin, &manualSwitchState);\n  if ( previousSwitchState != manualSwitchState )\n  {\n    manual= (manualSwitchState == HIGH) ? true : false;\n    if (manual) {\n      ROS_INFO(\"Switching the system to manual!\");\n    }\n    else {\n      ROS_INFO(\"Switching the system to automatic!\");\n    }\n  }\n  control.paused = paused;\n  control.stop = halted;\n  control.manual = manual;\n  controlInputsPublisher.publish(control);\n\n  // HANDLE LED OUTPUTS HERE\n  static int currentPauseLEDBlinkDelay = 0;\n  static int currentSampleLEDBlinkDelay = 0;\n  static int currentBayLEDBlinkDelay = 0;\n\n  if (paused)\n  {\n    gpio_set_value(pauseLED, HIGH);\n  }\n  else\n  {\n    if (currentPauseLEDBlinkDelay++ < pauseLEDBlinkDelay)\n      gpio_set_value(pauseLED,LOW);\n    else\n    {\n      gpio_set_value(pauseLED,HIGH);\n      currentPauseLEDBlinkDelay = 0;\n    }\n  }\n\n  if (halted) {\n    gpio_set_value(alarmLED, HIGH);\n  }\n  else {\n    gpio_set_value(alarmLED, LOW);\n  }\n\n  switch (arm.state) {\n    case 0:\n    // INIT\n    gpio_set_value(initLED[0], HIGH);\n    break;\n    case 1:\n    // OPENING_PB\n    gpio_set_value(initLED[0], LOW); // Switch OFF Blue\n    gpio_set_value(initLED[1], HIGH); // Switch ON Green\n    gpio_set_value(bayLED[0], LOW); // Switch OFF Blue\n    //    gpio_set_value(bayLED[1], HIGH); // Switch ON Green    \n    break;\n    case 2:\n    // FINDING_SAMPLE\n    gpio_set_value(sampleLED[0], HIGH); // Switch ON Blue\n    break;\n    case 3:\n    // FINDING_PB\n    gpio_set_value(bayLED[0], HIGH); // Blue\n\n    // Blink Sample LED Green\n    gpio_set_value(sampleLED[0], LOW); // Switch ON Blue\n    if (currentSampleLEDBlinkDelay++ < sampleLEDBlinkDelay)\n      gpio_set_value(sampleLED[1], LOW);\n    else\n    {\n      gpio_set_value(sampleLED[1], HIGH);\n      currentSampleLEDBlinkDelay = 0;\n    }\n    break;\n    case 4:\n    // GRABBING_SAMPLE\n    gpio_set_value(sampleLED[0], LOW); // Switch OFF Blue\n    gpio_set_value(sampleLED[1], HIGH); // Switch ON Green    \n\n    // Blink Payload Bay LED Gree\n    gpio_set_value(bayLED[0], LOW); // Switch OFF Blue\n    if (currentBayLEDBlinkDelay++ < bayLEDBlinkDelay)\n      gpio_set_value(bayLED[1], LOW);\n    else\n    {\n      gpio_set_value(bayLED[1], HIGH);\n      currentBayLEDBlinkDelay = 0;\n    }\n    break;\n    case 5:\n    gpio_set_value(bayLED[1], HIGH);\n    gpio_set_value(sampleLED[1], HIGH);\n    break;\n    default:\n    break;\n  }\n}\n",
                "name": "userInputTimer"
            },
            "base": "0f474808-eadf-a345-7ee9-7279326aab1e",
            "meta": {},
            "parent": "51321b06-2a7b-eebe-187b-a68c11e80b87",
            "pointers": {
                "base": "0f474808-eadf-a345-7ee9-7279326aab1e"
            },
            "registry": {
                "position": {
                    "x": 391,
                    "y": 440
                }
            },
            "sets": {}
        },
        "c093774a-c2a4-bf78-3180-5f6f82ed8cf5": {
            "attributes": {
                "Operation": "  paused = received_data->paused;\n  ROS_INFO( paused ? \"Image Sensor paused!\" : \"Image Sensor Unpaused!\" );",
                "name": "controlInputsSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "7599b53d-653a-1ff6-0d2a-c6a49dec721c",
            "pointers": {
                "Message": "1f0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 437,
                    "y": 393
                }
            },
            "sets": {}
        },
        "c120272d-4798-3401-9087-d53be13fa646": {
            "attributes": {
                "name": "Cluster"
            },
            "base": "df437d49-a83e-6944-62ed-52fd3dcf806d",
            "meta": {},
            "parent": "04fdc95b-f567-260d-dc01-d41068d3367b",
            "pointers": {
                "base": "df437d49-a83e-6944-62ed-52fd3dcf806d"
            },
            "registry": {
                "position": {
                    "x": 361,
                    "y": 197
                }
            },
            "sets": {}
        },
        "c13851f2-6d96-924e-ad80-da6c3c41050c": {
            "attributes": {
                "IP": "10.1.1.1"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "e82d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5": {
            "attributes": {
                "ABL": "",
                "Deadline": 0,
                "Operation": "",
                "name": "Subscriber"
            },
            "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293",
            "meta": {
                "attributes": {
                    "Deadline": {
                        "type": "float"
                    },
                    "Operation": {
                        "type": "string"
                    },
                    "ABL": {
                        "type": "string"
                    }
                },
                "pointers": {
                    "Message": {
                        "items": [
                            "cf2109f7-7027-451c-095f-c0bc64833ba9"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "Message": null,
                "base": "da2ea5d7-26ee-0923-0025-38bfbceb5293"
            },
            "registry": {
                "decorator": "CodeEditorDecorator",
                "isAbstract": false,
                "position": {
                    "x": 155,
                    "y": 830
                }
            },
            "sets": {}
        },
        "c22d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "b1357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "c29ad503-417a-f40a-28da-57503f809a90": {
            "attributes": {
                "URL": "https://github.com/rosmod/lib-bbbgpio/files/170736/bbbgpio.zip",
                "name": "bbbgpio"
            },
            "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a"
            },
            "registry": {
                "position": {
                    "x": 833,
                    "y": 140
                }
            },
            "sets": {}
        },
        "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a": {
            "attributes": {
                "URL": "",
                "name": "Source Library"
            },
            "base": "e4236ea7-bd34-9066-b116-da90faa42f94",
            "meta": {
                "attributes": {
                    "URL": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "e4236ea7-bd34-9066-b116-da90faa42f94"
            },
            "registry": {
                "SVGIcon": "svgs/sourceLibrary.svg",
                "decorator": "SVGDecorator",
                "isAbstract": false,
                "position": {
                    "x": 454,
                    "y": 598
                }
            },
            "sets": {}
        },
        "c2d1d475-839e-2efe-b48c-410517c4532c": {
            "attributes": {
                "Include Directories": "/usr/include/opencv2",
                "Link Libraries": "",
                "name": "OpenCV"
            },
            "base": "11c26da0-dda2-d00c-dc36-f53c52c3fc62",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "11c26da0-dda2-d00c-dc36-f53c52c3fc62"
            },
            "registry": {
                "position": {
                    "x": 770,
                    "y": 329
                }
            },
            "sets": {}
        },
        "c40895ae-00a8-9a6d-8907-36175a362c97": {
            "attributes": {
                "Directory": "/home/jeb",
                "Key": "/home/jeb/.ssh/id_rsa",
                "name": "jeb"
            },
            "base": "984baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "a14ea363-cf12-dc75-fef2-48cc7b40fb6b",
            "pointers": {
                "base": "984baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 305,
                    "y": 138
                }
            },
            "sets": {}
        },
        "c4d02e7c-c012-94dc-0e24-d04b2752434b": {
            "attributes": {
                "Operation": "  if (!paused)\n    {\n      // read current value for vertical position (encoder)\n      verticalCurrent = verticalMotoreQEP.get_position();\n      //ROS_INFO(\"Vertical Actuator Encoder Reading: %d\",verticalCurrent);\n\n      unsigned int limitSwitchState = 0;\n      unsigned int backwardPinState = 0;\n      gpio_get_value(lowerLimitSwitchPin,&limitSwitchState);\n      gpio_get_value(motorBackwardPin,&backwardPinState);\n      if (backwardPinState && !limitSwitchState)\n\t{\n\t  lowerLimitReached = true;\n\t}\n      // update motor based on current value\n      if ( abs(verticalGoal-verticalCurrent) > epsilon ) // if there's significant reason to move\n\t{\n\t  if (verticalGoal > verticalCurrent) \n\t    {\n\t      lowerLimitReached = false;\n\t      gpio_set_value(motorBackwardPin,LOW);\n\t      gpio_set_value(motorForwardPin,HIGH);\n\t    }\n\t  else\n\t    {\n\t      gpio_set_value(motorForwardPin,LOW);\n\t      gpio_set_value(motorBackwardPin,HIGH);\n\t    }\n\t}\n      else\n\t{\n\t  gpio_set_value(motorForwardPin,LOW);\n\t  gpio_set_value(motorBackwardPin,LOW);\n\t}\n    }\n  else \n    {\n      gpio_set_value(motorForwardPin,LOW);\n      gpio_set_value(motorBackwardPin,LOW);      \n    }\n",
                "name": "verticalPositionTimer"
            },
            "base": "0f474808-eadf-a345-7ee9-7279326aab1e",
            "meta": {},
            "parent": "0a064327-011a-e497-672b-785e37ff448a",
            "pointers": {
                "base": "0f474808-eadf-a345-7ee9-7279326aab1e"
            },
            "registry": {
                "position": {
                    "x": 383,
                    "y": 447
                }
            },
            "sets": {}
        },
        "c8645e9e-668a-d508-45ff-0920ef6a39a8": {
            "attributes": {
                "Operation": "    if (req.update == true)\n    {\n      //      ROS_INFO(\"GOT NEW RADIAL GOAL: %d\",(int)req.goal);\n      //      ROS_INFO(\"CURRENT RADIUS: %d\",radialCurrent);\n      radialGoal = req.goal;\n    }\n  if (req.setZeroPosition == true)\n    {\n      ROS_INFO(\"ZEROED RADIAL ENCODER\");\n      radialMotoreQEP.set_position(0);\n    }\n  res.lowerLimitReached = lowerLimitReached;\n  res.upperLimitReached = false;\n  res.current = radialCurrent;\n  return true;",
                "name": "radialPositionServer"
            },
            "base": "40634285-7f30-4d56-3e22-6047fe32f0d7",
            "meta": {},
            "parent": "9ec1ad14-ca6f-6895-63a1-6c501f97a49a",
            "pointers": {
                "Service": "6a84f65c-0fbe-1fc6-79e8-2ff4bc2dcd1e",
                "base": "40634285-7f30-4d56-3e22-6047fe32f0d7"
            },
            "registry": {
                "position": {
                    "x": 380,
                    "y": 221
                }
            },
            "sets": {}
        },
        "c92d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "ba357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "cb2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "b8357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {
            "attributes": {
                "name": "FCO"
            },
            "base": null,
            "meta": {
                "attributes": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "parent": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
            "pointers": {
                "base": null
            },
            "registry": {
                "DisplayFormat": "$name",
                "PortSVGIcon": "",
                "SVGIcon": "",
                "decorator": "",
                "isAbstract": false,
                "isPort": false,
                "position": {
                    "x": 318,
                    "y": 295
                },
                "validVisualizers": "ModelEditor SetEditor"
            },
            "sets": {}
        },
        "cf2109f7-7027-451c-095f-c0bc64833ba9": {
            "attributes": {
                "Definition": "",
                "name": "Message"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Definition": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/message.svg",
                "decorator": "CodeEditorDecorator",
                "position": {
                    "x": 304,
                    "y": 538
                }
            },
            "sets": {}
        },
        "d2401091-4e08-04c7-a9a2-d668fb6ea4df": {
            "attributes": {
                "Definition": "uint8[] rawImgVector\nuint8[] hsvThreshImgVector\nuint8[] gsThreshImgVector\nuint8[] bitwiseAndImgVector\nint16 width\nint16 height",
                "name": "sampleDetectionImages"
            },
            "base": "cf2109f7-7027-451c-095f-c0bc64833ba9",
            "meta": {},
            "parent": "3abf1c09-fdc4-61e7-1e53-501eff8e76ee",
            "pointers": {
                "base": "cf2109f7-7027-451c-095f-c0bc64833ba9"
            },
            "registry": {
                "position": {
                    "x": 254,
                    "y": 232
                }
            },
            "sets": {}
        },
        "d244680c-8428-99b8-e7ab-efdf266bce4e": {
            "attributes": {},
            "base": "6426cc7b-5cb2-d3a7-0790-58b46d29b705",
            "meta": {},
            "parent": "f92d7582-1476-efca-9f72-fa9e89ecea2d",
            "pointers": {
                "base": "6426cc7b-5cb2-d3a7-0790-58b46d29b705"
            },
            "registry": {
                "position": {
                    "x": 165,
                    "y": 142
                }
            },
            "sets": {}
        },
        "d5357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node26"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 104,
                    "y": 1859
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "d5367025-51d7-5b40-bcc6-664ee22902e4": {
            "attributes": {
                "URL": "https://github.com/rosmod/lib-dynamixel/files/170737/dynamixel.zip",
                "name": "dynamixel"
            },
            "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a",
            "meta": {},
            "parent": "7ec97e63-8e60-b0c0-8e25-eec82cec64be",
            "pointers": {
                "base": "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a"
            },
            "registry": {
                "position": {
                    "x": 743,
                    "y": 203
                }
            },
            "sets": {}
        },
        "d7357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node18"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 102,
                    "y": 1341
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "d782b608-6786-9f32-8141-4e616f54c23c": {
            "attributes": {
                "Directory": "/home/ubuntu",
                "Key": "/home/jeb/.ssh/id_rsa_jetsontk1",
                "name": "ubuntu"
            },
            "base": "984baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "984baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 616,
                    "y": 532
                }
            },
            "sets": {}
        },
        "d99b77d9-0121-d873-f4c7-784bd7690980": {
            "attributes": {
                "IP": "10.1.1.3"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "3b2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "da2ea5d7-26ee-0923-0025-38bfbceb5293": {
            "attributes": {
                "NetworkProfile": "",
                "Priority": 50,
                "name": "Port"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Priority": {
                        "type": "integer",
                        "max": 99
                    },
                    "NetworkProfile": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "isAbstract": true,
                "isPort": false,
                "position": {
                    "x": 201,
                    "y": 780
                }
            },
            "sets": {}
        },
        "db6aa52c-19d4-c683-5f30-17b381f7e42f": {
            "attributes": {
                "IP": "10.1.1.25"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "c02d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "dc357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node14"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 105,
                    "y": 1073
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "de357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node6"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 99,
                    "y": 500
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "df437d49-a83e-6944-62ed-52fd3dcf806d": {
            "attributes": {
                "name": "System"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "36d534c1-207e-1c52-5336-c74ff256793f",
                        "984baea9-4feb-5630-81f3-085218530d89",
                        "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                        "ae4baea9-4feb-5630-81f3-085218530d89"
                    ],
                    "minItems": [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    "maxItems": [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                "mixins": [
                    "eecf10d5-1ea4-b2f5-5342-4b3dc960899c"
                ]
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/network.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 789,
                    "y": 429
                }
            },
            "sets": {}
        },
        "e12d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "92357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "e25ad296-2547-7c6a-ad35-e79b3d417157": {
            "attributes": {},
            "base": "36d534c1-207e-1c52-5336-c74ff256793f",
            "meta": {},
            "parent": "47ab116f-f11c-a37a-8b11-291b91578348",
            "pointers": {
                "base": "36d534c1-207e-1c52-5336-c74ff256793f"
            },
            "registry": {
                "position": {
                    "x": 272,
                    "y": 300
                }
            },
            "sets": {}
        },
        "e32d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "90357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "e3cd1771-47f7-af5e-11bf-1016427c49fb": {
            "attributes": {
                "IP": "10.1.1.14"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "af2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "e400d5b7-c955-fc81-382e-2c414b44fc20": {
            "attributes": {
                "name": "Interface"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {},
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "isPort": true,
                "position": {
                    "x": 839,
                    "y": 609
                }
            },
            "sets": {}
        },
        "e4236ea7-bd34-9066-b116-da90faa42f94": {
            "attributes": {
                "Link Libraries": "",
                "name": "Library"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Link Libraries": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "isAbstract": true,
                "position": {
                    "x": 444,
                    "y": 538
                }
            },
            "sets": {}
        },
        "e5a436af-5bd6-f65e-739d-64600c8e4683": {
            "attributes": {},
            "base": "2562febd-1839-d9fe-3b97-0a0548314d85",
            "meta": {},
            "parent": "a361e083-c5a2-be94-f0c4-e157912d2d77",
            "pointers": {
                "base": "2562febd-1839-d9fe-3b97-0a0548314d85"
            },
            "registry": {
                "borderColor": "#99ff99",
                "color": "#33ffff",
                "position": {
                    "x": 155,
                    "y": 137
                }
            },
            "sets": {}
        },
        "e82d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "9b357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "e95e44ec-0245-5b7d-1650-bfb4f10b941c": {
            "attributes": {
                "name": "Deployments"
            },
            "base": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9",
            "meta": {},
            "parent": "8bc323b4-a4eb-abcd-b7a2-f710630dce1c",
            "pointers": {
                "base": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9"
            },
            "registry": {
                "position": {
                    "x": 123,
                    "y": 325
                }
            },
            "sets": {}
        },
        "e9857a0d-db6e-8197-12f8-76b4ef60b107": {
            "attributes": {
                "name": "Experiment"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "6426cc7b-5cb2-d3a7-0790-58b46d29b705"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                },
                "pointers": {
                    "System": {
                        "items": [
                            "df437d49-a83e-6944-62ed-52fd3dcf806d"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    },
                    "Deployment": {
                        "items": [
                            "7c902cff-78a7-29da-9892-c0ecdc182ab3"
                        ],
                        "minItems": [
                            -1
                        ],
                        "maxItems": [
                            1
                        ],
                        "max": 1,
                        "min": 1
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "Deployment": null,
                "System": null,
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/experiment2.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 1309,
                    "y": 416
                },
                "validPlugins": "RunExperiment"
            },
            "sets": {}
        },
        "ea2d14c8-aee9-dece-1155-2553a795b2ef": {
            "attributes": {
                "name": "eth0"
            },
            "base": "e400d5b7-c955-fc81-382e-2c414b44fc20",
            "meta": {},
            "parent": "99357525-43a6-9058-d9f6-607e9275fb5e",
            "pointers": {
                "base": "e400d5b7-c955-fc81-382e-2c414b44fc20"
            },
            "registry": {
                "position": {
                    "x": 362,
                    "y": 255
                }
            },
            "sets": {}
        },
        "eb266241-f732-e42a-f6d9-d422565a6fb6": {
            "attributes": {},
            "base": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9",
            "meta": {},
            "parent": "fbb9e11b-926b-10de-58e9-a161fe9deec9",
            "pointers": {
                "base": "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9"
            },
            "registry": {
                "position": {
                    "x": 180,
                    "y": 323
                }
            },
            "sets": {}
        },
        "eb7ba3ff-ef69-3368-24b8-84ee1a9e4e93": {
            "attributes": {
                "IP": "10.1.1.6"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "ad2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "ecde4aa3-106a-f888-fe6b-473f56ac2d21": {
            "attributes": {
                "name": "sampleStateSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1",
            "pointers": {
                "Message": "2acb9167-ab2a-9164-a638-972a058f218c",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 802,
                    "y": 38
                }
            },
            "sets": {}
        },
        "ed7d7340-3e40-ea91-ceaf-371d90d75662": {
            "attributes": {
                "IP": "10.1.1.31"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "302d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "ee48c86c-137a-c89e-f82d-2672e5ccff92": {
            "attributes": {
                "IP": "10.1.1.10"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "8c2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "eecf10d5-1ea4-b2f5-5342-4b3dc960899c": {
            "attributes": {
                "Authors": "",
                "Brief": "",
                "Detailed": "",
                "name": "Documentation"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "attributes": {
                    "Brief": {
                        "type": "string"
                    },
                    "Detailed": {
                        "type": "string"
                    },
                    "Authors": {
                        "type": "string"
                    }
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "position": {
                    "x": 82,
                    "y": 111
                }
            },
            "sets": {}
        },
        "f0c3e8b4-d847-1890-e883-b293be17add9": {
            "attributes": {
                "name": "radialPositionClient"
            },
            "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Service": "6a84f65c-0fbe-1fc6-79e8-2ff4bc2dcd1e",
                "base": "5e036e97-58b4-2376-76c5-97ef45bd8c29"
            },
            "registry": {
                "position": {
                    "x": 397,
                    "y": 238
                }
            },
            "sets": {}
        },
        "f1d51591-74b9-6f43-d930-2e0cfebee7f2": {
            "attributes": {
                "IP": "10.1.1.15"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "1a2d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "f4357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node22"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 103,
                    "y": 1597
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "f5b6be0c-b866-ac8f-c0e9-38e8c3cba2de": {
            "attributes": {
                "Operation": "paused = received_data->paused;",
                "name": "controlInputsSubscriber"
            },
            "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5",
            "meta": {},
            "parent": "8c0974bd-12e4-dc59-4d43-7982b534b262",
            "pointers": {
                "Message": "1f0e696a-b922-ec04-d0bf-b3eeb74660c9",
                "base": "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5"
            },
            "registry": {
                "position": {
                    "x": 569,
                    "y": 383
                }
            },
            "sets": {}
        },
        "f6357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "Architecture": "armv7l",
                "name": "Node30"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 2107
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "f92d7582-1476-efca-9f72-fa9e89ecea2d": {
            "attributes": {},
            "base": "e9857a0d-db6e-8197-12f8-76b4ef60b107",
            "meta": {},
            "parent": "a0aedc6c-26be-58cb-4c99-7cb20a0772ce",
            "pointers": {
                "base": "e9857a0d-db6e-8197-12f8-76b4ef60b107"
            },
            "registry": {
                "position": {
                    "x": 150,
                    "y": 164
                }
            },
            "sets": {}
        },
        "fbb9e11b-926b-10de-58e9-a161fe9deec9": {
            "attributes": {
                "Authors": "William Emfinger",
                "Detailed": "This project contains the code and models for network traffic light controllers which receive sensor data from inductive loop sensors and send actuator commands to traffic lights based on their control logic and parameters.  These sensors and actuators (as well as the actual cars in the traffic network) are simulated using the Simulation of Urban Mobility (SUMO) simulator.  This code uses the TraCIAPI in lib-sumo to send and receive data to/from the simulation.",
                "name": "Traffic Light Controller"
            },
            "base": "a83b8adb-232e-4f68-ca06-3ee2c728765b",
            "meta": {},
            "parent": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
            "pointers": {
                "base": "a83b8adb-232e-4f68-ca06-3ee2c728765b"
            },
            "registry": {
                "position": {
                    "x": 100,
                    "y": 100
                }
            },
            "sets": {}
        },
        "fd357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node2"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 104,
                    "y": 240
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        },
        "fe2f7057-8238-2032-4e6b-3012e0a4ea85": {
            "attributes": {
                "name": "Experiments"
            },
            "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "meta": {
                "children": {
                    "items": [
                        "e9857a0d-db6e-8197-12f8-76b4ef60b107"
                    ],
                    "minItems": [
                        -1
                    ],
                    "maxItems": [
                        -1
                    ]
                }
            },
            "parent": "2e129f64-d002-cefe-20f8-256883f4b003",
            "pointers": {
                "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
            },
            "registry": {
                "SVGIcon": "svgs/experiments2.svg",
                "decorator": "SVGDecorator",
                "position": {
                    "x": 1309,
                    "y": 326
                }
            },
            "sets": {}
        },
        "ff038fbb-6658-4ff3-0bce-d0b26e5a494b": {
            "attributes": {
                "IP": "10.1.1.17"
            },
            "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "9c50fc4a-3e84-5cb0-812e-59460da120f2",
                "dst": "34b22029-292d-bf37-d953-d91dedab2436",
                "src": "c22d14c8-aee9-dece-1155-2553a795b2ef"
            },
            "registry": {
                "position": {
                    "x": 310,
                    "y": 682
                }
            },
            "sets": {}
        },
        "ff357525-43a6-9058-d9f6-607e9275fb5e": {
            "attributes": {
                "name": "Node10"
            },
            "base": "ae4baea9-4feb-5630-81f3-085218530d89",
            "meta": {},
            "parent": "c120272d-4798-3401-9087-d53be13fa646",
            "pointers": {
                "base": "ae4baea9-4feb-5630-81f3-085218530d89"
            },
            "registry": {
                "position": {
                    "x": 105,
                    "y": 791
                }
            },
            "sets": {
                "Users": [
                    {
                        "attributes": {},
                        "guid": "3109804a-d102-0849-9ad7-b2411f3ce732",
                        "registry": {
                            "position": {
                                "x": 678,
                                "y": 311
                            }
                        }
                    }
                ]
            }
        }
    },
    "relids": {
        "000e696a-b922-ec04-d0bf-b3eeb74660c9": "T",
        "0066ce30-e372-bb27-23c3-219c7d934553": "2",
        "024964e5-fa2e-785e-fe9f-0eba2f263e8d": "C",
        "030622c4-50cc-32b0-031c-28be37569518": "T",
        "03d36072-9e09-7866-cb4e-d0a36ff825f6": null,
        "04357525-43a6-9058-d9f6-607e9275fb5e": "F",
        "043de1ab-0b51-afeb-be5f-a5a167b3a363": "g",
        "04fdc95b-f567-260d-dc01-d41068d3367b": "N",
        "05c1b20d-f9c0-c853-9172-7dd28e48e313": "Z",
        "06357525-43a6-9058-d9f6-607e9275fb5e": "b",
        "0880f4eb-1dea-2d26-2dfd-1e735a3e739b": "g",
        "0a064327-011a-e497-672b-785e37ff448a": "1",
        "0d357525-43a6-9058-d9f6-607e9275fb5e": "4",
        "0dad946f-7b49-ccba-aff2-c85e58b60ea7": "3",
        "0ecb9167-ab2a-9164-a638-972a058f218c": "u",
        "0efa5f96-1a20-d716-2400-b65695efddc2": "l",
        "0f357525-43a6-9058-d9f6-607e9275fb5e": "8",
        "0f474808-eadf-a345-7ee9-7279326aab1e": "l",
        "112d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "11aa8166-89d9-0008-646c-9c5fc6816600": "T",
        "11ba8891-12a8-41c0-9380-f19a41e8dc53": "GY",
        "11c26da0-dda2-d00c-dc36-f53c52c3fc62": "w",
        "11cb9167-ab2a-9164-a638-972a058f218c": "A",
        "12a356d3-8ec8-dd52-0801-686fb2299ef2": "UT",
        "132d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "13476356-59e6-ee3c-2834-6fe453f1fd92": "r",
        "182d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "183b7c25-179d-e884-f133-0024a5db330e": "f",
        "1a2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "1aacd0f7-c612-def1-e351-b3e09db56136": "5",
        "1b4dffef-842f-6b3c-0302-596cf56a5459": "K",
        "1f0e696a-b922-ec04-d0bf-b3eeb74660c9": "j",
        "240e696a-b922-ec04-d0bf-b3eeb74660c9": "9",
        "242f9041-eeea-76ed-9546-62d8d83ee81e": "e",
        "25357525-43a6-9058-d9f6-607e9275fb5e": "Y",
        "2562febd-1839-d9fe-3b97-0a0548314d85": "R",
        "265e2d6f-1ce3-f1ce-af71-3934f174d63e": "7",
        "271decd7-fb7c-8661-135c-400aa45350df": "c",
        "27271a90-b612-119a-4451-26b58c0a84b2": "Z",
        "27357525-43a6-9058-d9f6-607e9275fb5e": "1",
        "284dffef-842f-6b3c-0302-596cf56a5459": "j",
        "296d633b-35b8-77d3-eadf-d49fc03b8301": "A",
        "2acb9167-ab2a-9164-a638-972a058f218c": "g",
        "2c357525-43a6-9058-d9f6-607e9275fb5e": "0",
        "2df2dde5-9823-c603-092a-f1fc1f28ca14": "7",
        "2e129f64-d002-cefe-20f8-256883f4b003": "3",
        "2e357525-43a6-9058-d9f6-607e9275fb5e": "X",
        "2fe9618f-ca21-b656-26d7-801acce13ec2": "Bf",
        "302d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "3109804a-d102-0849-9ad7-b2411f3ce732": "5",
        "322d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "32e6a6ea-9cd5-fb73-ff8f-803b2d3492e6": "Sw",
        "34b22029-292d-bf37-d953-d91dedab2436": "Z",
        "35cb9167-ab2a-9164-a638-972a058f218c": "c",
        "36d534c1-207e-1c52-5336-c74ff256793f": "b",
        "392d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "3abf1c09-fdc4-61e7-1e53-501eff8e76ee": "f",
        "3b0e696a-b922-ec04-d0bf-b3eeb74660c9": "e",
        "3b2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "3b52cac4-09c7-6e5d-9d78-656955adb4f1": "Y",
        "3b80f4eb-1dea-2d26-2dfd-1e735a3e739b": "i",
        "3f413882-9032-19b3-46d5-342f9f8538cf": "JG",
        "40634285-7f30-4d56-3e22-6047fe32f0d7": "q",
        "407b4c7e-9826-6855-d391-df7e96c3e73b": "C",
        "41357525-43a6-9058-d9f6-607e9275fb5e": "k",
        "43357525-43a6-9058-d9f6-607e9275fb5e": "R",
        "43ac0a99-4f0a-0ef0-40cc-e8e6cf6dd5f9": "W",
        "447d091e-edb3-cc67-88f8-2c4b643ee131": "c",
        "44fcafc0-e7f2-3dd7-27fb-da8fd5960950": "K",
        "453ca24e-7880-8749-b62d-a3d9717d32ad": "A",
        "4585b7fc-307e-c80c-ada2-02a2845c404d": "W",
        "47725ce0-f096-ea93-a507-004673d77790": "u",
        "47ab116f-f11c-a37a-8b11-291b91578348": "O",
        "47fdb167-6041-cd46-fa83-f6fb651c652d": "3",
        "48357525-43a6-9058-d9f6-607e9275fb5e": "q",
        "49725ce0-f096-ea93-a507-004673d77790": "x",
        "4a357525-43a6-9058-d9f6-607e9275fb5e": "L",
        "4a9f26bd-4fd6-acb3-0f4e-093cb9a34643": "j",
        "4bc1deb3-abb3-9bf2-ee49-a072843d1eaf": "gh",
        "4d04c2a5-a077-dbc9-bb12-690bb10fffc9": "d6",
        "4d5526bf-5772-cc61-a03d-36ff99280a1f": "v",
        "4f130061-8b9f-0389-c288-ad2d46eeab44": "3s",
        "4fc00747-714d-4832-998f-c520d0d3edfc": "n",
        "50177db4-7d87-86ab-98ae-472f9cfd788c": "w",
        "51321b06-2a7b-eebe-187b-a68c11e80b87": "5",
        "51477479-d072-83e6-eecf-edf8c60a35e6": "h",
        "5173ec58-cf6c-e536-1efc-d1cf17642062": "R",
        "51b3d75d-3340-147d-0d42-302ed11445ed": "V",
        "52c371ec-8f35-bee7-ee11-1de6f0cda7d4": "R",
        "5364e1ea-29d3-bc62-87fa-b5715ac58d86": "8",
        "542d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "55125e5b-e6b2-0557-d0ca-e9e678b4581a": "j",
        "562d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "5a1725b5-953f-cbf1-d72d-4897c4d55c11": "A",
        "5a606d01-44cd-486e-3400-45b5dc693198": "e",
        "5d2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "5e036e97-58b4-2376-76c5-97ef45bd8c29": "d",
        "5e29f1d2-99a8-9559-faff-e924a9c5e677": "K",
        "5f2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "5fa73dfc-a08d-9aa3-cb07-c7869fccd187": "5",
        "60248922-f473-bc97-d362-1d9cb0a32efd": "J",
        "60357525-43a6-9058-d9f6-607e9275fb5e": "3",
        "62357525-43a6-9058-d9f6-607e9275fb5e": "6",
        "6426cc7b-5cb2-d3a7-0790-58b46d29b705": "P",
        "65d2144b-00c4-571f-ac50-4cfaa9bec92d": "Q",
        "679e634b-48de-6844-8479-229fb51dfaf8": "n3",
        "6815fb72-468f-ef04-95a9-117eb05569de": "o",
        "692c4cbd-629c-8265-5d80-9b1dd5103c39": "x",
        "69357525-43a6-9058-d9f6-607e9275fb5e": "I",
        "6a84f65c-0fbe-1fc6-79e8-2ff4bc2dcd1e": "d",
        "6af13451-3d33-a993-7f16-bcbcc85fce96": "Y",
        "6b357525-43a6-9058-d9f6-607e9275fb5e": "E",
        "6c0c5975-cf58-cb4b-be6c-292744a30726": "IH",
        "6d32e61a-93a8-9056-b3db-be265442f959": "Q",
        "6e77078a-7ffc-3881-d2b3-469431fa7020": "F",
        "6eee186c-a14e-3be3-d7b1-7fa840843c05": "K",
        "6f725ce0-f096-ea93-a507-004673d77790": "X",
        "752d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "7575417a-f5cb-d71e-d261-752e90aee4c3": "L",
        "75973fe4-d007-56ab-2df2-483fac45138c": "w",
        "7599b53d-653a-1ff6-0d2a-c6a49dec721c": "W",
        "769c7992-7dd1-3447-3e3c-953fd7e158d4": "1",
        "772d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "7781e7ee-ca18-2432-2180-4dadebfe0def": "W",
        "78617d39-7d27-d9f9-b421-7b8621f0380c": "T",
        "7af22c4c-4adc-d2ff-0bc4-6fab8ebce68e": "c",
        "7c2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "7c408f55-a315-ae29-dd73-60bbbfc9fb8d": "n",
        "7c902cff-78a7-29da-9892-c0ecdc182ab3": "i",
        "7c974a97-a7c9-94b1-12e9-dfddb839d1fb": "L",
        "7dd6c967-4043-a173-2548-d357b944b810": "A",
        "7e2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "7ea9e1e6-46ee-3981-0169-da6fd2981659": "b",
        "7ec97e63-8e60-b0c0-8e25-eec82cec64be": "8",
        "7eea081c-beab-287a-1aed-46821198b17c": "J",
        "83f33549-7a85-a619-35b2-b18209fdda9d": "r",
        "84f4223f-5696-75ae-9190-d695085aea4d": "Y",
        "852d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "862a9375-04a6-d7d7-72c3-7fd13b4b4b3b": "n",
        "872d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "874020d4-54d8-0c9b-0bda-18052dae44db": "r",
        "87dd799d-18a6-52e6-4fea-8bbf6167a7ef": "r",
        "883f2275-89f3-3656-d28f-33178a9e6a8d": "O",
        "8a20c8ac-2b78-609a-aebe-175f8964c890": "m",
        "8b4a76cc-97a5-fa9a-5eea-273484f9d5ac": "Lm",
        "8b77ee64-9293-7b02-03c2-508ee3e4ed74": "s",
        "8bc323b4-a4eb-abcd-b7a2-f710630dce1c": "k",
        "8c0974bd-12e4-dc59-4d43-7982b534b262": "V",
        "8c2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "8c5166ed-ded6-b1af-279f-ba01d0aff3fc": "G",
        "8e2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "8ed56a84-1f2b-cf95-c812-e0a6f8646438": "M",
        "8f76797c-3114-7740-e093-71d15765f2b3": "a",
        "8ff74691-1535-f037-068b-52df355dd0bd": "U",
        "90357525-43a6-9058-d9f6-607e9275fb5e": "d",
        "9109804a-d102-0849-9ad7-b2411f3ce732": "y",
        "92357525-43a6-9058-d9f6-607e9275fb5e": "S",
        "93f48121-6fe3-48ed-0cdc-dc9db647b01a": "u",
        "94dc4ba7-0a9c-f078-310f-cf1f2bf7bbe7": "4",
        "984baea9-4feb-5630-81f3-085218530d89": "s",
        "99357525-43a6-9058-d9f6-607e9275fb5e": "o",
        "99ea1844-3957-5ba6-7fa8-df10bec27d3e": "v",
        "9b357525-43a6-9058-d9f6-607e9275fb5e": "t",
        "9c50fc4a-3e84-5cb0-812e-59460da120f2": "f",
        "9c9bbae3-dc41-51ba-4cf5-e29562b4b28a": "S",
        "9ec1ad14-ca6f-6895-63a1-6c501f97a49a": "V",
        "a0aedc6c-26be-58cb-4c99-7cb20a0772ce": "X",
        "a14ea363-cf12-dc75-fef2-48cc7b40fb6b": "h",
        "a361e083-c5a2-be94-f0c4-e157912d2d77": "Z",
        "a377ee64-9293-7b02-03c2-508ee3e4ed74": "s",
        "a40d3a67-e6b2-043a-c7e3-3041d1475d11": "T",
        "a42d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "a4a3211d-4379-d33e-a070-7c38f71754ea": "Vg",
        "a62d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "a755c03e-6812-2249-d918-920af2dea6b1": "h",
        "a83b8adb-232e-4f68-ca06-3ee2c728765b": "h",
        "a9958819-7856-4774-1ef4-934c974095af": "O",
        "ad2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "ad688a62-aeb6-e1e6-31a2-573db6aee77c": "v",
        "ad77ee64-9293-7b02-03c2-508ee3e4ed74": "s",
        "ae4baea9-4feb-5630-81f3-085218530d89": "m",
        "af2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "b0326662-28a6-3f54-d802-de46fa7dd357": "C",
        "b1357525-43a6-9058-d9f6-607e9275fb5e": "z",
        "b19a7df1-b77a-fea6-b7f9-4cf640560c39": "Vs",
        "b2e7d5ea-aee1-a65f-0c05-8ab227b5be8f": "5",
        "b3357525-43a6-9058-d9f6-607e9275fb5e": "aH",
        "b4ad8902-a012-9b67-be2b-2af12cdefa37": "G",
        "b6a8c9f5-4472-8e3b-4035-f5e90fdac5bb": "Y",
        "b8357525-43a6-9058-d9f6-607e9275fb5e": "A",
        "ba0b9e89-2b1a-6163-aeac-8b1884e7638b": "B",
        "ba357525-43a6-9058-d9f6-607e9275fb5e": "QQ",
        "ba80db39-e4f4-0e84-a57a-02abf337529e": "9",
        "ba9a6737-e51e-c4f1-fdb6-d96dd86bd2d1": "D",
        "bf3c5759-8b0e-c5a7-7666-e3d42038bc48": "e",
        "c02d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "c0742d5e-657f-56c8-fa2f-38560878df39": "e",
        "c093774a-c2a4-bf78-3180-5f6f82ed8cf5": "8",
        "c120272d-4798-3401-9087-d53be13fa646": "U",
        "c13851f2-6d96-924e-ad80-da6c3c41050c": "oA",
        "c16cfc67-9b4e-eb3c-00a3-7f630c9eedb5": "c",
        "c22d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "c29ad503-417a-f40a-28da-57503f809a90": "n",
        "c2c96bb1-7afb-202f-aab6-2a75a33ffd0a": "V",
        "c2d1d475-839e-2efe-b48c-410517c4532c": "8",
        "c40895ae-00a8-9a6d-8907-36175a362c97": "K",
        "c4d02e7c-c012-94dc-0e24-d04b2752434b": "R",
        "c8645e9e-668a-d508-45ff-0920ef6a39a8": "L",
        "c92d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "cb2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": "1",
        "cf2109f7-7027-451c-095f-c0bc64833ba9": "I",
        "d2401091-4e08-04c7-a9a2-d668fb6ea4df": "4",
        "d244680c-8428-99b8-e7ab-efdf266bce4e": "a",
        "d5357525-43a6-9058-d9f6-607e9275fb5e": "c",
        "d5367025-51d7-5b40-bcc6-664ee22902e4": "u",
        "d7357525-43a6-9058-d9f6-607e9275fb5e": "g",
        "d782b608-6786-9f32-8141-4e616f54c23c": "3",
        "d99b77d9-0121-d873-f4c7-784bd7690980": "w",
        "da2ea5d7-26ee-0923-0025-38bfbceb5293": "z",
        "db6aa52c-19d4-c683-5f30-17b381f7e42f": "n2",
        "dc357525-43a6-9058-d9f6-607e9275fb5e": "N",
        "de357525-43a6-9058-d9f6-607e9275fb5e": "M",
        "df437d49-a83e-6944-62ed-52fd3dcf806d": "U",
        "e12d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "e25ad296-2547-7c6a-ad35-e79b3d417157": "Z",
        "e32d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "e3cd1771-47f7-af5e-11bf-1016427c49fb": "B",
        "e400d5b7-c955-fc81-382e-2c414b44fc20": "x",
        "e4236ea7-bd34-9066-b116-da90faa42f94": "1",
        "e5a436af-5bd6-f65e-739d-64600c8e4683": "k",
        "e82d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "e95e44ec-0245-5b7d-1650-bfb4f10b941c": "G",
        "e9857a0d-db6e-8197-12f8-76b4ef60b107": "9",
        "ea2d14c8-aee9-dece-1155-2553a795b2ef": "3",
        "eb266241-f732-e42a-f6d9-d422565a6fb6": "0",
        "eb7ba3ff-ef69-3368-24b8-84ee1a9e4e93": "i",
        "ecde4aa3-106a-f888-fe6b-473f56ac2d21": "l",
        "ed7d7340-3e40-ea91-ceaf-371d90d75662": "zr",
        "ee48c86c-137a-c89e-f82d-2672e5ccff92": "P",
        "eecf10d5-1ea4-b2f5-5342-4b3dc960899c": "n",
        "f0c3e8b4-d847-1890-e883-b293be17add9": "X",
        "f1d51591-74b9-6f43-d930-2e0cfebee7f2": "m",
        "f4357525-43a6-9058-d9f6-607e9275fb5e": "x",
        "f5b6be0c-b866-ac8f-c0e9-38e8c3cba2de": "A",
        "f6357525-43a6-9058-d9f6-607e9275fb5e": "0D",
        "f92d7582-1476-efca-9f72-fa9e89ecea2d": "S",
        "fbb9e11b-926b-10de-58e9-a161fe9deec9": "I",
        "fd357525-43a6-9058-d9f6-607e9275fb5e": "a",
        "fe2f7057-8238-2032-4e6b-3012e0a4ea85": "r",
        "ff038fbb-6658-4ff3-0bce-d0b26e5a494b": "h",
        "ff357525-43a6-9058-d9f6-607e9275fb5e": "l"
    },
    "metaSheets": {}
}